// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferered library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
(function($) {
function map(x) {
  x = Object.create(null);
  x.x = 0;
  delete x.x;
  return x;
}
var A = map();
var B = map();
var C = map();
var D = map();
var E = map();
var F = map();
var G = map();
var H = map();
var J = map();
var K = map();
var L = map();
var M = map();
var N = map();
var O = map();
var P = map();
var Q = map();
var R = map();
var S = map();
var T = map();
var U = map();
var V = map();
var W = map();
var X = map();
var Y = map();
var Z = map();
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
$.functionThatReturnsNull = function() {
};
;
function parseReflectionData(reflectionData) {
  "use strict";
  function generateAccessor(fieldDescriptor, accessors, cls) {
    var fieldInformation = fieldDescriptor.split("-");
    var field = fieldInformation[0];
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable;
    if (fieldInformation.length > 1)
      reflectable = true;
    else
      reflectable = false;
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        var property = cls + ".prototype.get$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        var property = cls + ".prototype.set$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
    }
    return field;
  }
  function defineClass(name, fields) {
    var accessors = [];
    var str = "function " + name + "(";
    var body = "";
    var fieldNames = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0)
        str += ", ";
      var field = generateAccessor(fields[i], accessors, name);
      fieldNames += "'" + field + "',";
      var parameter = "parameter_" + field;
      str += parameter;
      body += "this." + field + " = " + parameter + ";\n";
    }
    str += ") {\n" + body + "}\n";
    str += name + ".builtin$cls=\"" + name + "\";\n";
    str += "$desc=$collectedClasses." + name + ";\n";
    str += "if($desc instanceof Array) $desc = \$desc[1];\n";
    str += name + ".prototype = $desc;\n";
    if (typeof defineClass.name != "string")
      str += name + ".name=\"" + name + "\";\n";
    str += name + "." + "$__fields__" + "=[" + fieldNames + "];\n";
    str += accessors.join("");
    return str;
  }
  init.createNewIsolate = function() {
    return new Isolate();
  };
  init.classIdExtractor = function(o) {
    return o.constructor.name;
  };
  init.classFieldsExtractor = function(o) {
    var fieldNames = o.constructor.$__fields__;
    if (!fieldNames)
      return [];
    var result = [];
    result.length = fieldNames.length;
    for (var i = 0; i < fieldNames.length; i++)
      result[i] = o[fieldNames[i]];
    return result;
  };
  init.instanceFromClassId = function(name) {
    return new init.allClasses[name]();
  };
  init.initializeEmptyInstance = function(name, o, fields) {
    init.allClasses[name].apply(o, fields);
    return o;
  };
  var inheritFrom = function() {
    function tmp() {
    }
    return function(constructor, superConstructor) {
      if (superConstructor == null) {
        var prototype = constructor.prototype;
        prototype.constructor = constructor;
        prototype.$isObject = constructor;
        return prototype;
      }
      tmp.prototype = superConstructor.prototype;
      var object = new tmp();
      var properties = constructor.prototype;
      var members = Object.keys(properties);
      for (var i = 0; i < members.length; i++) {
        var member = members[i];
        object[member] = properties[member];
      }
      object["$is" + constructor.name] = constructor;
      object.constructor = constructor;
      constructor.prototype = object;
      return object;
    };
  }();
  function finishClasses(processedClasses) {
    var allClasses = init.allClasses;
    processedClasses.combinedConstructorFunction += "return [\n" + processedClasses.constructorsList.join(",\n  ") + "\n]";
    var constructors = new Function("$collectedClasses", processedClasses.combinedConstructorFunction)(processedClasses.collected);
    processedClasses.combinedConstructorFunction = null;
    for (var i = 0; i < constructors.length; i++) {
      var constructor = constructors[i];
      var cls = constructor.name;
      var desc = processedClasses.collected[cls];
      var globalObject = $;
      if (desc instanceof Array) {
        globalObject = desc[0] || $;
        desc = desc[1];
      }
      allClasses[cls] = constructor;
      globalObject[cls] = constructor;
    }
    constructors = null;
    var finishedClasses = init.finishedClasses;
    function finishClass(cls) {
      if (finishedClasses[cls])
        return;
      finishedClasses[cls] = true;
      var superclass = processedClasses.pending[cls];
      if (superclass && superclass.indexOf("+") > 0) {
        var s = superclass.split("+");
        superclass = s[0];
        var mixinClass = s[1];
        finishClass(mixinClass);
        var mixin = allClasses[mixinClass];
        var mixinPrototype = mixin.prototype;
        var clsPrototype = allClasses[cls].prototype;
        var properties = Object.keys(mixinPrototype);
        for (var i = 0; i < properties.length; i++) {
          var d = properties[i];
          if (!hasOwnProperty.call(clsPrototype, d))
            clsPrototype[d] = mixinPrototype[d];
        }
      }
      if (!superclass || typeof superclass != "string") {
        inheritFrom(allClasses[cls], null);
        return;
      }
      finishClass(superclass);
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var constructor = allClasses[cls];
      var prototype = inheritFrom(constructor, superConstructor);
      if (Object.prototype.hasOwnProperty.call(prototype, "%")) {
        var nativeSpec = prototype["%"].split(";");
        if (nativeSpec[0]) {
          var tags = nativeSpec[0].split("|");
          for (var i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = true;
          }
        }
        if (nativeSpec[1]) {
          tags = nativeSpec[1].split("|");
          if (nativeSpec[2]) {
            var subclasses = nativeSpec[2].split("|");
            for (var i = 0; i < subclasses.length; i++) {
              var subclass = allClasses[subclasses[i]];
              subclass.$nativeSuperclassTag = tags[0];
            }
          }
          for (i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = false;
          }
        }
      }
    }
    var properties = Object.keys(processedClasses.pending);
    for (var i = 0; i < properties.length; i++)
      finishClass(properties[i]);
  }
  function processClassData(cls, descriptor, processedClasses) {
    var newDesc = {};
    var previousProperty;
    var properties = Object.keys(descriptor);
    for (var i = 0; i < properties.length; i++) {
      var property = properties[i];
      var firstChar = property.substring(0, 1);
      if (property === "static")
        processStatics(init.statics[cls] = descriptor[property], processedClasses);
      else if (firstChar === "+") {
        mangledNames[previousProperty] = property.substring(1);
        var flag = descriptor[property];
        if (flag > 0)
          descriptor[previousProperty].$reflectable = flag;
      } else if (firstChar === "*") {
        newDesc[previousProperty].$defaultValues = descriptor[property];
        var optionalMethods = newDesc.$methodsWithOptionalArguments;
        if (!optionalMethods)
          newDesc.$methodsWithOptionalArguments = optionalMethods = {};
        optionalMethods[property] = previousProperty;
      } else {
        var elem = descriptor[property];
        if (property !== "^" && elem != null && elem.constructor === Array && property !== "<>")
          addStubs(newDesc, elem, property, false, descriptor, []);
        else
          newDesc[previousProperty = property] = elem;
      }
    }
    var classData = newDesc["^"], split, supr, fields = classData;
    var s = fields.split(";");
    fields = s[1] == "" ? [] : s[1].split(",");
    supr = s[0];
    split = supr.split(":");
    if (split.length == 2) {
      supr = split[0];
      var functionSignature = split[1];
      if (functionSignature)
        newDesc.$signature = function(s) {
          return function() {
            return init.metadata[s];
          };
        }(functionSignature);
    }
    if (supr)
      processedClasses.pending[cls] = supr;
    processedClasses.combinedConstructorFunction += defineClass(cls, fields);
    processedClasses.constructorsList.push(cls);
    processedClasses.collected[cls] = [globalObject, newDesc];
    classes.push(cls);
  }
  function processStatics(descriptor, processedClasses) {
    var properties = Object.keys(descriptor);
    for (var i = 0; i < properties.length; i++) {
      var property = properties[i];
      if (property === "^")
        continue;
      var element = descriptor[property];
      var firstChar = property.substring(0, 1);
      var previousProperty;
      if (firstChar === "+") {
        mangledGlobalNames[previousProperty] = property.substring(1);
        var flag = descriptor[property];
        if (flag > 0)
          descriptor[previousProperty].$reflectable = flag;
        if (element && element.length)
          init.typeInformation[previousProperty] = element;
      } else if (firstChar === "*") {
        globalObject[previousProperty].$defaultValues = element;
        var optionalMethods = descriptor.$methodsWithOptionalArguments;
        if (!optionalMethods)
          descriptor.$methodsWithOptionalArguments = optionalMethods = {};
        optionalMethods[property] = previousProperty;
      } else if (typeof element === "function") {
        globalObject[previousProperty = property] = element;
        functions.push(property);
        init.globalFunctions[property] = element;
      } else if (element.constructor === Array)
        addStubs(globalObject, element, property, true, descriptor, functions);
      else {
        previousProperty = property;
        processClassData(property, element, processedClasses);
      }
    }
  }
  function addStubs(descriptor, array, name, isStatic, originalDescriptor, functions) {
    var index = 0, alias = array[index], f;
    if (typeof alias == "string")
      f = array[++index];
    else {
      f = alias;
      alias = name;
    }
    var funcs = [originalDescriptor[name] = descriptor[name] = descriptor[alias] = f];
    f.$stubName = name;
    functions.push(name);
    for (; index < array.length; index += 2) {
      f = array[index + 1];
      if (typeof f != "function")
        break;
      f.$stubName = array[index + 2];
      funcs.push(f);
      if (f.$stubName) {
        originalDescriptor[f.$stubName] = descriptor[f.$stubName] = f;
        functions.push(f.$stubName);
      }
    }
    for (var i = 0; i < funcs.length; index++, i++)
      funcs[i].$callName = array[index + 1];
    var getterStubName = array[++index];
    array = array.slice(++index);
    var requiredParameterInfo = array[0];
    var requiredParameterCount = requiredParameterInfo >> 1;
    var isAccessor = (requiredParameterInfo & 1) === 1;
    var isSetter = requiredParameterInfo === 3;
    var isGetter = requiredParameterInfo === 1;
    var optionalParameterInfo = array[1];
    var optionalParameterCount = optionalParameterInfo >> 1;
    var optionalParametersAreNamed = (optionalParameterInfo & 1) === 1;
    var isIntercepted = requiredParameterCount + optionalParameterCount != funcs[0].length;
    var functionTypeIndex = array[2];
    var unmangledNameIndex = 2 * optionalParameterCount + requiredParameterCount + 3;
    if (getterStubName) {
      f = tearOff(funcs, array, isStatic, name, isIntercepted);
      descriptor[name].$getter = f;
      f.$getterStub = true;
      if (isStatic)
        init.globalFunctions[name] = f;
      originalDescriptor[getterStubName] = descriptor[getterStubName] = f;
      funcs.push(f);
      if (getterStubName)
        functions.push(getterStubName);
      f.$stubName = getterStubName;
      f.$callName = null;
    }
  }
  function tearOffGetter(funcs, reflectionInfo, name, isIntercepted) {
    return isIntercepted ? new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(x) {" + "if (c === null) c = H.closureFromTearOff(" + "this, funcs, reflectionInfo, false, [x], name);" + "return new c(this, funcs[0], x, name);" + "}")(funcs, reflectionInfo, name, H, null) : new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = H.closureFromTearOff(" + "this, funcs, reflectionInfo, false, [], name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, reflectionInfo, name, H, null);
  }
  function tearOff(funcs, reflectionInfo, isStatic, name, isIntercepted) {
    var cache;
    return isStatic ? function() {
      if (cache === void 0)
        cache = H.closureFromTearOff(this, funcs, reflectionInfo, true, [], name).prototype;
      return cache;
    } : tearOffGetter(funcs, reflectionInfo, name, isIntercepted);
  }
  var functionCounter = 0;
  if (!init.libraries)
    init.libraries = [];
  if (!init.mangledNames)
    init.mangledNames = map();
  if (!init.mangledGlobalNames)
    init.mangledGlobalNames = map();
  if (!init.statics)
    init.statics = map();
  if (!init.typeInformation)
    init.typeInformation = map();
  if (!init.globalFunctions)
    init.globalFunctions = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  var processedClasses = Object.create(null);
  processedClasses.collected = Object.create(null);
  processedClasses.pending = Object.create(null);
  processedClasses.constructorsList = [];
  processedClasses.combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor["^"];
    if (fields instanceof Array)
      fields = fields[0];
    var classes = [];
    var functions = [];
    processStatics(descriptor, processedClasses);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot, globalObject]);
  }
  finishClasses(processedClasses);
}
var dart = [
["", "1gam1.dart", , N, {
  "^": "",
  addButton: function(text, menu, button_class) {
    var e, t1;
    e = document.createElement("a", null);
    e.textContent = text;
    t1 = J.getInterceptor$x(e);
    t1.get$classes(e).add$1(0, button_class);
    t1.get$classes(e).add$1(0, "btn");
    menu.appendChild(e);
    return e;
  },
  main: [function() {
    var game_manager, main_window, level_window, options_window, ingame_window, t1, options_button, level_menu;
    game_manager = new N.GameManager(null, null, null, null, null, null, null, null, null, null);
    game_manager.GameManager$0();
    main_window = document.querySelector("#main-window");
    level_window = document.querySelector("#level-modal");
    options_window = document.querySelector("#options-modal");
    ingame_window = document.querySelector("#ingame-modal");
    t1 = J.get$onClick$x(N.addButton("Start", main_window, "menu-button"));
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new N.main_closure(level_window)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    options_button = N.addButton("Options", main_window, "menu-button");
    t1 = J.get$onClick$x(document.querySelector("#pause-button"));
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new N.main_closure0(ingame_window)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    t1 = J.get$onClick$x(options_button);
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new N.main_closure1(options_window)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    t1 = J.get$onClick$x(options_window.querySelector("#Close-options"));
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new N.main_closure2(options_window)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    t1 = J.get$onClick$x(ingame_window.querySelector("#Close-ingame"));
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new N.main_closure3(ingame_window)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    t1 = J.get$onClick$x(N.addButton("Restart", ingame_window, "menu-button"));
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new N.main_closure4(game_manager, ingame_window)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    t1 = J.get$onClick$x(N.addButton("Main menu", ingame_window, "menu-button"));
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new N.main_closure5(game_manager, ingame_window)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    t1 = J.get$onClick$x(level_window.querySelector("#Close"));
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new N.main_closure6(level_window)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    level_menu = level_window.querySelector("#level-menu");
    t1 = J.get$onClick$x(N.addButton("01", level_menu, "grid-button"));
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new N.main_closure7(game_manager, level_window)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    t1 = J.get$onClick$x(N.addButton("02", level_menu, "grid-button"));
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new N.main_closure8(game_manager, level_window)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    t1 = J.get$onClick$x(N.addButton("03", level_menu, "grid-button"));
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new N.main_closure9(game_manager, level_window)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
  }, "call$0", "main$closure", 0, 0, 4],
  GameManager: {
    "^": "Object;canvas_,div_game_area_,div_analog_controller_,input_,game_loop_,dialogue_,camera_,renderer_,current_map_,current_sprites_",
    startGame$2: function(map, sprites) {
      var drawable_factory, t1, draw_state;
      this.current_map_ = map;
      this.current_sprites_ = sprites;
      this.renderer_.init$0();
      drawable_factory = S.DrawableFactory$(this.renderer_);
      t1 = this.renderer_;
      draw_state = new N.GameState(t1, null, drawable_factory, P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, V.GameArea), H.setRuntimeTypeInfo([], [V.GameArea]), H.setRuntimeTypeInfo([], [V.GameArea]));
      draw_state.GameState$2(t1, drawable_factory);
      draw_state.loadArea$4("first", map, sprites, new R.SpriteLoader(drawable_factory, this.input_, this.camera_, this.dialogue_, P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, S.BaseGeometry))).then$1(new N.GameManager_startGame_closure(this, draw_state));
      this.game_loop_.start$0(0);
    },
    GameManager$0: function() {
      var t1, t2, t3, t4, t5;
      this.canvas_ = document.querySelector("#game-element");
      this.div_game_area_ = document.querySelector("#game-area");
      this.div_analog_controller_ = document.querySelector("#analog_control_base");
      t1 = this.canvas_;
      t2 = new G.GameLoopHtml(t1, 0, false, false, null, 0, false, 0, 0.03, 0, 0, 0, 0.05, true, null, null, null, null, H.setRuntimeTypeInfo(new P.Point(0, 0), [null]), null, null, H.setRuntimeTypeInfo([], [G._GameLoopTouchEvent]), H.setRuntimeTypeInfo([], [W.KeyboardEvent]), H.setRuntimeTypeInfo([], [W.MouseEvent]), null, null, null, null, null, null, null, null, 0.015, 0.03, H.setRuntimeTypeInfo([], [B.GameLoopTimer]), null, null);
      t2.GameLoopHtml$1(t1);
      this.game_loop_ = t2;
      t2._pointerLock.lockOnClick = false;
      t1 = this.canvas_;
      t3 = this.div_analog_controller_;
      t4 = t2._keyboard;
      t2 = t2._mouse;
      t5 = new K.CombinedInput(null, null);
      t5.touch_input_ = K.TouchInput$(t1, t3);
      t5.key_input_ = new K.KeyboardInput(t4, t2);
      this.input_ = t5;
      this.dialogue_ = O.DialogueBox$(document.querySelector("#dialogue"));
      t5 = new Float32Array(H._checkLength(16));
      t2 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t2.setValues$3(0, 0, 0);
      t4 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t4.setValues$3(0, 10, -10);
      t4 = new T.Camera(new T.Matrix4(t5), t2, t4);
      t4.Camera$0();
      this.camera_ = t4;
      this.renderer_ = M.Renderer$(this.div_game_area_, this.canvas_, t4);
    }
  },
  GameManager_startGame_closure: {
    "^": "Closure:0;this_0,draw_state_1",
    call$1: function(ret) {
      var t1, t2;
      t1 = this.this_0.game_loop_;
      t2 = this.draw_state_1;
      t1._game_loop_html$_state = t2;
      t1.onUpdate = t2.get$onUpdate();
      t1.onFullscreenChange = t2.get$onFullScreenChange();
      t1.onKeyDown = t2.get$onKeyDown(t2);
      t1.onPointerLockChange = t2.get$onPointerLockChange(t2);
      t1.onRender = t2.get$onRender();
      t1.onResize = t2.get$onResize(t2);
      t1.onTouchEnd = t2.get$onTouchEnd(t2);
      t1.onTouchStart = t2.get$onTouchStart(t2);
      t2.setVisible$2("first", true);
      J.set$display$x(document.querySelector("#pause-button").style, "block");
    }
  },
  main_closure: {
    "^": "Closure:1;level_window_0",
    call$1: function($event) {
      return J.get$classes$x(this.level_window_0).add$1(0, "show");
    }
  },
  main_closure0: {
    "^": "Closure:1;ingame_window_1",
    call$1: function($event) {
      return J.get$classes$x(this.ingame_window_1).add$1(0, "show");
    }
  },
  main_closure1: {
    "^": "Closure:1;options_window_2",
    call$1: function($event) {
      return J.get$classes$x(this.options_window_2).add$1(0, "show");
    }
  },
  main_closure2: {
    "^": "Closure:1;options_window_3",
    call$1: function($event) {
      return J.get$classes$x(this.options_window_3).remove$1(0, "show");
    }
  },
  main_closure3: {
    "^": "Closure:1;ingame_window_4",
    call$1: function($event) {
      return J.get$classes$x(this.ingame_window_4).remove$1(0, "show");
    }
  },
  main_closure4: {
    "^": "Closure:1;game_manager_5,ingame_window_6",
    call$1: function($event) {
      var t1 = this.game_manager_5;
      t1.renderer_.stop$0(0);
      t1.game_loop_.stop$0(0);
      t1.startGame$2(t1.current_map_, t1.current_sprites_);
      J.get$classes$x(this.ingame_window_6).remove$1(0, "show");
    }
  },
  main_closure5: {
    "^": "Closure:1;game_manager_7,ingame_window_8",
    call$1: function($event) {
      var t1 = this.game_manager_7;
      t1.renderer_.stop$0(0);
      t1.game_loop_.stop$0(0);
      J.get$classes$x(this.ingame_window_8).remove$1(0, "show");
      J.set$display$x(document.querySelector("#pause-button").style, "none");
    }
  },
  main_closure6: {
    "^": "Closure:1;level_window_9",
    call$1: function($event) {
      return J.get$classes$x(this.level_window_9).remove$1(0, "show");
    }
  },
  main_closure7: {
    "^": "Closure:1;game_manager_10,level_window_11",
    call$1: function($event) {
      this.game_manager_10.startGame$2("images/sheep_map.json", "images/map_units_sheep.json");
      J.get$classes$x(this.level_window_11).remove$1(0, "show");
    }
  },
  main_closure8: {
    "^": "Closure:1;game_manager_12,level_window_13",
    call$1: function($event) {
      this.game_manager_12.startGame$2("images/sheep_2.json", "images/map_units_sheep_2.json");
      J.get$classes$x(this.level_window_13).remove$1(0, "show");
    }
  },
  main_closure9: {
    "^": "Closure:1;game_manager_14,level_window_15",
    call$1: function($event) {
      this.game_manager_14.startGame$2("images/sheep_3.json", "images/map_units_sheep_3.json");
      J.get$classes$x(this.level_window_15).remove$1(0, "show");
    }
  }
},
1],
["Drawable", "drawable.dart", , Q, {
  "^": "",
  Drawable: {
    "^": "Object;"
  },
  BaseDrawableBuffers: {
    "^": "Object;pos_buffer_,ind_buffer_,nor_buffer_,color_buffer_,tex_buffer_,tex_,vertices_<"
  },
  BaseDrawable: {
    "^": "Object;buffers_,current_buffer_,position_<,rotation_,scale_,size_,shader_<,pick_shader_,transparent_",
    baseDraw$5: function(gl_, world_view, perspective, dimensions, cur_shader) {
      var t1, m_modelview_, t2, s, _x, _y, _z, _w, xs, ys, zs, wx, wy, wz, xx, xy, xz, yy, yz, zz, sx, t3, sw, sx0, sy, sz, basic_property, lighting_property, m_normal, temp;
      t1 = new Float32Array(H._checkLength(16));
      m_modelview_ = new T.Matrix4(t1);
      m_modelview_.setIdentity$0();
      m_modelview_.translate$1(0, this.position_);
      t2 = this.rotation_;
      s = 2 / t2.get$length2();
      t2 = t2.storage;
      _x = t2[0];
      _y = t2[1];
      _z = t2[2];
      _w = t2[3];
      xs = _x * s;
      ys = _y * s;
      zs = _z * s;
      wx = _w * xs;
      wy = _w * ys;
      wz = _w * zs;
      xx = _x * xs;
      xy = _x * ys;
      xz = _x * zs;
      yy = _y * ys;
      yz = _y * zs;
      zz = _z * zs;
      t2 = new Float32Array(H._checkLength(9));
      new T.Matrix3(t2).setValues$9(1 - (yy + zz), xy + wz, xz - wy, xy - wz, 1 - (xx + zz), yz + wx, xz + wy, yz - wx, 1 - (xx + yy));
      t1[0] = t2[0];
      t1[1] = t2[1];
      t1[2] = t2[2];
      t1[4] = t2[3];
      t1[5] = t2[4];
      t1[6] = t2[5];
      t1[8] = t2[6];
      t1[9] = t2[7];
      t1[10] = t2[8];
      sx = this.scale_;
      t2 = J.getInterceptor(sx);
      t3 = !!t2.$isVector4;
      sw = t3 ? sx.get$w() : 1;
      if (!!t2.$isVector3 || t3) {
        sx0 = t2.get$x(sx);
        sy = t2.get$y(sx);
        sz = t2.get$z(sx);
        sx = sx0;
      } else {
        sz = sx;
        sy = sz;
      }
      t1[0] = t1[0] * sx;
      t1[1] = t1[1] * sx;
      t1[2] = t1[2] * sx;
      t1[3] = t1[3] * sx;
      t1[4] = t1[4] * sy;
      t1[5] = t1[5] * sy;
      t1[6] = t1[6] * sy;
      t1[7] = t1[7] * sy;
      t1[8] = t1[8] * sz;
      t1[9] = t1[9] * sz;
      t1[10] = t1[10] * sz;
      t1[11] = t1[11] * sz;
      t1[12] = t1[12] * sw;
      t1[13] = t1[13] * sw;
      t1[14] = t1[14] * sw;
      t1[15] = t1[15] * sw;
      basic_property = cur_shader.getShaderProperty$1($.BasicShaderProperties_propName);
      J.bindBuffer$2$x(gl_, 34962, this.current_buffer_.pos_buffer_);
      gl_.vertexAttribPointer(basic_property.get$a_vertex_pos_(), dimensions, 5126, false, 0, 0);
      t1 = this.current_buffer_.color_buffer_;
      if (t1 != null && basic_property.a_vertex_color_ !== -1) {
        gl_.bindBuffer(34962, t1);
        gl_.vertexAttribPointer(basic_property.a_vertex_color_, dimensions, 5126, false, 0, 0);
      }
      t1 = this.current_buffer_;
      if (t1.tex_buffer_ != null && basic_property.a_vertex_coord_ !== -1) {
        t1.tex_.makeCurrent$0();
        gl_.bindBuffer(34962, this.current_buffer_.tex_buffer_);
        gl_.vertexAttribPointer(basic_property.a_vertex_coord_, 2, 5126, false, 0, 0);
      }
      t1 = this.current_buffer_.nor_buffer_;
      if (t1 != null && basic_property.a_vertex_normal_ !== -1) {
        gl_.bindBuffer(34962, t1);
        gl_.vertexAttribPointer(basic_property.a_vertex_normal_, dimensions, 5126, false, 0, 0);
      }
      gl_.bindBuffer(34963, this.current_buffer_.ind_buffer_);
      t1 = basic_property.perspective_;
      t1.updated_ = false;
      perspective.copyIntoArray$1(t1.data_);
      t1 = basic_property.modelview_;
      t1.updated_ = false;
      m_modelview_.copyIntoArray$1(t1.data_);
      t1 = basic_property.worldview_;
      t1.updated_ = false;
      world_view.copyIntoArray$1(t1.data_);
      lighting_property = cur_shader.getShaderProperty$1($.LightingShaderProperty_propName);
      if (lighting_property != null) {
        t1 = new Float32Array(H._checkLength(9));
        m_normal = new T.Matrix3(t1);
        m_normal.setIdentity$0();
        m_normal.setRow$2(0, m_modelview_.getRow$1(0).get$xyz());
        m_normal.setRow$2(1, m_modelview_.getRow$1(1).get$xyz());
        m_normal.setRow$2(2, m_modelview_.getRow$1(2).get$xyz());
        m_normal.invert$0();
        temp = t1[3];
        t1[3] = t1[1];
        t1[1] = temp;
        temp = t1[6];
        t1[6] = t1[2];
        t1[2] = temp;
        temp = t1[7];
        t1[7] = t1[5];
        t1[5] = temp;
        lighting_property.setNormalMatrix$1(m_normal);
      }
      cur_shader.makeCurrent$0();
      gl_.drawElements(4, this.current_buffer_.vertices_, 5123, 0);
    },
    draw$4: ["super$BaseDrawable$draw$4", function(gl_, world_view, perspective, dimensions) {
      this.baseDraw$5(gl_, world_view, perspective, dimensions, this.get$shader_());
    }],
    isTransparent$0: function() {
      return this.transparent_;
    },
    getPosition$0: function() {
      return this.position_;
    }
  },
  AnimatedBaseDrawable: {
    "^": "BaseDrawable;",
    draw$4: function(gl_, world_view, perspective, dimensions) {
      var t1 = this.current_sequence_;
      if (t1 != null)
        this.activateModel$1(J.$index$asx(t1.get$images(), this.current_in_sequence_));
      else
        this.activateModel$1(this.idle_image_);
      this.super$BaseDrawable$draw$4(gl_, world_view, perspective, dimensions);
    },
    SetSequence$2: function(seq_name, initial) {
      if (this.current_sequence_name_ !== seq_name) {
        this.current_sequence_name_ = seq_name;
        this.current_sequence_ = this.sequences_.$index(0, seq_name);
        this.current_in_sequence_ = initial;
        this.UpdateSequenceCounter$0();
      }
    },
    SetSequence$1: function(seq_name) {
      return this.SetSequence$2(seq_name, null);
    },
    UpdateSequenceCounter$0: function() {
      var t1, t2;
      t1 = this.current_sequence_;
      if (t1 != null) {
        if (this.update_timer == null)
          this.update_timer = P.Future_Future$delayed(P.Duration$(0, 0, 0, J.floor$0$n(J.$mul$ns(t1.get$time(), 1000)), 0, 0), this.get$finishUpdate(), null);
        t1 = this.current_in_sequence_;
        if (t1 == null)
          this.current_in_sequence_ = 0;
        else {
          if (typeof t1 !== "number")
            return t1.$add();
          ++t1;
          this.current_in_sequence_ = t1;
          t2 = J.get$length$asx(this.current_sequence_.get$images());
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (t1 >= t2) {
            t1 = this.current_sequence_;
            if (t1 != null) {
              this.idle_image_ = J.get$first$ax(t1.get$images());
              this.current_sequence_ = null;
              this.current_sequence_name_ = null;
            }
          }
        }
      } else
        this.update_timer = null;
    },
    finishUpdate$0: [function() {
      this.update_timer = null;
      this.UpdateSequenceCounter$0();
    }, "call$0", "get$finishUpdate", 0, 0, 2],
    activateModel$1: function(i) {
    }
  },
  AnimatedGeometry: {
    "^": "AnimatedBaseDrawable;sequences_,current_sequence_,current_sequence_name_,current_in_sequence_,update_timer,idle_image_,buffers_,current_buffer_,position_,rotation_,scale_,size_,shader_,pick_shader_,transparent_",
    setModel$1: function(i) {
      this.idle_image_ = i;
    },
    activateModel$1: function(i) {
      var t1 = this.buffers_;
      if (i >>> 0 !== i || i >= t1.length)
        return H.ioore(t1, i);
      this.current_buffer_ = t1[i];
    },
    AnimatedGeometry$1: function(buffers) {
      this.buffers_ = buffers;
      this.idle_image_ = 1;
    }
  },
  AnimatedSprite: {
    "^": "AnimatedBaseDrawable;num_images_side_,shader_:AnimatedSprite_shader_<,sequences_,current_sequence_,current_sequence_name_,current_in_sequence_,update_timer,idle_image_,buffers_,current_buffer_,position_,rotation_,scale_,size_,shader_,pick_shader_,transparent_",
    activateModel$1: function(i) {
      var t1, y, t2, t3, atlas_prop;
      t1 = J.getInterceptor$n(i);
      y = J.floor$0$n(t1.$div(i, this.num_images_side_));
      t2 = this.num_images_side_;
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = J.$div$n(t1.$sub(i, y * t2), this.num_images_side_);
      t1 = this.num_images_side_;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t3 = new Float32Array(H._checkLength(2));
      t3[0] = t2;
      t3[1] = y / t1;
      t1 = this.num_images_side_;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t1 = 1 / t1;
      t2 = new Float32Array(H._checkLength(2));
      t2[0] = t1;
      t2[1] = t1;
      atlas_prop = this.AnimatedSprite_shader_.getShaderProperty$1($.AtlasTextureProperty_propName);
      if (atlas_prop != null) {
        atlas_prop.setOffset$1(new T.Vector2(t3));
        t1 = atlas_prop.size_;
        t1.updated_ = false;
        t1.data_ = new T.Vector2(t2);
      }
    }
  }
}],
["Level_importer", "level_importer.dart", , V, {
  "^": "",
  Tileset: {
    "^": "Object;first_gid<,root_size,path,name,properties<"
  },
  LevelImporter: {
    "^": "AsyncImporter;",
    readTilesets$1: function(tilesets) {
      var parsed_tilesets, t1, tileset, current, t2, t3;
      parsed_tilesets = H.setRuntimeTypeInfo([], [V.Tileset]);
      for (t1 = J.get$iterator$ax(tilesets); t1.moveNext$0();) {
        tileset = t1.get$current();
        current = new V.Tileset(null, null, null, null, null);
        t2 = J.getInterceptor$asx(tileset);
        current.first_gid = t2.$index(tileset, "firstgid");
        current.path = t2.$index(tileset, "image");
        current.name = t2.$index(tileset, "name");
        t3 = J.floor$0$n(J.$div$n(t2.$index(tileset, "imageheight"), t2.$index(tileset, "tileheight")));
        current.root_size = t3;
        current.root_size = t3 * t3;
        current.properties = t2.$index(tileset, "tileproperties");
        parsed_tilesets.push(current);
      }
      return parsed_tilesets;
    },
    getTileTileset$2: function(tilesets, num) {
      var t1, ret_tileset, tileset;
      t1 = tilesets.length;
      if (0 >= t1)
        return H.ioore(tilesets, 0);
      ret_tileset = tilesets[0];
      for (t1 = new J.ArrayIterator(tilesets, t1, 0, null); t1.moveNext$0();) {
        tileset = t1.__interceptors$_current;
        if (J.$le$n(tileset.get$first_gid(), num) && J.$gt$n(tileset.first_gid, ret_tileset.first_gid))
          ret_tileset = tileset;
      }
      return ret_tileset;
    },
    getTileset$2: function(tilesets, layer) {
      var first_nonzero, t1, num;
      t1 = J.get$iterator$ax(layer.$index(0, "data"));
      while (true) {
        if (!t1.moveNext$0()) {
          first_nonzero = 0;
          break;
        }
        num = t1.get$current();
        if (!J.$eq(num, 0)) {
          first_nonzero = num;
          break;
        }
      }
      return this.getTileTileset$2(tilesets, first_nonzero);
    },
    readModelDescriptions$1: function(tilesets) {
      var ret, t1, current_tileset, i, t2, $name, toAdd;
      ret = H.setRuntimeTypeInfo([], [K.ModelDescription]);
      for (t1 = new J.ArrayIterator(tilesets, tilesets.length, 0, null); t1.moveNext$0();) {
        current_tileset = t1.__interceptors$_current;
        if (current_tileset.get$properties() != null) {
          i = 0;
          while (true) {
            t2 = J.get$length$asx(current_tileset.properties);
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (!(i < t2))
              break;
            if (current_tileset.properties.containsKey$1("" + i) === true && J.$index$asx(current_tileset.properties, "" + i).containsKey$1("path") === true) {
              $name = J.$index$asx(J.$index$asx(current_tileset.properties, "" + i), "path");
              if (J.endsWith$1$s($name, ".model")) {
                toAdd = new K.ModelDescription(null, 0, 1);
                toAdd.path_ = $name;
                if (J.$index$asx(current_tileset.properties, "" + i).containsKey$1("height") === true)
                  toAdd.height_ = H.Primitives_parseDouble(J.$index$asx(J.$index$asx(current_tileset.properties, "" + i), "height"), null);
                if (J.$index$asx(current_tileset.properties, "" + i).containsKey$1("rotation") === true)
                  toAdd.rotation_ = H.Primitives_parseInt(J.$index$asx(J.$index$asx(current_tileset.properties, "" + i), "rotation"), null, null);
                ret.push(toAdd);
              }
            }
            ++i;
          }
        }
      }
      return ret;
    },
    readModelData$4: function(model_descriptions, layer, current_tileset, size) {
      var model_data, data, t1, t2, i, j, texture, model, t3, t4;
      model_data = [];
      model_data.$builtinTypeInfo = [K.ModelInstance];
      if (layer.containsKey$1("data") === true) {
        data = layer.$index(0, "data");
        for (t1 = size.storage, t2 = J.getInterceptor$asx(data), i = 0; i < t1[0]; ++i)
          for (j = 0; j < t1[1]; ++j) {
            texture = J.$sub$n(t2.$index(data, C.JSNumber_methods.toInt$0(Math.floor(i + j * t1[0]))), current_tileset.first_gid);
            if (J.$ge$n(texture, 0)) {
              model = new K.ModelInstance(null, null);
              t3 = t1[1];
              t4 = new Float32Array(2);
              t4[0] = i;
              t4[1] = t3 - j;
              model.position_ = new T.Vector2(t4);
              if (texture >>> 0 !== texture || texture >= model_descriptions.length)
                return H.ioore(model_descriptions, texture);
              model.description_ = model_descriptions[texture];
              model_data.push(model);
            }
          }
      }
      return model_data;
    },
    readBehaviourData$4: function(layer, current_tileset, size, model_descriptions) {
      var ret, data, behaviour_names, model_paths, i, t1, new_name, model_path, t2, j, id, desc, t3, t4;
      ret = [];
      ret.$builtinTypeInfo = [K.BehaviourDescription];
      if (layer.containsKey$1("data") === true) {
        data = layer.$index(0, "data");
        behaviour_names = [];
        behaviour_names.$builtinTypeInfo = [P.String];
        model_paths = [];
        model_paths.$builtinTypeInfo = [P.String];
        if (J.$eq(current_tileset.name, "behaviours_layer")) {
          i = 0;
          while (true) {
            t1 = J.get$length$asx(current_tileset.properties);
            if (typeof t1 !== "number")
              return H.iae(t1);
            if (!(i < t1))
              break;
            new_name = J.$index$asx(J.$index$asx(current_tileset.properties, "" + i), "type");
            model_path = J.$index$asx(J.$index$asx(current_tileset.properties, "" + i), "path");
            behaviour_names.push(new_name);
            model_paths.push(model_path);
            ++i;
          }
          for (t1 = size.storage, t2 = J.getInterceptor$asx(data), i = 0; i < t1[0]; ++i)
            for (j = 0; j < t1[1]; ++j) {
              id = J.$sub$n(t2.$index(data, C.JSNumber_methods.toInt$0(Math.floor(i + j * t1[0]))), current_tileset.first_gid);
              if (J.$ge$n(id, 0)) {
                desc = new K.BehaviourDescription(null, null, null, null, null);
                t3 = t1[1];
                t4 = new Float32Array(2);
                t4[0] = i;
                t4[1] = t3 - j;
                desc.position_ = new T.Vector2(t4);
                if (id >>> 0 !== id || id >= model_paths.length)
                  return H.ioore(model_paths, id);
                desc.model_path_ = model_paths[id];
                if (id >= behaviour_names.length)
                  return H.ioore(behaviour_names, id);
                desc.behaviour_type_ = behaviour_names[id];
                desc.properties_ = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
                ret.push(desc);
              }
            }
        }
      }
      return ret;
    },
    readHeightData$3: function(layers, parsed_tilesets, size) {
      var heights, t1, t2, layer, data, current_tileset, t3, i, t4, j, height;
      heights = H.setRuntimeTypeInfo([], [[P.List, P.$int]]);
      for (t1 = J.get$iterator$ax(layers), t2 = size.storage; t1.moveNext$0();) {
        layer = t1.get$current();
        if (layer.containsKey$1("data") === true) {
          data = layer.$index(0, "data");
          current_tileset = this.getTileset$2(parsed_tilesets, layer);
          if (J.$eq(current_tileset.name, "heights_layer"))
            for (t3 = J.getInterceptor$asx(data), i = 0; i < t2[0]; ++i) {
              t4 = [];
              t4.$builtinTypeInfo = [P.$int];
              heights.push(t4);
              for (j = 0; j < t2[1]; ++j) {
                height = J.$sub$n(t3.$index(data, C.JSNumber_methods.toInt$0(Math.floor(i + j * t2[0]))), current_tileset.first_gid);
                t4 = J.getInterceptor$n(height);
                if (t4.$lt(height, 0))
                  height = 0;
                else if (t4.$gt(height, 11))
                  if (t4.$eq(height, 12))
                    height = -2;
                  else if (t4.$eq(height, 13))
                    height = -3;
                  else if (t4.$eq(height, 14))
                    height = -4;
                  else
                    height = t4.$eq(height, 15) ? -5 : 0;
                if (i >= heights.length)
                  return H.ioore(heights, i);
                J.add$1$ax(heights[i], height);
              }
            }
        }
      }
      if (heights.length === 0)
        for (i = 0; i < t2[0]; ++i) {
          t1 = [];
          t1.$builtinTypeInfo = [P.$int];
          heights.push(t1);
          for (j = 0; j < t2[1]; ++j) {
            if (i >= heights.length)
              return H.ioore(heights, i);
            J.add$1$ax(heights[i], 0);
          }
        }
      return heights;
    },
    processFile$1: function(data) {
      var ret_terrain, jsonData, paths, portals, t1, size, t2, parsed_tilesets, t3, properties, layers, model_descriptions, heights, models, behaviours, layer, current_tileset, textures, t4, i, t5, j, texture, object, $name, points, t6, point, t7, t8, current_portal, gid, tileset, desc, x, y;
      ret_terrain = H.setRuntimeTypeInfo([], [Q.SquareTerrain]);
      jsonData = C.JsonCodec_null_null.decode$1(data);
      paths = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, B.Path);
      portals = H.setRuntimeTypeInfo([], [K.PortalDescription]);
      t1 = new Float32Array(H._checkLength(2));
      size = new T.Vector2(t1);
      t2 = J.getInterceptor$asx(jsonData);
      t1[1] = J.$mul$ns(t2.$index(jsonData, "height"), 1);
      t1[0] = J.$mul$ns(t2.$index(jsonData, "width"), 1);
      parsed_tilesets = this.readTilesets$1(t2.$index(jsonData, "tilesets"));
      t3 = new Float32Array(H._checkLength(3));
      if (jsonData.containsKey$1("properties") === true) {
        properties = t2.$index(jsonData, "properties");
        if (properties.containsKey$1("xoffset") === true)
          t3[0] = H.Primitives_parseDouble(properties.$index(0, "xoffset"), null);
        if (properties.containsKey$1("yoffset") === true)
          t3[1] = H.Primitives_parseDouble(properties.$index(0, "yoffset"), null);
        if (properties.containsKey$1("zoffset") === true)
          t3[2] = H.Primitives_parseDouble(properties.$index(0, "zoffset"), null);
      }
      layers = t2.$index(jsonData, "layers");
      model_descriptions = this.readModelDescriptions$1(parsed_tilesets);
      heights = this.readHeightData$3(layers, parsed_tilesets, size);
      models = H.setRuntimeTypeInfo([], [K.ModelInstance]);
      for (t2 = J.get$iterator$ax(layers), behaviours = null; t2.moveNext$0();) {
        layer = t2.get$current();
        if (layer.containsKey$1("data") === true) {
          data = layer.$index(0, "data");
          current_tileset = this.getTileset$2(parsed_tilesets, layer);
          if (J.$eq(current_tileset.name, "heights_layer"))
            ;
          else if (J.$eq(current_tileset.name, "behaviours_layer"))
            behaviours = this.readBehaviourData$4(layer, current_tileset, size, model_descriptions);
          else if (J.$eq(current_tileset.name, "models_layer"))
            C.JSArray_methods.addAll$1(models, this.readModelData$4(model_descriptions, layer, current_tileset, size));
          else {
            textures = [];
            textures.$builtinTypeInfo = [[P.List, P.$int]];
            for (t4 = J.getInterceptor$asx(data), i = 0; i < t1[0]; ++i) {
              t5 = [];
              t5.$builtinTypeInfo = [P.$int];
              textures.push(t5);
              for (j = 0; j < t1[1]; ++j) {
                texture = J.$sub$n(t4.$index(data, C.JSNumber_methods.toInt$0(Math.floor(i + j * t1[0]))), current_tileset.first_gid);
                if (i >= textures.length)
                  return H.ioore(textures, i);
                textures[i].push(texture);
              }
            }
            t4 = current_tileset.path;
            t5 = current_tileset.root_size;
            [].$builtinTypeInfo = [[P.List, P.$int]];
            [].$builtinTypeInfo = [[P.List, P.$int]];
            ret_terrain.push(new Q.SquareTerrain(heights, textures, size, t4, t5, 5));
          }
        } else if (layer.containsKey$1("objects") === true)
          for (t4 = J.get$iterator$ax(layer.$index(0, "objects")); t4.moveNext$0();) {
            object = t4.get$current();
            if (object.containsKey$1("polyline") === true) {
              $name = object.$index(0, "name");
              t5 = new Float32Array(2);
              t5[0] = J.$mul$ns(object.$index(0, "x"), 1);
              t5[1] = J.$mul$ns(object.$index(0, "y"), 1);
              points = [];
              points.$builtinTypeInfo = [T.Vector2];
              for (t6 = J.get$iterator$ax(object.$index(0, "polyline")); t6.moveNext$0();) {
                point = t6.get$current();
                t7 = new Float32Array(2);
                t8 = J.getInterceptor$asx(point);
                t7[0] = J.floorToDouble$0$n(J.$mul$ns(J.$add$ns(t8.$index(point, "x"), t5[0]), 0.0625));
                t7[1] = t1[1] - J.floorToDouble$0$n(J.$mul$ns(J.$add$ns(t8.$index(point, "y"), t5[1]), 0.0625));
                points.push(new T.Vector2(t7));
              }
              properties = object.$index(0, "properties");
              t5 = J.getInterceptor$asx(properties);
              if (!J.$eq(t5.get$length(properties), 0)) {
                t6 = [];
                t6.$builtinTypeInfo = [T.Vector2];
                t7 = [];
                t7.$builtinTypeInfo = [P.String];
                t8 = [];
                t8.$builtinTypeInfo = [P.String];
                current_portal = new K.PortalDescription(null, t6, t7, t8);
                current_portal.map_name_ = t5.$index(properties, "map");
                if (properties.containsKey$1("hide") === true)
                  t7.push(t5.$index(properties, "hide"));
                if (properties.containsKey$1("show") === true)
                  t8.push(t5.$index(properties, "show"));
                current_portal.points_ = points;
                portals.push(current_portal);
              } else
                paths.$indexSet(0, $name, new B.Path($name, points));
            } else if (object.containsKey$1("gid") === true) {
              gid = object.$index(0, "gid");
              tileset = this.getTileTileset$2(parsed_tilesets, gid);
              gid = J.$sub$n(gid, tileset.first_gid);
              desc = new K.BehaviourDescription(null, null, null, null, null);
              x = J.$div$n(object.$index(0, "x"), object.$index(0, "width"));
              y = J.$sub$n(J.$div$n(object.$index(0, "y"), object.$index(0, "height")), 0.5);
              t5 = J.round$0$n(x);
              t6 = t1[1];
              t7 = J.round$0$n(y);
              t8 = new Float32Array(2);
              t8[0] = t5;
              t8[1] = t6 - (t7 - 1);
              desc.position_ = new T.Vector2(t8);
              desc.model_path_ = J.$index$asx(J.$index$asx(tileset.properties, H.S(gid)), "path");
              desc.behaviour_type_ = J.$index$asx(J.$index$asx(tileset.properties, H.S(gid)), "type");
              desc.properties_ = object.$index(0, "properties");
              desc.name_ = object.$index(0, "name");
              behaviours.push(desc);
            }
          }
      }
      H.setRuntimeTypeInfo([], [K.ModelInstance]);
      H.setRuntimeTypeInfo([], [K.ModelDescription]);
      P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, B.Path);
      return new K.LevelData(ret_terrain, models, model_descriptions, paths, heights, new T.Vector3(t3), behaviours, portals, H.setRuntimeTypeInfo([], [P.String]), P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, S.BaseGeometry));
    }
  }
}],
["Renderer", "renderer.dart", , M, {
  "^": "",
  Renderer: {
    "^": "Object;canvas_,view_,gl_,shader_program_,dimensions_,view_width_,view_height_,m_perspective_,m_modelview_,m_worldview_,color_shader_,texture_shader_,light_shader_,atlas_shader_,last_captured_colour_map_,fb_texture_,render_buffer_,picking_buffer_,mouse_pos_,camera_,on_resize_listener_,on_orientation_listener_",
    init$0: function() {
      this.resetListeners$0();
      this.setSize$0();
      var t1 = C.EventStreamProvider_resize.forTarget$1(window);
      t1 = H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new M.Renderer_init_closure(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)]);
      t1._tryResume$0();
      this.on_resize_listener_ = t1;
      t1 = C.EventStreamProvider_deviceorientation.forTarget$1(window);
      t1 = H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new M.Renderer_init_closure0(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)]);
      t1._tryResume$0();
      this.on_orientation_listener_ = t1;
      J.clearColor$4$x(this.gl_, 1, 1, 1, 1);
      J.enable$1$x(this.gl_, 2929);
      J.blendFunc$2$x(this.gl_, 770, 771);
      J.enable$1$x(this.gl_, 3042);
      t1 = J.createFramebuffer$0$x(this.gl_);
      this.picking_buffer_ = t1;
      J.bindFramebuffer$2$x(this.gl_, 36160, t1);
      t1 = J.createTexture$0$x(this.gl_);
      this.fb_texture_ = t1;
      J.bindTexture$2$x(this.gl_, 3553, t1);
      J.texParameteri$3$x(this.gl_, 3553, 10240, 9728);
      J.texParameteri$3$x(this.gl_, 3553, 10241, 9728);
      this.render_buffer_ = J.createRenderbuffer$0$x(this.gl_);
      this.updateFrameBufferSize$0();
    },
    resetListeners$0: function() {
      var t1 = this.on_resize_listener_;
      if (t1 != null)
        t1.cancel$0();
      t1 = this.on_orientation_listener_;
      if (t1 != null)
        t1.cancel$0();
    },
    stop$0: function(_) {
      var t1 = this.view_;
      J.set$height$x(t1.style, "0px");
      J.set$width$x(t1.style, "0px");
      this.resetListeners$0();
    },
    setSize$0: function() {
      var new_height, new_width, t1, t2;
      new_height = window.innerHeight;
      new_width = window.innerWidth;
      t1 = this.view_;
      J.set$height$x(t1.style, J.toString$0(new_height) + "px");
      J.set$width$x(t1.style, J.toString$0(new_width) + "px");
      J.set$height$x(this.canvas_, new_height);
      J.set$width$x(this.canvas_, new_width);
      this.view_width_ = new_width;
      this.view_height_ = new_height;
      t2 = t1.style;
      if (typeof new_height !== "number")
        return new_height.$negate();
      J.set$marginTop$x(t2, C.JSDouble_methods.toString$0(-new_height / 2) + "px");
      t1 = t1.style;
      if (typeof new_width !== "number")
        return new_width.$negate();
      J.set$marginLeft$x(t1, C.JSDouble_methods.toString$0(-new_width / 2) + "px");
    },
    updateFrameBufferSize$0: function() {
      var t1, t2;
      t1 = this.view_width_;
      t2 = this.view_height_;
      if (typeof t1 !== "number")
        return t1.$mul();
      if (typeof t2 !== "number")
        return H.iae(t2);
      this.last_captured_colour_map_ = new Uint8Array(H._checkLength(t1 * t2 * 4));
      J.bindTexture$2$x(this.gl_, 3553, this.fb_texture_);
      J.texImage2DTyped$9$x(this.gl_, 3553, 0, 6408, J.get$width$x(this.canvas_), J.get$height$x(this.canvas_), 0, 6408, 5121, this.last_captured_colour_map_);
      J.bindRenderbuffer$2$x(this.gl_, 36161, this.render_buffer_);
      J.renderbufferStorage$4$x(this.gl_, 36161, 33189, J.get$width$x(this.canvas_), J.get$height$x(this.canvas_));
      J.framebufferTexture2D$5$x(this.gl_, 36160, 36064, 3553, this.fb_texture_, 0);
      J.framebufferRenderbuffer$4$x(this.gl_, 36160, 36096, 36161, this.render_buffer_);
      J.bindTexture$2$x(this.gl_, 3553, null);
      J.bindRenderbuffer$2$x(this.gl_, 36161, null);
      J.bindFramebuffer$2$x(this.gl_, 36160, null);
    },
    renderPicking$2: function(drawables, mouse_pos) {
      var t1, t2, t3, d, t4, t5, t6, t7, t8, ret, first_address;
      J.bindFramebuffer$2$x(this.gl_, 36160, this.picking_buffer_);
      J.viewport$4$x(this.gl_, 0, 0, this.view_width_, this.view_height_);
      J.clear$1$ax(this.gl_, 16640);
      this.m_worldview_ = this.camera_.cam_mat_;
      t1 = this.view_width_;
      t2 = this.view_height_;
      if (typeof t1 !== "number")
        return t1.$div();
      if (typeof t2 !== "number")
        return H.iae(t2);
      this.m_perspective_ = T.makePerspectiveMatrix(0.7853981633974483, t1 / t2, 0.1, 100);
      for (t1 = new J.ArrayIterator(drawables, drawables.length, 0, null), t2 = this.dimensions_; t1.moveNext$0();)
        for (t3 = J.get$iterator$ax(t1.__interceptors$_current); t3.moveNext$0();) {
          d = t3.get$current();
          t4 = this.camera_;
          t5 = d.getPosition$0().storage;
          t6 = t5[0];
          t5 = t5[1];
          t7 = new Float32Array(2);
          t7[0] = t6;
          t7[1] = t5;
          t4 = t4.pos_.storage;
          t5 = t4[0];
          t4 = t4[1];
          t6 = new Float32Array(2);
          t6[0] = t5;
          t6[1] = t4;
          t4 = t6[0];
          t6 = t6[1];
          t5 = new Float32Array(2);
          t5[0] = -t4;
          t5[1] = -t6;
          t4 = new Float32Array(2);
          t4[1] = t7[1];
          t4[0] = t7[0];
          t5 = new T.Vector2(t4).sub$1(new T.Vector2(t5));
          t5 = t5.get$length(t5);
          t4 = d.size_.storage;
          t7 = t4[0];
          t4 = t4[1];
          t6 = new Float32Array(2);
          t8 = new T.Vector2(t6);
          t6[0] = t7;
          t6[1] = t4;
          if (t5 < 25 + t8.get$length(t8))
            if (!d.isTransparent$0() && d.pick_shader_ != null)
              d.baseDraw$5(this.gl_, this.m_worldview_, this.m_perspective_, t2, d.pick_shader_);
        }
      J.readPixels$7$x(this.gl_, 0, 0, this.view_width_, this.view_height_, 6408, 5121, this.last_captured_colour_map_);
      t1 = mouse_pos.storage;
      t2 = t1[0];
      t3 = this.view_width_;
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (!(t2 >= t3)) {
        t3 = t1[1];
        t4 = this.view_height_;
        if (typeof t4 !== "number")
          return H.iae(t4);
        t2 = t3 >= t4 || t2 < 0 || t3 < 0;
      } else
        t2 = true;
      if (t2) {
        P.print("invalid mouse coordinates");
        ret = null;
      } else if (this.last_captured_colour_map_ == null) {
        P.print("Colour map not captured");
        ret = null;
      } else {
        t2 = this.view_height_;
        if (typeof t2 !== "number")
          return t2.$sub();
        t3 = C.JSNumber_methods.toInt$0(Math.floor(t1[1]));
        t4 = this.view_width_;
        if (typeof t4 !== "number")
          return H.iae(t4);
        first_address = (t2 - 1 - t3) * t4 * 4 + C.JSNumber_methods.toInt$0(Math.floor(t1[0])) * 4;
        ret = H.setRuntimeTypeInfo([], [P.$int]);
        t1 = this.last_captured_colour_map_;
        if (first_address < 0 || first_address >= t1.length)
          return H.ioore(t1, first_address);
        ret.push(t1[first_address]);
        t1 = this.last_captured_colour_map_;
        t4 = first_address + 1;
        if (t4 >= t1.length)
          return H.ioore(t1, t4);
        ret.push(t1[t4]);
        t4 = this.last_captured_colour_map_;
        t1 = first_address + 2;
        if (t1 >= t4.length)
          return H.ioore(t4, t1);
        ret.push(t4[t1]);
      }
      J.bindFramebuffer$2$x(this.gl_, 36160, null);
      t1 = ret.length;
      if (0 >= t1)
        return H.ioore(ret, 0);
      t2 = ret[0];
      if (1 >= t1)
        return H.ioore(ret, 1);
      t1 = ret[1];
      t3 = new Float32Array(H._checkLength(2));
      t3[0] = t2 / 255;
      t3[1] = t1 / 255;
      return new T.Vector2(t3);
    },
    render$1: function(drawables) {
      var t1, t2, sorted_drawables, t3, d, t4, t5, t6, t7, t8;
      J.viewport$4$x(this.gl_, 0, 0, this.view_width_, this.view_height_);
      J.clear$1$ax(this.gl_, 16640);
      this.m_worldview_ = this.camera_.cam_mat_;
      t1 = this.view_width_;
      t2 = this.view_height_;
      if (typeof t1 !== "number")
        return t1.$div();
      if (typeof t2 !== "number")
        return H.iae(t2);
      this.m_perspective_ = T.makePerspectiveMatrix(0.7853981633974483, t1 / t2, 0.1, 100);
      sorted_drawables = H.setRuntimeTypeInfo([], [Q.Drawable]);
      for (t1 = new J.ArrayIterator(drawables, drawables.length, 0, null), t2 = this.dimensions_; t1.moveNext$0();)
        for (t3 = J.get$iterator$ax(t1.__interceptors$_current); t3.moveNext$0();) {
          d = t3.get$current();
          t4 = this.camera_;
          t5 = d.getPosition$0().storage;
          t6 = t5[0];
          t5 = t5[1];
          t7 = new Float32Array(2);
          t7[0] = t6;
          t7[1] = t5;
          t4 = t4.pos_.storage;
          t5 = t4[0];
          t4 = t4[1];
          t6 = new Float32Array(2);
          t6[0] = t5;
          t6[1] = t4;
          t4 = t6[0];
          t6 = t6[1];
          t5 = new Float32Array(2);
          t5[0] = -t4;
          t5[1] = -t6;
          t4 = new Float32Array(2);
          t4[1] = t7[1];
          t4[0] = t7[0];
          t5 = new T.Vector2(t4).sub$1(new T.Vector2(t5));
          t5 = t5.get$length(t5);
          t4 = d.size_.storage;
          t7 = t4[0];
          t4 = t4[1];
          t6 = new Float32Array(2);
          t8 = new T.Vector2(t6);
          t6[0] = t7;
          t6[1] = t4;
          if (t5 < 25 + t8.get$length(t8))
            if (!d.isTransparent$0())
              d.draw$4(this.gl_, this.m_worldview_, this.m_perspective_, t2);
            else
              sorted_drawables.push(d);
        }
      C.JSArray_methods.sort$1(sorted_drawables, new M.Renderer_render_closure());
      J.depthMask$1$x(this.gl_, false);
      for (t1 = new J.ArrayIterator(sorted_drawables, sorted_drawables.length, 0, null); t1.moveNext$0();)
        t1.__interceptors$_current.draw$4(this.gl_, this.m_worldview_, this.m_perspective_, t2);
      J.depthMask$1$x(this.gl_, true);
    },
    Renderer$3: function(view_, canvas_, camera_) {
      var t1, t2, t3, t4, t5, t6;
      t1 = C.EventStreamProvider_mousedown.forTarget$1(window);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new M.Renderer_closure(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = J.getContext$1$x(this.canvas_, "experimental-webgl");
      this.gl_ = t1;
      t2 = $.color_vs_source;
      t3 = $.color_fs_source;
      t4 = new F.BasicShaderProperties(null, null, null, null, null, null, null, null);
      t5 = H.setRuntimeTypeInfo([], [F.ShaderProperty]);
      t6 = new L.BasicShader(t4, null, null, t5);
      t6.Shader$3(t2, t3, t1);
      t5.push(t4);
      t6.initProperties$0();
      this.color_shader_ = t6;
      t6 = this.gl_;
      t4 = $.texture_vs_source;
      t5 = $.texture_fs_source;
      t1 = new F.BasicShaderProperties(null, null, null, null, null, null, null, null);
      t3 = H.setRuntimeTypeInfo([], [F.ShaderProperty]);
      t2 = new L.BasicShader(t1, null, null, t3);
      t2.Shader$3(t4, t5, t6);
      t3.push(t1);
      t2.initProperties$0();
      this.texture_shader_ = t2;
      t2 = this.gl_;
      t1 = $.lighting_vs_source;
      t3 = $.lighting_fs_source;
      t6 = new L.LightShader(new F.BasicShaderProperties(null, null, null, null, null, null, null, null), new F.LightingShaderProperty(null, null, null, null, 45, H.setRuntimeTypeInfo(Array(2), [F.PointLightUniform])), null, null, H.setRuntimeTypeInfo([], [F.ShaderProperty]));
      t6.Shader$3(t1, t3, t2);
      t6.LightShader$3(t1, t3, t2);
      this.light_shader_ = t6;
      t6 = this.gl_;
      t2 = $.texture_part_vs_source;
      t3 = $.texture_part_fs_source;
      t1 = new L.AtlasShader(new F.BasicShaderProperties(null, null, null, null, null, null, null, null), new F.AtlasTextureProperty(null, null), null, null, H.setRuntimeTypeInfo([], [F.ShaderProperty]));
      t1.Shader$3(t2, t3, t6);
      t1.AtlasShader$3(t2, t3, t6);
      this.atlas_shader_ = t1;
      t1 = new T.Matrix4(new Float32Array(H._checkLength(16)));
      t1.setIdentity$0();
      this.m_worldview_ = t1;
    },
    static: {Renderer$: function(view_, canvas_, camera_) {
        var t1 = new M.Renderer(canvas_, view_, null, null, 3, null, null, null, null, null, null, null, null, null, null, null, null, null, null, camera_, null, null);
        t1.Renderer$3(view_, canvas_, camera_);
        return t1;
      }}
  },
  Renderer_closure: {
    "^": "Closure:1;this_0",
    call$1: function($event) {
      var t1, t2, t3;
      t1 = J.getInterceptor$x($event);
      t2 = t1.get$client($event);
      t2 = t2.get$x(t2);
      if (typeof t2 !== "number")
        return t2.$mul();
      t1 = t1.get$client($event);
      t1 = t1.get$y(t1);
      if (typeof t1 !== "number")
        return t1.$mul();
      t3 = new Float32Array(H._checkLength(2));
      t3[0] = t2;
      t3[1] = t1;
      this.this_0.mouse_pos_ = new T.Vector2(t3);
    }
  },
  Renderer_init_closure: {
    "^": "Closure:1;this_0",
    call$1: function($event) {
      var t1 = this.this_0;
      t1.setSize$0();
      t1.updateFrameBufferSize$0();
    }
  },
  Renderer_init_closure0: {
    "^": "Closure:1;this_1",
    call$1: function($event) {
      var t1 = this.this_1;
      t1.setSize$0();
      t1.updateFrameBufferSize$0();
    }
  },
  Renderer_render_closure: {
    "^": "Closure:3;",
    call$2: function(x, y) {
      var t1, t2;
      t1 = y.get$position_();
      t1 = t1.get$y(t1);
      t2 = x.get$position_();
      return C.JSNumber_methods.compareTo$1(t1, t2.get$y(t2));
    }
  }
}],
["Shader", "shader.dart", , L, {
  "^": "",
  Shader: {
    "^": "Object;",
    initProperties$0: function() {
      for (var t1 = this.shader_properties_, t1 = new J.ArrayIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        t1.__interceptors$_current.init$2(this.gl_, this.shader_program_);
    },
    makeCurrent$0: function() {
      J.useProgram$1$x(this.gl_, this.shader_program_);
      for (var t1 = this.shader_properties_, t1 = new J.ArrayIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        t1.__interceptors$_current.update$1(this.gl_);
    },
    getShaderProperty$1: function($name) {
      var ret, t1, prop;
      t1 = this.shader_properties_;
      t1 = new J.ArrayIterator(t1, t1.length, 0, null);
      while (true) {
        if (!t1.moveNext$0()) {
          ret = null;
          break;
        }
        prop = t1.__interceptors$_current;
        if (prop.getName$0() === $name) {
          ret = prop;
          break;
        }
      }
      return ret;
    },
    Shader$3: function(vertex_source, fragment_source, gl) {
      var vs, fs, t1;
      this.gl_ = gl;
      vs = J.createShader$1$x(gl, 35633);
      gl.shaderSource(vs, vertex_source);
      gl.compileShader(vs);
      fs = gl.createShader(35632);
      gl.shaderSource(fs, fragment_source);
      gl.compileShader(fs);
      t1 = gl.createProgram();
      this.shader_program_ = t1;
      gl.attachShader(t1, vs);
      gl.attachShader(this.shader_program_, fs);
      gl.linkProgram(this.shader_program_);
      gl.useProgram(this.shader_program_);
      if (gl.getShaderParameter(vs, 35713) !== true)
        P.print(gl.getShaderInfoLog(vs));
      if (gl.getShaderParameter(fs, 35713) !== true)
        P.print(gl.getShaderInfoLog(fs));
      if (gl.getProgramParameter(this.shader_program_, 35714) !== true)
        P.print(gl.getProgramInfoLog(this.shader_program_));
    }
  },
  BasicShader: {
    "^": "Shader;basic_properties_,shader_program_,gl_,shader_properties_"
  },
  AtlasShader: {
    "^": "Shader;basic_properties_,atlas_property_,shader_program_,gl_,shader_properties_",
    AtlasShader$3: function(vertex_source, fragment_source, gl) {
      var t1 = this.shader_properties_;
      t1.push(this.basic_properties_);
      t1.push(this.atlas_property_);
      this.initProperties$0();
    }
  },
  LightShader: {
    "^": "Shader;basic_properties_,light_property_,shader_program_,gl_,shader_properties_",
    LightShader$3: function(vertex_source, fragment_source, gl) {
      var t1 = this.shader_properties_;
      t1.push(this.basic_properties_);
      t1.push(this.light_property_);
      this.initProperties$0();
    }
  }
}],
["ShaderProperties", "shader_properties.dart", , F, {
  "^": "",
  ShaderProperty: {
    "^": "Object;"
  },
  BasicShaderProperties: {
    "^": "ShaderProperty;a_vertex_pos_<,a_vertex_color_,a_vertex_coord_,a_vertex_normal_,perspective_,modelview_,worldview_,gl_",
    init$2: function(gl, shader_program) {
      var t1;
      this.gl_ = gl;
      t1 = J.getAttribLocation$2$x(gl, shader_program, "aVertexPosition");
      this.a_vertex_pos_ = t1;
      gl.enableVertexAttribArray(t1);
      t1 = gl.getAttribLocation(shader_program, "aVertexColor");
      this.a_vertex_color_ = t1;
      if (typeof t1 !== "number")
        return t1.$ge();
      if (t1 >= 0)
        gl.enableVertexAttribArray(t1);
      t1 = gl.getAttribLocation(shader_program, "aVertexNormal");
      this.a_vertex_normal_ = t1;
      if (typeof t1 !== "number")
        return t1.$ge();
      if (t1 >= 0)
        gl.enableVertexAttribArray(t1);
      t1 = gl.getAttribLocation(shader_program, "aTextureCoord");
      this.a_vertex_coord_ = t1;
      if (typeof t1 !== "number")
        return t1.$ge();
      if (t1 >= 0)
        gl.enableVertexAttribArray(t1);
      this.perspective_ = T.Matrix4Uniform$(gl, shader_program, "uPMatrix", null);
      this.modelview_ = T.Matrix4Uniform$(gl, shader_program, "uMVMatrix", null);
      this.worldview_ = T.Matrix4Uniform$(gl, shader_program, "uWVMatrix", null);
    },
    update$1: function(gl) {
      this.perspective_.update$0();
      this.modelview_.update$0();
      this.worldview_.update$0();
    },
    getName$0: function() {
      return $.BasicShaderProperties_propName;
    }
  },
  AtlasTextureProperty: {
    "^": "ShaderProperty;size_,offset_<",
    init$2: function(gl, shader_program) {
      this.size_ = T.Vector2Uniform$(gl, shader_program, "t_size", null);
      this.offset_ = T.Vector2Uniform$(gl, shader_program, "t_offset", null);
    },
    update$1: function(gl) {
      this.size_.update$0();
      this.offset_.update$0();
    },
    setOffset$1: function(offset) {
      var t1 = this.offset_;
      t1.updated_ = false;
      t1.data_ = offset;
    },
    getName$0: function() {
      return $.AtlasTextureProperty_propName;
    }
  },
  PointLightUniform: {
    "^": "Object;point_pos_,point_color_,point_attenuation_"
  },
  LightingShaderProperty: {
    "^": "Object;directional_dir_,directional_color_,ambient_color_,normal_,angle_,lights_",
    init$2: function(gl, shader_program) {
      var t1;
      this.directional_dir_ = T.Vector3Uniform$(gl, shader_program, "uDirectionalDir", null);
      this.directional_color_ = T.Vector3Uniform$(gl, shader_program, "uDirectionalColor", null);
      this.ambient_color_ = T.Vector3Uniform$(gl, shader_program, "uAmbientColor", null);
      t1 = new T.Matrix3Uniform(null, gl, new Float32Array(H._checkLength(9)), false);
      t1.Matrix3Uniform$4(gl, shader_program, "uNMatrix", null);
      this.normal_ = t1;
      this.initializePointLights$3(gl, shader_program, 2);
    },
    initializePointLights$3: function(gl, shader_program, number) {
      var t1, i, t2, t3;
      for (t1 = this.lights_, i = 0; i < number; ++i) {
        t2 = new F.PointLightUniform(null, null, null);
        if (i >= 2)
          return H.ioore(t1, i);
        t1[i] = t2;
        t3 = new T.Vector3Uniform(null, gl, null, false);
        t3.u_location_ = J.getUniformLocation$2$x(gl, shader_program, "lights[" + i + "].uPos");
        t3.data_ = new T.Vector3(new Float32Array(3));
        t2.point_pos_ = t3;
        t2 = t1[i];
        t3 = new T.Vector3Uniform(null, gl, null, false);
        t3.u_location_ = gl.getUniformLocation(shader_program, "lights[" + i + "].uColor");
        t3.data_ = new T.Vector3(new Float32Array(3));
        t2.point_color_ = t3;
        t2 = t1[i];
        t3 = new T.Vector3Uniform(null, gl, null, false);
        t3.u_location_ = gl.getUniformLocation(shader_program, "lights[" + i + "].uAttenuation");
        t3.data_ = new T.Vector3(new Float32Array(3));
        t2.point_attenuation_ = t3;
      }
    },
    update$1: function(gl) {
      var t1, i, t2, t3, t4, t5;
      this.directional_dir_.update$0();
      this.directional_color_.update$0();
      this.ambient_color_.update$0();
      this.normal_.update$0();
      for (t1 = this.lights_, i = 0; i < 2; ++i) {
        t2 = t1[i].point_pos_;
        if (!t2.updated_) {
          t3 = t2.gl_;
          t4 = t2.u_location_;
          t5 = t2.data_.storage;
          J.uniform3f$4$x(t3, t4, t5[0], t5[1], t5[2]);
          t2.updated_ = true;
        }
        t2 = t1[i].point_color_;
        if (!t2.updated_) {
          t3 = t2.gl_;
          t4 = t2.u_location_;
          t5 = t2.data_.storage;
          J.uniform3f$4$x(t3, t4, t5[0], t5[1], t5[2]);
          t2.updated_ = true;
        }
        t2 = t1[i].point_attenuation_;
        if (!t2.updated_) {
          t3 = t2.gl_;
          t4 = t2.u_location_;
          t5 = t2.data_.storage;
          J.uniform3f$4$x(t3, t4, t5[0], t5[1], t5[2]);
          t2.updated_ = true;
        }
      }
    },
    setNormalMatrix$1: function(normal_mat) {
      var t1 = this.normal_;
      t1.updated_ = false;
      normal_mat.copyIntoArray$1(t1.data_);
    },
    SetAmbientLight$1: function(light) {
      var t1, t2;
      t1 = this.ambient_color_;
      t2 = light.color_;
      t1.updated_ = false;
      t1.data_ = t2;
    },
    SetDirectionalLight$1: function(light) {
      var t1, t2;
      t1 = this.directional_color_;
      t2 = light.color_;
      t1.updated_ = false;
      t1.data_ = t2;
      t2 = this.directional_dir_;
      t1 = light.dir_;
      t2.updated_ = false;
      t2.data_ = t1;
    },
    getName$0: function() {
      return $.LightingShaderProperty_propName;
    }
  }
}],
["_foreign_helper", "dart:_foreign_helper", , H, {
  "^": "",
  JS_CONST: {
    "^": "Object;code"
  }
}],
["_interceptors", "dart:_interceptors", , J, {
  "^": "",
  getInterceptor: function(object) {
    return void 0;
  },
  makeDispatchRecord: function(interceptor, proto, extension, indexability) {
    return {i: interceptor, p: proto, e: extension, x: indexability};
  },
  getNativeInterceptor: function(object) {
    var record, proto, objectProto, interceptor;
    record = object[init.dispatchPropertyName];
    if (record == null)
      if ($.initNativeDispatchFlag == null) {
        H.initNativeDispatch();
        record = object[init.dispatchPropertyName];
      }
    if (record != null) {
      proto = record.p;
      if (false === proto)
        return record.i;
      if (true === proto)
        return object;
      objectProto = Object.getPrototypeOf(object);
      if (proto === objectProto)
        return record.i;
      if (record.e === objectProto)
        throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
    }
    interceptor = H.lookupAndCacheInterceptor(object);
    if (interceptor == null) {
      proto = Object.getPrototypeOf(object);
      if (proto == null || proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      else
        return C.UnknownJavaScriptObject_methods;
    }
    return interceptor;
  },
  Interceptor: {
    "^": "Object;",
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: ["super$Interceptor$toString$0", function(receiver) {
      return H.Primitives_objectToString(receiver);
    }],
    "%": "CanvasRenderingContext2D|DOMError|FileError|MediaError|MediaKeyError|NavigatorUserMediaError|PositionError|SQLError|SVGAnimatedEnumeration|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedString|WebGLBuffer|WebGLFramebuffer|WebGLProgram|WebGLRenderbuffer|WebGLShader|WebGLTexture|WebGLUniformLocation"
  },
  JSBool: {
    "^": "Interceptor;",
    toString$0: function(receiver) {
      return String(receiver);
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    $isbool: 1
  },
  JSNull: {
    "^": "Interceptor;",
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    }
  },
  JavaScriptObject: {
    "^": "Interceptor;",
    get$hashCode: function(_) {
      return 0;
    },
    $isJSObject: 1
  },
  PlainJavaScriptObject: {
    "^": "JavaScriptObject;"
  },
  UnknownJavaScriptObject: {
    "^": "JavaScriptObject;",
    toString$0: function(receiver) {
      return String(receiver);
    }
  },
  JSArray: {
    "^": "Interceptor;",
    checkMutable$1: function(receiver, reason) {
      if (!!receiver.immutable$list)
        throw H.wrapException(P.UnsupportedError$(reason));
    },
    checkGrowable$1: function(receiver, reason) {
      if (!!receiver.fixed$length)
        throw H.wrapException(P.UnsupportedError$(reason));
    },
    add$1: function(receiver, value) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("add"));
      receiver.push(value);
    },
    remove$1: function(receiver, element) {
      var i;
      this.checkGrowable$1(receiver, "remove");
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq(receiver[i], element)) {
          receiver.splice(i, 1);
          return true;
        }
      return false;
    },
    _removeWhere$2: function(receiver, test, removeMatching) {
      var retained, end, i, element, t1;
      retained = [];
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        element = receiver[i];
        if (test.call$1(element) !== true === removeMatching)
          retained.push(element);
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      t1 = retained.length;
      if (t1 === end)
        return;
      this.set$length(receiver, t1);
      for (i = 0; i < retained.length; ++i)
        this.$indexSet(receiver, i, retained[i]);
    },
    addAll$1: function(receiver, collection) {
      var t1;
      for (t1 = new J.ArrayIterator(collection, collection.length, 0, null); t1.moveNext$0();)
        this.add$1(receiver, t1.__interceptors$_current);
    },
    forEach$1: function(receiver, f) {
      var end, i;
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        f.call$1(receiver[i]);
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    map$1: function(receiver, f) {
      return H.setRuntimeTypeInfo(new H.MappedListIterable(receiver, f), [null, null]);
    },
    firstWhere$2$orElse: function(receiver, test, orElse) {
      var end, i, element;
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        element = receiver[i];
        if (test.call$1(element) === true)
          return element;
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return orElse.call$0();
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    get$last: function(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var $length, i, t1;
      this.checkMutable$1(receiver, "set range");
      P.RangeError_checkValidRange(start, end, receiver.length, null, null, null);
      $length = end - start;
      if ($length === 0)
        return;
      if (skipCount < 0)
        H.throwExpression(P.RangeError$range(skipCount, 0, null, "skipCount", null));
      if (skipCount + $length > iterable.length)
        throw H.wrapException(H.IterableElementError_tooFew());
      if (skipCount < start)
        for (i = $length - 1; i >= 0; --i) {
          t1 = skipCount + i;
          if (t1 < 0 || t1 >= iterable.length)
            return H.ioore(iterable, t1);
          receiver[start + i] = iterable[t1];
        }
      else
        for (i = 0; i < $length; ++i) {
          t1 = skipCount + i;
          if (t1 < 0 || t1 >= iterable.length)
            return H.ioore(iterable, t1);
          receiver[start + i] = iterable[t1];
        }
    },
    sort$1: function(receiver, compare) {
      this.checkMutable$1(receiver, "sort");
      H.Sort__doSort(receiver, 0, receiver.length - 1, compare);
    },
    contains$1: function(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq(receiver[i], other))
          return true;
      return false;
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    get$iterator: function(receiver) {
      return new J.ArrayIterator(receiver, receiver.length, 0, null);
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      if (newLength < 0)
        throw H.wrapException(P.RangeError$value(newLength, null, null));
      this.checkGrowable$1(receiver, "set length");
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("indexed set"));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index, null, null));
      receiver[index] = value;
    },
    $isJSIndexable: 1,
    $isList: 1,
    $asList: null,
    $isEfficientLength: 1
  },
  ArrayIterator: {
    "^": "Object;__interceptors$_iterable,__interceptors$_length,__interceptors$_index,__interceptors$_current",
    get$current: function() {
      return this.__interceptors$_current;
    },
    moveNext$0: function() {
      var t1, $length, t2;
      t1 = this.__interceptors$_iterable;
      $length = t1.length;
      if (this.__interceptors$_length !== $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t2 = this.__interceptors$_index;
      if (t2 >= $length) {
        this.__interceptors$_current = null;
        return false;
      }
      this.__interceptors$_current = t1[t2];
      this.__interceptors$_index = t2 + 1;
      return true;
    }
  },
  JSNumber: {
    "^": "Interceptor;",
    compareTo$1: function(receiver, b) {
      var bIsNegative;
      if (typeof b !== "number")
        throw H.wrapException(P.ArgumentError$(b));
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (this.get$isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative: function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    get$isNaN: function(receiver) {
      return isNaN(receiver);
    },
    remainder$1: function(receiver, b) {
      return receiver % b;
    },
    toInt$0: function(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw H.wrapException(P.UnsupportedError$("" + receiver));
    },
    floor$0: function(receiver) {
      return this.toInt$0(Math.floor(receiver));
    },
    round$0: function(receiver) {
      if (receiver > 0) {
        if (receiver !== 1 / 0)
          return Math.round(receiver);
      } else if (receiver > -1 / 0)
        return 0 - Math.round(0 - receiver);
      throw H.wrapException(P.UnsupportedError$("" + receiver));
    },
    floorToDouble$0: function(receiver) {
      return Math.floor(receiver);
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      return receiver & 0x1FFFFFFF;
    },
    $add: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver + other;
    },
    $sub: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver - other;
    },
    $div: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver / other;
    },
    $mul: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver * other;
    },
    _tdivFast$1: function(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this.toInt$0(receiver / other);
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = other > 31 ? 0 : receiver >>> other;
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    $lt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver < other;
    },
    $gt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver > other;
    },
    $le: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver <= other;
    },
    $ge: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver >= other;
    },
    $isnum: 1
  },
  JSInt: {
    "^": "JSNumber;",
    $is$double: 1,
    $isnum: 1,
    $is$int: 1
  },
  JSDouble: {
    "^": "JSNumber;",
    $is$double: 1,
    $isnum: 1
  },
  JSString: {
    "^": "Interceptor;",
    codeUnitAt$1: function(receiver, index) {
      if (index < 0)
        throw H.wrapException(P.RangeError$value(index, null, null));
      if (index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index, null, null));
      return receiver.charCodeAt(index);
    },
    $add: function(receiver, other) {
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver + other;
    },
    endsWith$1: function(receiver, other) {
      var otherLength, t1;
      H.checkString(other);
      otherLength = other.length;
      t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    split$1: function(receiver, pattern) {
      return receiver.split(pattern);
    },
    substring$2: function(receiver, startIndex, endIndex) {
      var t1;
      if (typeof startIndex !== "number" || Math.floor(startIndex) !== startIndex)
        H.throwExpression(P.ArgumentError$(startIndex));
      if (endIndex == null)
        endIndex = receiver.length;
      if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
        H.throwExpression(P.ArgumentError$(endIndex));
      t1 = J.getInterceptor$n(startIndex);
      if (t1.$lt(startIndex, 0))
        throw H.wrapException(P.RangeError$value(startIndex, null, null));
      if (t1.$gt(startIndex, endIndex))
        throw H.wrapException(P.RangeError$value(startIndex, null, null));
      if (J.$gt$n(endIndex, receiver.length))
        throw H.wrapException(P.RangeError$value(endIndex, null, null));
      return receiver.substring(startIndex, endIndex);
    },
    substring$1: function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    },
    trim$0: function(receiver) {
      var result, endIndex, startIndex, t1, endIndex0;
      result = receiver.trim();
      endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (this.codeUnitAt$1(result, 0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    $mul: function(receiver, times) {
      var s, result;
      if (typeof times !== "number")
        return H.iae(times);
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw H.wrapException(C.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    indexOf$2: function(receiver, pattern, start) {
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
      return receiver.indexOf(pattern, start);
    },
    contains$2: function(receiver, other, startIndex) {
      if (startIndex > receiver.length)
        throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length, null, null));
      return H.stringContainsUnchecked(receiver, other, startIndex);
    },
    contains$1: function($receiver, other) {
      return this.contains$2($receiver, other, 0);
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    compareTo$1: function(receiver, other) {
      var t1;
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$(other));
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index, null, null));
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isString: 1,
    static: {JSString__isWhitespace: function(codeUnit) {
        if (codeUnit < 256)
          switch (codeUnit) {
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 32:
            case 133:
            case 160:
              return true;
            default:
              return false;
          }
        switch (codeUnit) {
          case 5760:
          case 6158:
          case 8192:
          case 8193:
          case 8194:
          case 8195:
          case 8196:
          case 8197:
          case 8198:
          case 8199:
          case 8200:
          case 8201:
          case 8202:
          case 8232:
          case 8233:
          case 8239:
          case 8287:
          case 12288:
          case 65279:
            return true;
          default:
            return false;
        }
      }, JSString__skipLeadingWhitespace: function(string, index) {
        var t1, codeUnit;
        for (t1 = string.length; index < t1;) {
          codeUnit = C.JSString_methods.codeUnitAt$1(string, index);
          if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
            break;
          ++index;
        }
        return index;
      }, JSString__skipTrailingWhitespace: function(string, index) {
        var index0, codeUnit;
        for (; index > 0; index = index0) {
          index0 = index - 1;
          codeUnit = C.JSString_methods.codeUnitAt$1(string, index0);
          if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
            break;
        }
        return index;
      }}
  }
}],
["_isolate_helper", "dart:_isolate_helper", , H, {
  "^": "",
  _callInIsolate: function(isolate, $function) {
    var result = isolate.eval$1($function);
    if (!init.globalState.currentContext._isExecutingEvent)
      init.globalState.topEventLoop.run$0();
    return result;
  },
  leaveJsAsync: function() {
    --init.globalState.topEventLoop._activeJsAsyncCount;
  },
  startRootIsolate: function(entry, args) {
    var t1, t2, t3, t4, t5, rootContext;
    t1 = {};
    t1.args_0 = args;
    args = args;
    t1.args_0 = args;
    if (args == null) {
      args = [];
      t1.args_0 = args;
      t2 = args;
    } else
      t2 = args;
    if (!J.getInterceptor(t2).$isList)
      throw H.wrapException(P.ArgumentError$("Arguments to main must be a List: " + H.S(t2)));
    t2 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
    t2._Manager$1(entry);
    init.globalState = t2;
    if (init.globalState.isWorker === true)
      return;
    t2 = init.globalState.nextIsolateId++;
    t3 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H.RawReceivePortImpl);
    t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.$int);
    t5 = new H.RawReceivePortImpl(0, null, false);
    rootContext = new H._IsolateContext(t2, t3, t4, init.createNewIsolate(), t5, new H.CapabilityImpl(H.random64()), new H.CapabilityImpl(H.random64()), false, false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, true, P.LinkedHashSet_LinkedHashSet(null, null, null, null));
    t4.add$1(0, 0);
    rootContext._addRegistration$2(0, t5);
    init.globalState.rootContext = rootContext;
    init.globalState.currentContext = rootContext;
    t2 = H.getDynamicRuntimeType();
    t3 = H.buildFunctionType(t2, [t2])._isTest$1(entry);
    if (t3)
      rootContext.eval$1(new H.startRootIsolate_closure(t1, entry));
    else {
      t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(entry);
      if (t2)
        rootContext.eval$1(new H.startRootIsolate_closure0(t1, entry));
      else
        rootContext.eval$1(entry);
    }
    init.globalState.topEventLoop.run$0();
  },
  IsolateNatives_computeThisScript: function() {
    var currentScript = init.currentScript;
    if (currentScript != null)
      return String(currentScript.src);
    if (typeof version == "function" && typeof os == "object" && "system" in os)
      return H.IsolateNatives_computeThisScriptFromTrace();
    if (typeof version == "function" && typeof system == "function")
      return thisFilename();
    if (init.globalState.isWorker === true)
      return H.IsolateNatives_computeThisScriptFromTrace();
    return;
  },
  IsolateNatives_computeThisScriptFromTrace: function() {
    var stack, matches;
    stack = new Error().stack;
    if (stack == null) {
      stack = function() {
        try {
          throw new Error();
        } catch (e) {
          return e.stack;
        }
      }();
      if (stack == null)
        throw H.wrapException(P.UnsupportedError$("No stack trace"));
    }
    matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
    if (matches != null)
      return matches[1];
    matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
    if (matches != null)
      return matches[1];
    throw H.wrapException(P.UnsupportedError$("Cannot extract URI from \"" + H.S(stack) + "\""));
  },
  IsolateNatives__processWorkerMessage: function(sender, e) {
    var msg, t1, functionName, entryPoint, args, message, isSpawnUri, startPaused, replyTo, t2, t3, t4, context;
    msg = new H._Deserializer(true, []).deserialize$1(e.data);
    t1 = J.getInterceptor$asx(msg);
    switch (t1.$index(msg, "command")) {
      case "start":
        init.globalState.currentManagerId = t1.$index(msg, "id");
        functionName = t1.$index(msg, "functionName");
        entryPoint = functionName == null ? init.globalState.entry : H.IsolateNatives__getJSFunctionFromName(functionName);
        args = t1.$index(msg, "args");
        message = new H._Deserializer(true, []).deserialize$1(t1.$index(msg, "msg"));
        isSpawnUri = t1.$index(msg, "isSpawnUri");
        startPaused = t1.$index(msg, "startPaused");
        replyTo = new H._Deserializer(true, []).deserialize$1(t1.$index(msg, "replyTo"));
        t1 = init.globalState.nextIsolateId++;
        t2 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H.RawReceivePortImpl);
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.$int);
        t4 = new H.RawReceivePortImpl(0, null, false);
        context = new H._IsolateContext(t1, t2, t3, init.createNewIsolate(), t4, new H.CapabilityImpl(H.random64()), new H.CapabilityImpl(H.random64()), false, false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, true, P.LinkedHashSet_LinkedHashSet(null, null, null, null));
        t3.add$1(0, 0);
        context._addRegistration$2(0, t4);
        init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, startPaused, replyTo), "worker-start"));
        init.globalState.currentContext = context;
        init.globalState.topEventLoop.run$0();
        break;
      case "spawn-worker":
        break;
      case "message":
        if (t1.$index(msg, "port") != null)
          J.send$1$x(t1.$index(msg, "port"), t1.$index(msg, "msg"));
        init.globalState.topEventLoop.run$0();
        break;
      case "close":
        init.globalState.managers.remove$1(0, $.get$IsolateNatives_workerIds().$index(0, sender));
        sender.terminate();
        init.globalState.topEventLoop.run$0();
        break;
      case "log":
        H.IsolateNatives__log(t1.$index(msg, "msg"));
        break;
      case "print":
        if (init.globalState.isWorker === true) {
          t1 = init.globalState.mainManager;
          t2 = P.LinkedHashMap_LinkedHashMap$_literal(["command", "print", "msg", msg], null, null);
          t2 = new H._Serializer(true, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(t2);
          t1.toString;
          self.postMessage(t2);
        } else
          P.print(t1.$index(msg, "msg"));
        break;
      case "error":
        throw H.wrapException(t1.$index(msg, "msg"));
    }
  },
  IsolateNatives__log: function(msg) {
    var trace, t1, t2, exception;
    if (init.globalState.isWorker === true) {
      t1 = init.globalState.mainManager;
      t2 = P.LinkedHashMap_LinkedHashMap$_literal(["command", "log", "msg", msg], null, null);
      t2 = new H._Serializer(true, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(t2);
      t1.toString;
      self.postMessage(t2);
    } else
      try {
        self.console.log(msg);
      } catch (exception) {
        H.unwrapException(exception);
        trace = H.getTraceFromException(exception);
        throw H.wrapException(P.Exception_Exception(trace));
      }
  },
  IsolateNatives__getJSFunctionFromName: function(functionName) {
    return init.globalFunctions[functionName]();
  },
  IsolateNatives__startIsolate: function(topLevel, args, message, isSpawnUri, startPaused, replyTo) {
    var context, t1, t2, t3;
    context = init.globalState.currentContext;
    t1 = context.id;
    $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + t1);
    $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + t1);
    t1 = context.controlPort;
    t2 = init.globalState.currentContext.id;
    t3 = context.pauseCapability;
    J.send$1$x(replyTo, ["spawned", new H._NativeJsSendPort(t1, t2), t3, context.terminateCapability]);
    t2 = new H.IsolateNatives__startIsolate_runStartFunction(topLevel, args, message, isSpawnUri, context);
    if (startPaused === true) {
      context.addPause$2(t3, t3);
      init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, t2, "start isolate"));
    } else
      t2.call$0();
  },
  _clone: function(message) {
    return new H._Deserializer(true, []).deserialize$1(new H._Serializer(false, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(message));
  },
  startRootIsolate_closure: {
    "^": "Closure:4;box_0,entry_1",
    call$0: function() {
      this.entry_1.call$1(this.box_0.args_0);
    }
  },
  startRootIsolate_closure0: {
    "^": "Closure:4;box_0,entry_2",
    call$0: function() {
      this.entry_2.call$2(this.box_0.args_0, null);
    }
  },
  _Manager: {
    "^": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
    _Manager$1: function(entry) {
      var t1, t2, t3;
      t1 = self.window == null;
      t2 = self.Worker;
      t3 = t1 && !!self.postMessage;
      this.isWorker = t3;
      if (!t3)
        t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
      else
        t2 = true;
      this.supportsWorkers = t2;
      this.fromCommandLine = t1 && !t3;
      this.topEventLoop = new H._EventLoop(P.ListQueue$(null, H._IsolateEvent), 0);
      this.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H._IsolateContext);
      this.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, null);
      if (this.isWorker === true) {
        t1 = new H._MainManagerStub();
        this.mainManager = t1;
        self.onmessage = function(f, a) {
          return function(e) {
            f(a, e);
          };
        }(H.IsolateNatives__processWorkerMessage, t1);
        self.dartPrint = self.dartPrint || function(serialize) {
          return function(object) {
            if (self.console && self.console.log)
              self.console.log(object);
            else
              self.postMessage(serialize(object));
          };
        }(H._Manager__serializePrintMessage);
      }
    },
    static: {_Manager__serializePrintMessage: function(object) {
        var t1 = P.LinkedHashMap_LinkedHashMap$_literal(["command", "print", "msg", object], null, null);
        return new H._Serializer(true, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(t1);
      }}
  },
  _IsolateContext: {
    "^": "Object;id,ports,weakPorts,isolateStatics<,controlPort<,pauseCapability,terminateCapability,initialized,isPaused,delayedEvents,pauseTokens,doneHandlers,_scheduledControlEvents,_isExecutingEvent,errorsAreFatal,errorPorts",
    addPause$2: function(authentification, resume) {
      if (!this.pauseCapability.$eq(0, authentification))
        return;
      if (this.pauseTokens.add$1(0, resume) && !this.isPaused)
        this.isPaused = true;
      this._updateGlobalState$0();
    },
    removePause$1: function(resume) {
      var t1, t2, $event, t3, t4, t5;
      if (!this.isPaused)
        return;
      t1 = this.pauseTokens;
      t1.remove$1(0, resume);
      if (t1._collection$_length === 0) {
        for (t1 = this.delayedEvents; t2 = t1.length, t2 !== 0;) {
          if (0 >= t2)
            return H.ioore(t1, 0);
          $event = t1.pop();
          t2 = init.globalState.topEventLoop.events;
          t3 = t2._head;
          t4 = t2._table;
          t5 = t4.length;
          t3 = (t3 - 1 & t5 - 1) >>> 0;
          t2._head = t3;
          if (t3 < 0 || t3 >= t5)
            return H.ioore(t4, t3);
          t4[t3] = $event;
          if (t3 === t2._tail)
            t2._grow$0();
          ++t2._modificationCount;
        }
        this.isPaused = false;
      }
      this._updateGlobalState$0();
    },
    addDoneListener$1: function(responsePort) {
      var t1 = this.doneHandlers;
      if (t1 == null) {
        t1 = [];
        this.doneHandlers = t1;
      }
      if (J.contains$1$asx(t1, responsePort))
        return;
      this.doneHandlers.push(responsePort);
    },
    removeDoneListener$1: function(responsePort) {
      var t1 = this.doneHandlers;
      if (t1 == null)
        return;
      J.remove$1$ax(t1, responsePort);
    },
    setErrorsFatal$2: function(authentification, errorsAreFatal) {
      if (!this.terminateCapability.$eq(0, authentification))
        return;
      this.errorsAreFatal = errorsAreFatal;
    },
    handlePing$2: function(responsePort, pingType) {
      var t1, t2;
      t1 = J.getInterceptor(pingType);
      if (!t1.$eq(pingType, 0))
        t2 = t1.$eq(pingType, 1) && !this._isExecutingEvent;
      else
        t2 = true;
      if (t2) {
        J.send$1$x(responsePort, null);
        return;
      }
      t2 = new H._IsolateContext_handlePing_respond(responsePort);
      if (t1.$eq(pingType, 2)) {
        init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(this, t2, "ping"));
        return;
      }
      t1 = this._scheduledControlEvents;
      if (t1 == null) {
        t1 = P.ListQueue$(null, null);
        this._scheduledControlEvents = t1;
      }
      t1._add$1(t2);
    },
    handleKill$2: function(authentification, priority) {
      var t1, t2;
      if (!this.terminateCapability.$eq(0, authentification))
        return;
      t1 = J.getInterceptor(priority);
      if (!t1.$eq(priority, 0))
        t2 = t1.$eq(priority, 1) && !this._isExecutingEvent;
      else
        t2 = true;
      if (t2) {
        this.kill$0();
        return;
      }
      if (t1.$eq(priority, 2)) {
        t1 = init.globalState.topEventLoop;
        t2 = this.get$kill();
        t1.events._add$1(new H._IsolateEvent(this, t2, "kill"));
        return;
      }
      t1 = this._scheduledControlEvents;
      if (t1 == null) {
        t1 = P.ListQueue$(null, null);
        this._scheduledControlEvents = t1;
      }
      t1._add$1(this.get$kill());
    },
    handleUncaughtError$2: function(error, stackTrace) {
      var t1, message, t2;
      t1 = this.errorPorts;
      if (t1._collection$_length === 0) {
        if (this.errorsAreFatal === true && this === init.globalState.rootContext)
          return;
        if (self.console && self.console.error)
          self.console.error(error, stackTrace);
        else {
          P.print(error);
          if (stackTrace != null)
            P.print(stackTrace);
        }
        return;
      }
      message = Array(2);
      message.fixed$length = Array;
      message[0] = J.toString$0(error);
      message[1] = stackTrace == null ? null : J.toString$0(stackTrace);
      for (t2 = new P.LinkedHashSetIterator(t1, t1._modifications, null, null), t2._cell = t1._first; t2.moveNext$0();)
        J.send$1$x(t2._collection$_current, message);
    },
    eval$1: function(code) {
      var old, result, oldIsExecutingEvent, e, s, exception, t1;
      old = init.globalState.currentContext;
      init.globalState.currentContext = this;
      $ = this.isolateStatics;
      result = null;
      oldIsExecutingEvent = this._isExecutingEvent;
      this._isExecutingEvent = true;
      try {
        result = code.call$0();
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = H.getTraceFromException(exception);
        this.handleUncaughtError$2(e, s);
        if (this.errorsAreFatal === true) {
          this.kill$0();
          if (this === init.globalState.rootContext)
            throw exception;
        }
      } finally {
        this._isExecutingEvent = oldIsExecutingEvent;
        init.globalState.currentContext = old;
        if (old != null)
          $ = old.get$isolateStatics();
        if (this._scheduledControlEvents != null)
          for (; t1 = this._scheduledControlEvents, !t1.get$isEmpty(t1);)
            this._scheduledControlEvents.removeFirst$0().call$0();
      }
      return result;
    },
    lookup$1: function(portId) {
      return this.ports.$index(0, portId);
    },
    _addRegistration$2: function(portId, port) {
      var t1 = this.ports;
      if (t1.containsKey$1(portId))
        throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
      t1.$indexSet(0, portId, port);
    },
    _updateGlobalState$0: function() {
      if (this.ports.__js_helper$_length - this.weakPorts._collection$_length > 0 || this.isPaused || !this.initialized)
        init.globalState.isolates.$indexSet(0, this.id, this);
      else
        this.kill$0();
    },
    kill$0: [function() {
      var t1, t2;
      t1 = this._scheduledControlEvents;
      if (t1 != null)
        t1.clear$0(0);
      for (t1 = this.ports, t2 = t1.get$values(t1), t2 = H.setRuntimeTypeInfo(new H.MappedIterator(null, J.get$iterator$ax(t2._iterable), t2._f), [H.getTypeArgumentByIndex(t2, 0), H.getTypeArgumentByIndex(t2, 1)]); t2.moveNext$0();)
        t2.__internal$_current._close$0();
      t1.clear$0(0);
      this.weakPorts.clear$0(0);
      init.globalState.isolates.remove$1(0, this.id);
      this.errorPorts.clear$0(0);
      t1 = this.doneHandlers;
      if (t1 != null) {
        for (t1 = new J.ArrayIterator(t1, t1.length, 0, null); t1.moveNext$0();)
          J.send$1$x(t1.__interceptors$_current, null);
        this.doneHandlers = null;
      }
    }, "call$0", "get$kill", 0, 0, 2]
  },
  _IsolateContext_handlePing_respond: {
    "^": "Closure:2;responsePort_0",
    call$0: function() {
      J.send$1$x(this.responsePort_0, null);
    }
  },
  _EventLoop: {
    "^": "Object;events,_activeJsAsyncCount",
    dequeue$0: function() {
      var t1 = this.events;
      if (t1._head === t1._tail)
        return;
      return t1.removeFirst$0();
    },
    runIteration$0: function() {
      var $event, t1, t2;
      $event = this.dequeue$0();
      if ($event == null) {
        if (init.globalState.rootContext != null && init.globalState.isolates.containsKey$1(init.globalState.rootContext.id) && init.globalState.fromCommandLine === true && init.globalState.rootContext.ports.__js_helper$_length === 0)
          H.throwExpression(P.Exception_Exception("Program exited with open ReceivePorts."));
        t1 = init.globalState;
        if (t1.isWorker === true && t1.isolates.__js_helper$_length === 0 && t1.topEventLoop._activeJsAsyncCount === 0) {
          t1 = t1.mainManager;
          t2 = P.LinkedHashMap_LinkedHashMap$_literal(["command", "close"], null, null);
          t2 = new H._Serializer(true, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(t2);
          t1.toString;
          self.postMessage(t2);
        }
        return false;
      }
      $event.process$0();
      return true;
    },
    _runHelper$0: function() {
      if (self.window != null)
        new H._EventLoop__runHelper_next(this).call$0();
      else
        for (; this.runIteration$0();)
          ;
    },
    run$0: function() {
      var e, trace, exception, t1, t2;
      if (init.globalState.isWorker !== true)
        this._runHelper$0();
      else
        try {
          this._runHelper$0();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          trace = H.getTraceFromException(exception);
          t1 = init.globalState.mainManager;
          t2 = P.LinkedHashMap_LinkedHashMap$_literal(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)], null, null);
          t2 = new H._Serializer(true, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(t2);
          t1.toString;
          self.postMessage(t2);
        }
    }
  },
  _EventLoop__runHelper_next: {
    "^": "Closure:2;this_0",
    call$0: function() {
      if (!this.this_0.runIteration$0())
        return;
      P.Timer_Timer(C.Duration_0, this);
    }
  },
  _IsolateEvent: {
    "^": "Object;isolate,fn,message",
    process$0: function() {
      var t1 = this.isolate;
      if (t1.isPaused) {
        t1.delayedEvents.push(this);
        return;
      }
      t1.eval$1(this.fn);
    }
  },
  _MainManagerStub: {
    "^": "Object;"
  },
  IsolateNatives__processWorkerMessage_closure: {
    "^": "Closure:4;entryPoint_0,args_1,message_2,isSpawnUri_3,startPaused_4,replyTo_5",
    call$0: function() {
      H.IsolateNatives__startIsolate(this.entryPoint_0, this.args_1, this.message_2, this.isSpawnUri_3, this.startPaused_4, this.replyTo_5);
    }
  },
  IsolateNatives__startIsolate_runStartFunction: {
    "^": "Closure:2;topLevel_0,args_1,message_2,isSpawnUri_3,context_4",
    call$0: function() {
      var t1, t2, t3;
      this.context_4.initialized = true;
      if (this.isSpawnUri_3 !== true)
        this.topLevel_0.call$1(this.message_2);
      else {
        t1 = this.topLevel_0;
        t2 = H.getDynamicRuntimeType();
        t3 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
        if (t3)
          t1.call$2(this.args_1, this.message_2);
        else {
          t2 = H.buildFunctionType(t2, [t2])._isTest$1(t1);
          if (t2)
            t1.call$1(this.args_1);
          else
            t1.call$0();
        }
      }
    }
  },
  _BaseSendPort: {
    "^": "Object;"
  },
  _NativeJsSendPort: {
    "^": "_BaseSendPort;_receivePort,_isolateId",
    send$1: function(_, message) {
      var isolate, t1, msg, t2;
      isolate = init.globalState.isolates.$index(0, this._isolateId);
      if (isolate == null)
        return;
      t1 = this._receivePort;
      if (t1.get$_isClosed())
        return;
      msg = H._clone(message);
      if (isolate.get$controlPort() === t1) {
        t1 = J.getInterceptor$asx(msg);
        switch (t1.$index(msg, 0)) {
          case "pause":
            isolate.addPause$2(t1.$index(msg, 1), t1.$index(msg, 2));
            break;
          case "resume":
            isolate.removePause$1(t1.$index(msg, 1));
            break;
          case "add-ondone":
            isolate.addDoneListener$1(t1.$index(msg, 1));
            break;
          case "remove-ondone":
            isolate.removeDoneListener$1(t1.$index(msg, 1));
            break;
          case "set-errors-fatal":
            isolate.setErrorsFatal$2(t1.$index(msg, 1), t1.$index(msg, 2));
            break;
          case "ping":
            isolate.handlePing$2(t1.$index(msg, 1), t1.$index(msg, 2));
            break;
          case "kill":
            isolate.handleKill$2(t1.$index(msg, 1), t1.$index(msg, 2));
            break;
          case "getErrors":
            t1 = t1.$index(msg, 1);
            isolate.errorPorts.add$1(0, t1);
            break;
          case "stopErrors":
            t1 = t1.$index(msg, 1);
            isolate.errorPorts.remove$1(0, t1);
            break;
        }
        return;
      }
      t1 = init.globalState.topEventLoop;
      t2 = "receive " + H.S(message);
      t1.events._add$1(new H._IsolateEvent(isolate, new H._NativeJsSendPort_send_closure(this, msg), t2));
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof H._NativeJsSendPort && J.$eq(this._receivePort, other._receivePort);
    },
    get$hashCode: function(_) {
      return this._receivePort.get$_id();
    }
  },
  _NativeJsSendPort_send_closure: {
    "^": "Closure:4;this_0,msg_1",
    call$0: function() {
      var t1 = this.this_0._receivePort;
      if (!t1.get$_isClosed())
        t1.__isolate_helper$_add$1(this.msg_1);
    }
  },
  _WorkerSendPort: {
    "^": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
    send$1: function(_, message) {
      var t1, workerMessage, manager;
      t1 = P.LinkedHashMap_LinkedHashMap$_literal(["command", "message", "port", this, "msg", message], null, null);
      workerMessage = new H._Serializer(true, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(t1);
      if (init.globalState.isWorker === true) {
        init.globalState.mainManager.toString;
        self.postMessage(workerMessage);
      } else {
        manager = init.globalState.managers.$index(0, this._workerId);
        if (manager != null)
          manager.postMessage(workerMessage);
      }
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof H._WorkerSendPort && J.$eq(this._workerId, other._workerId) && J.$eq(this._isolateId, other._isolateId) && J.$eq(this._receivePortId, other._receivePortId);
    },
    get$hashCode: function(_) {
      var t1, t2, t3;
      t1 = this._workerId;
      if (typeof t1 !== "number")
        return t1.$shl();
      t2 = this._isolateId;
      if (typeof t2 !== "number")
        return t2.$shl();
      t3 = this._receivePortId;
      if (typeof t3 !== "number")
        return H.iae(t3);
      return (t1 << 16 ^ t2 << 8 ^ t3) >>> 0;
    }
  },
  RawReceivePortImpl: {
    "^": "Object;_id<,_handler,_isClosed<",
    _close$0: function() {
      this._isClosed = true;
      this._handler = null;
    },
    close$0: function(_) {
      var t1, t2;
      if (this._isClosed)
        return;
      this._isClosed = true;
      this._handler = null;
      t1 = init.globalState.currentContext;
      t2 = this._id;
      t1.ports.remove$1(0, t2);
      t1.weakPorts.remove$1(0, t2);
      t1._updateGlobalState$0();
    },
    __isolate_helper$_add$1: function(dataEvent) {
      if (this._isClosed)
        return;
      this._handler$1(dataEvent);
    },
    _handler$1: function(arg0) {
      return this._handler.call$1(arg0);
    },
    $isRawReceivePort: 1
  },
  TimerImpl: {
    "^": "Object;_once,_inEventLoop,_handle",
    TimerImpl$2: function(milliseconds, callback) {
      var t1, t2;
      if (milliseconds === 0)
        t1 = self.setTimeout == null || init.globalState.isWorker === true;
      else
        t1 = false;
      if (t1) {
        this._handle = 1;
        t1 = init.globalState.topEventLoop;
        t2 = init.globalState.currentContext;
        t1.events._add$1(new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
        this._inEventLoop = true;
      } else if (self.setTimeout != null) {
        ++init.globalState.topEventLoop._activeJsAsyncCount;
        this._handle = self.setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
      } else
        throw H.wrapException(P.UnsupportedError$("Timer greater than 0."));
    },
    static: {TimerImpl$: function(milliseconds, callback) {
        var t1 = new H.TimerImpl(true, false, null);
        t1.TimerImpl$2(milliseconds, callback);
        return t1;
      }}
  },
  TimerImpl_internalCallback: {
    "^": "Closure:2;this_0,callback_1",
    call$0: function() {
      this.this_0._handle = null;
      this.callback_1.call$0();
    }
  },
  TimerImpl_internalCallback0: {
    "^": "Closure:2;this_2,callback_3",
    call$0: function() {
      this.this_2._handle = null;
      H.leaveJsAsync();
      this.callback_3.call$0();
    }
  },
  CapabilityImpl: {
    "^": "Object;_id<",
    get$hashCode: function(_) {
      var hash = this._id;
      hash = C.JSInt_methods._shrOtherPositive$1(hash, 0) ^ C.JSInt_methods._tdivFast$1(hash, 4294967296);
      hash = (~hash >>> 0) + (hash << 15 >>> 0) & 4294967295;
      hash = ((hash ^ hash >>> 12) >>> 0) * 5 & 4294967295;
      hash = ((hash ^ hash >>> 4) >>> 0) * 2057 & 4294967295;
      return (hash ^ hash >>> 16) >>> 0;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (other === this)
        return true;
      if (other instanceof H.CapabilityImpl)
        return this._id === other._id;
      return false;
    }
  },
  _Serializer: {
    "^": "Object;_serializeSendPorts,serializedObjectIds",
    serialize$1: [function(x) {
      var t1, serializationId, serializeTearOff, t2, $name;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return x;
      t1 = this.serializedObjectIds;
      serializationId = t1.$index(0, x);
      if (serializationId != null)
        return ["ref", serializationId];
      t1.$indexSet(0, x, t1.__js_helper$_length);
      t1 = J.getInterceptor(x);
      if (!!t1.$isNativeByteBuffer)
        return ["buffer", x];
      if (!!t1.$isNativeTypedData)
        return ["typed", x];
      if (!!t1.$isJSIndexable)
        return this.serializeJSIndexable$1(x);
      if (!!t1.$isInternalMap) {
        serializeTearOff = this.get$serialize();
        t2 = x.get$keys();
        t2 = H.MappedIterable_MappedIterable(t2, serializeTearOff, H.getRuntimeTypeArgument(t2, "IterableBase", 0), null);
        t2 = P.List_List$from(t2, true, H.getRuntimeTypeArgument(t2, "IterableBase", 0));
        t1 = t1.get$values(x);
        t1 = H.MappedIterable_MappedIterable(t1, serializeTearOff, H.getRuntimeTypeArgument(t1, "IterableBase", 0), null);
        return ["map", t2, P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0))];
      }
      if (!!t1.$isJSObject)
        return this.serializeJSObject$1(x);
      if (!!t1.$isInterceptor)
        this.unsupported$1(x);
      if (!!t1.$isRawReceivePort)
        this.unsupported$2(x, "RawReceivePorts can't be transmitted:");
      if (!!t1.$is_NativeJsSendPort)
        return this.serializeJsSendPort$1(x);
      if (!!t1.$is_WorkerSendPort)
        return this.serializeWorkerSendPort$1(x);
      if (!!t1.$isClosure) {
        $name = x.$name;
        if ($name == null)
          this.unsupported$2(x, "Closures can't be transmitted:");
        return ["function", $name];
      }
      return ["dart", init.classIdExtractor(x), this.serializeArrayInPlace$1(init.classFieldsExtractor(x))];
    }, "call$1", "get$serialize", 2, 0, 1],
    unsupported$2: function(x, message) {
      throw H.wrapException(P.UnsupportedError$(H.S(message == null ? "Can't transmit:" : message) + " " + H.S(x)));
    },
    unsupported$1: function(x) {
      return this.unsupported$2(x, null);
    },
    serializeJSIndexable$1: function(indexable) {
      var serialized = this.serializeArray$1(indexable);
      if (!!indexable.fixed$length)
        return ["fixed", serialized];
      if (!indexable.fixed$length)
        return ["extendable", serialized];
      if (!indexable.immutable$list)
        return ["mutable", serialized];
      if (indexable.constructor === Array)
        return ["const", serialized];
      this.unsupported$2(indexable, "Can't serialize indexable: ");
    },
    serializeArray$1: function(x) {
      var serialized, i, t1;
      serialized = [];
      C.JSArray_methods.set$length(serialized, x.length);
      for (i = 0; i < x.length; ++i) {
        t1 = this.serialize$1(x[i]);
        if (i >= serialized.length)
          return H.ioore(serialized, i);
        serialized[i] = t1;
      }
      return serialized;
    },
    serializeArrayInPlace$1: function(x) {
      var i;
      for (i = 0; i < x.length; ++i)
        C.JSArray_methods.$indexSet(x, i, this.serialize$1(x[i]));
      return x;
    },
    serializeJSObject$1: function(x) {
      var keys, values, i, t1;
      if (!!x.constructor && x.constructor !== Object)
        this.unsupported$2(x, "Only plain JS Objects are supported:");
      keys = Object.keys(x);
      values = [];
      C.JSArray_methods.set$length(values, keys.length);
      for (i = 0; i < keys.length; ++i) {
        t1 = this.serialize$1(x[keys[i]]);
        if (i >= values.length)
          return H.ioore(values, i);
        values[i] = t1;
      }
      return ["js-object", keys, values];
    },
    serializeWorkerSendPort$1: function(x) {
      if (this._serializeSendPorts)
        return ["sendport", x._workerId, x._isolateId, x._receivePortId];
      return ["raw sendport", x];
    },
    serializeJsSendPort$1: function(x) {
      if (this._serializeSendPorts)
        return ["sendport", init.globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
      return ["raw sendport", x];
    }
  },
  _Deserializer: {
    "^": "Object;_adjustSendPorts,deserializedObjects",
    deserialize$1: [function(x) {
      var serializationId, t1, result, classId, fields, emptyInstance;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return x;
      if (typeof x !== "object" || x === null || x.constructor !== Array)
        throw H.wrapException(P.ArgumentError$("Bad serialized message: " + H.S(x)));
      switch (C.JSArray_methods.get$first(x)) {
        case "ref":
          if (1 >= x.length)
            return H.ioore(x, 1);
          serializationId = x[1];
          t1 = this.deserializedObjects;
          if (serializationId >>> 0 !== serializationId || serializationId >= t1.length)
            return H.ioore(t1, serializationId);
          return t1[serializationId];
        case "buffer":
          if (1 >= x.length)
            return H.ioore(x, 1);
          result = x[1];
          this.deserializedObjects.push(result);
          return result;
        case "typed":
          if (1 >= x.length)
            return H.ioore(x, 1);
          result = x[1];
          this.deserializedObjects.push(result);
          return result;
        case "fixed":
          if (1 >= x.length)
            return H.ioore(x, 1);
          result = x[1];
          this.deserializedObjects.push(result);
          t1 = this.deserializeArrayInPlace$1(result);
          t1.$builtinTypeInfo = [null];
          t1.fixed$length = Array;
          return t1;
        case "extendable":
          if (1 >= x.length)
            return H.ioore(x, 1);
          result = x[1];
          this.deserializedObjects.push(result);
          t1 = this.deserializeArrayInPlace$1(result);
          t1.$builtinTypeInfo = [null];
          return t1;
        case "mutable":
          if (1 >= x.length)
            return H.ioore(x, 1);
          result = x[1];
          this.deserializedObjects.push(result);
          return this.deserializeArrayInPlace$1(result);
        case "const":
          if (1 >= x.length)
            return H.ioore(x, 1);
          result = x[1];
          this.deserializedObjects.push(result);
          t1 = this.deserializeArrayInPlace$1(result);
          t1.$builtinTypeInfo = [null];
          t1.fixed$length = Array;
          return t1;
        case "map":
          return this.deserializeMap$1(x);
        case "sendport":
          return this.deserializeSendPort$1(x);
        case "raw sendport":
          if (1 >= x.length)
            return H.ioore(x, 1);
          result = x[1];
          this.deserializedObjects.push(result);
          return result;
        case "js-object":
          return this.deserializeJSObject$1(x);
        case "function":
          if (1 >= x.length)
            return H.ioore(x, 1);
          result = init.globalFunctions[x[1]]();
          this.deserializedObjects.push(result);
          return result;
        case "dart":
          t1 = x.length;
          if (1 >= t1)
            return H.ioore(x, 1);
          classId = x[1];
          if (2 >= t1)
            return H.ioore(x, 2);
          fields = x[2];
          emptyInstance = init.instanceFromClassId(classId);
          this.deserializedObjects.push(emptyInstance);
          this.deserializeArrayInPlace$1(fields);
          return init.initializeEmptyInstance(classId, emptyInstance, fields);
        default:
          throw H.wrapException("couldn't deserialize: " + H.S(x));
      }
    }, "call$1", "get$deserialize", 2, 0, 1],
    deserializeArrayInPlace$1: function(x) {
      var t1, i, t2;
      t1 = J.getInterceptor$asx(x);
      i = 0;
      while (true) {
        t2 = t1.get$length(x);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        t1.$indexSet(x, i, this.deserialize$1(t1.$index(x, i)));
        ++i;
      }
      return x;
    },
    deserializeMap$1: function(x) {
      var t1, keys, values, result, t2, i;
      t1 = x.length;
      if (1 >= t1)
        return H.ioore(x, 1);
      keys = x[1];
      if (2 >= t1)
        return H.ioore(x, 2);
      values = x[2];
      result = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      this.deserializedObjects.push(result);
      keys = J.map$1$ax(keys, this.get$deserialize()).toList$0(0);
      for (t1 = J.getInterceptor$asx(keys), t2 = J.getInterceptor$asx(values), i = 0; i < t1.get$length(keys); ++i) {
        if (i >= keys.length)
          return H.ioore(keys, i);
        result.$indexSet(0, keys[i], this.deserialize$1(t2.$index(values, i)));
      }
      return result;
    },
    deserializeSendPort$1: function(x) {
      var t1, managerId, isolateId, receivePortId, isolate, receivePort, result;
      t1 = x.length;
      if (1 >= t1)
        return H.ioore(x, 1);
      managerId = x[1];
      if (2 >= t1)
        return H.ioore(x, 2);
      isolateId = x[2];
      if (3 >= t1)
        return H.ioore(x, 3);
      receivePortId = x[3];
      if (J.$eq(managerId, init.globalState.currentManagerId)) {
        isolate = init.globalState.isolates.$index(0, isolateId);
        if (isolate == null)
          return;
        receivePort = isolate.lookup$1(receivePortId);
        if (receivePort == null)
          return;
        result = new H._NativeJsSendPort(receivePort, isolateId);
      } else
        result = new H._WorkerSendPort(managerId, receivePortId, isolateId);
      this.deserializedObjects.push(result);
      return result;
    },
    deserializeJSObject$1: function(x) {
      var t1, keys, values, o, t2, i, t3;
      t1 = x.length;
      if (1 >= t1)
        return H.ioore(x, 1);
      keys = x[1];
      if (2 >= t1)
        return H.ioore(x, 2);
      values = x[2];
      o = {};
      this.deserializedObjects.push(o);
      t1 = J.getInterceptor$asx(keys);
      t2 = J.getInterceptor$asx(values);
      i = 0;
      while (true) {
        t3 = t1.get$length(keys);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        o[t1.$index(keys, i)] = this.deserialize$1(t2.$index(values, i));
        ++i;
      }
      return o;
    }
  }
}],
["_js_helper", "dart:_js_helper", , H, {
  "^": "",
  isJsIndexable: function(object, record) {
    var result;
    if (record != null) {
      result = record.x;
      if (result != null)
        return result;
    }
    return !!J.getInterceptor(object).$isJavaScriptIndexingBehavior;
  },
  S: function(value) {
    var res;
    if (typeof value === "string")
      return value;
    if (typeof value === "number") {
      if (value !== 0)
        return "" + value;
    } else if (true === value)
      return "true";
    else if (false === value)
      return "false";
    else if (value == null)
      return "null";
    res = J.toString$0(value);
    if (typeof res !== "string")
      throw H.wrapException(P.ArgumentError$(value));
    return res;
  },
  Primitives_objectHashCode: function(object) {
    var hash = object.$identityHash;
    if (hash == null) {
      hash = Math.random() * 0x3fffffff | 0;
      object.$identityHash = hash;
    }
    return hash;
  },
  Primitives__throwFormatException: [function(string) {
    throw H.wrapException(P.FormatException$(string, null, null));
  }, "call$1", "Primitives__throwFormatException$closure", 2, 0, 6],
  Primitives_parseInt: function(source, radix, handleError) {
    var match, t1;
    handleError = H.Primitives__throwFormatException$closure();
    H.checkString(source);
    match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
    if (match != null) {
      t1 = match.length;
      if (2 >= t1)
        return H.ioore(match, 2);
      if (match[2] != null)
        return parseInt(source, 16);
      if (3 >= t1)
        return H.ioore(match, 3);
      if (match[3] != null)
        return parseInt(source, 10);
      return handleError.call$1(source);
    }
    if (match == null)
      return handleError.call$1(source);
    return parseInt(source, 10);
  },
  Primitives_parseDouble: function(source, handleError) {
    var result, trimmed;
    H.checkString(source);
    handleError = H.Primitives__throwFormatException$closure();
    if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
      return handleError.call$1(source);
    result = parseFloat(source);
    if (isNaN(result)) {
      trimmed = J.trim$0$s(source);
      if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN")
        return result;
      return handleError.call$1(source);
    }
    return result;
  },
  Primitives_objectTypeName: function(object) {
    var $name, decompiled;
    $name = C.JS_CONST_8ZY(J.getInterceptor(object));
    if ($name === "Object") {
      decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
      if (typeof decompiled === "string")
        $name = /^\w+$/.test(decompiled) ? decompiled : $name;
    }
    if ($name.length > 1 && C.JSString_methods.codeUnitAt$1($name, 0) === 36)
      $name = C.JSString_methods.substring$1($name, 1);
    return ($name + H.joinArguments(H.getRuntimeTypeInfo(object), 0, null)).replace(/[^<,> ]+/g, function(m) {
      return init.mangledGlobalNames[m] || m;
    });
  },
  Primitives_objectToString: function(object) {
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  },
  Primitives_getProperty: function(object, key) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(P.ArgumentError$(object));
    return object[key];
  },
  Primitives_setProperty: function(object, key, value) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(P.ArgumentError$(object));
    object[key] = value;
  },
  iae: function(argument) {
    throw H.wrapException(P.ArgumentError$(argument));
  },
  ioore: function(receiver, index) {
    if (receiver == null)
      J.get$length$asx(receiver);
    if (typeof index !== "number" || Math.floor(index) !== index)
      H.iae(index);
    throw H.wrapException(P.RangeError$value(index, null, null));
  },
  checkNum: function(value) {
    if (typeof value !== "number")
      throw H.wrapException(P.ArgumentError$(value));
    return value;
  },
  checkString: function(value) {
    if (typeof value !== "string")
      throw H.wrapException(P.ArgumentError$(value));
    return value;
  },
  wrapException: function(ex) {
    var wrapper;
    if (ex == null)
      ex = new P.NullThrownError();
    wrapper = new Error();
    wrapper.dartException = ex;
    if ("defineProperty" in Object) {
      Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
      wrapper.name = "";
    } else
      wrapper.toString = H.toStringWrapper;
    return wrapper;
  },
  toStringWrapper: function() {
    return J.toString$0(this.dartException);
  },
  throwExpression: function(ex) {
    throw H.wrapException(ex);
  },
  unwrapException: function(ex) {
    var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
    t1 = new H.unwrapException_saveStackTrace(ex);
    if (ex == null)
      return;
    if (typeof ex !== "object")
      return ex;
    if ("dartException" in ex)
      return t1.call$1(ex.dartException);
    else if (!("message" in ex))
      return ex;
    message = ex.message;
    if ("number" in ex && typeof ex.number == "number") {
      number = ex.number;
      ieErrorCode = number & 65535;
      if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
        switch (ieErrorCode) {
          case 438:
            return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
          case 445:
          case 5007:
            t2 = H.S(message) + " (Error " + ieErrorCode + ")";
            return t1.call$1(new H.NullError(t2, null));
        }
    }
    if (ex instanceof TypeError) {
      t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
      t3 = $.get$TypeErrorDecoder_notClosurePattern();
      t4 = $.get$TypeErrorDecoder_nullCallPattern();
      nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
      t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
      t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
      t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
      $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
      t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
      t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
      match = t2.matchTypeError$1(message);
      if (match != null)
        return t1.call$1(H.JsNoSuchMethodError$(message, match));
      else {
        match = t3.matchTypeError$1(message);
        if (match != null) {
          match.method = "call";
          return t1.call$1(H.JsNoSuchMethodError$(message, match));
        } else {
          match = t4.matchTypeError$1(message);
          if (match == null) {
            match = nullLiteralCall.matchTypeError$1(message);
            if (match == null) {
              match = t5.matchTypeError$1(message);
              if (match == null) {
                match = t6.matchTypeError$1(message);
                if (match == null) {
                  match = t7.matchTypeError$1(message);
                  if (match == null) {
                    match = nullLiteralCall.matchTypeError$1(message);
                    if (match == null) {
                      match = t8.matchTypeError$1(message);
                      if (match == null) {
                        match = t9.matchTypeError$1(message);
                        t2 = match != null;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
          if (t2) {
            t2 = match == null ? null : match.method;
            return t1.call$1(new H.NullError(message, t2));
          }
        }
      }
      t2 = typeof message === "string" ? message : "";
      return t1.call$1(new H.UnknownJsTypeError(t2));
    }
    if (ex instanceof RangeError) {
      if (typeof message === "string" && message.indexOf("call stack") !== -1)
        return new P.StackOverflowError();
      return t1.call$1(new P.ArgumentError(false, null, null, null));
    }
    if (typeof InternalError == "function" && ex instanceof InternalError)
      if (typeof message === "string" && message === "too much recursion")
        return new P.StackOverflowError();
    return ex;
  },
  getTraceFromException: function(exception) {
    return new H._StackTrace(exception, null);
  },
  objectHashCode: function(object) {
    if (object == null || typeof object != 'object')
      return J.get$hashCode$(object);
    else
      return H.Primitives_objectHashCode(object);
  },
  fillLiteralMap: function(keyValuePairs, result) {
    var $length, index, index0, index1;
    $length = keyValuePairs.length;
    for (index = 0; index < $length; index = index1) {
      index0 = index + 1;
      index1 = index0 + 1;
      result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
    }
    return result;
  },
  invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
    var t1 = J.getInterceptor(numberOfArguments);
    if (t1.$eq(numberOfArguments, 0))
      return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
    else if (t1.$eq(numberOfArguments, 1))
      return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
    else if (t1.$eq(numberOfArguments, 2))
      return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
    else if (t1.$eq(numberOfArguments, 3))
      return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
    else if (t1.$eq(numberOfArguments, 4))
      return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
    else
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
  },
  convertDartClosureToJS: function(closure, arity) {
    var $function;
    if (closure == null)
      return;
    $function = closure.$identity;
    if (!!$function)
      return $function;
    $function = function(closure, arity, context, invoke) {
      return function(a1, a2, a3, a4) {
        return invoke(closure, context, arity, a1, a2, a3, a4);
      };
    }(closure, arity, init.globalState.currentContext, H.invokeClosure);
    closure.$identity = $function;
    return $function;
  },
  Closure_fromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, propertyName) {
    var $function, callName, functionType, $prototype, $constructor, t1, isIntercepted, trampoline, signatureFunction, getReceiver, i, stub, stubCallName, t2;
    $function = functions[0];
    $function.$stubName;
    callName = $function.$callName;
    if (!!J.getInterceptor(reflectionInfo).$isList) {
      $function.$reflectionInfo = reflectionInfo;
      functionType = H.ReflectionInfo_ReflectionInfo($function).functionType;
    } else
      functionType = reflectionInfo;
    $prototype = isStatic ? Object.create(new H.TearOffClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, null).constructor.prototype);
    $prototype.$initialize = $prototype.constructor;
    if (isStatic)
      $constructor = function() {
        this.$initialize();
      };
    else {
      t1 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t1, 1);
      t1 = new Function("a", "b", "c", "d", "this.$initialize(a,b,c,d);" + t1);
      $constructor = t1;
    }
    $prototype.constructor = $constructor;
    $constructor.prototype = $prototype;
    t1 = !isStatic;
    if (t1) {
      isIntercepted = jsArguments.length == 1 && true;
      trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
      trampoline.$reflectionInfo = reflectionInfo;
    } else {
      $prototype.$name = propertyName;
      trampoline = $function;
      isIntercepted = false;
    }
    if (typeof functionType == "number")
      signatureFunction = function(s) {
        return function() {
          return init.metadata[s];
        };
      }(functionType);
    else if (t1 && typeof functionType == "function") {
      getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
      signatureFunction = function(f, r) {
        return function() {
          return f.apply({$receiver: r(this)}, arguments);
        };
      }(functionType, getReceiver);
    } else
      throw H.wrapException("Error in reflectionInfo.");
    $prototype.$signature = signatureFunction;
    $prototype[callName] = trampoline;
    for (t1 = functions.length, i = 1; i < t1; ++i) {
      stub = functions[i];
      stubCallName = stub.$callName;
      if (stubCallName != null) {
        t2 = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
        $prototype[stubCallName] = t2;
      }
    }
    $prototype["call*"] = trampoline;
    $prototype.$requiredArgCount = $function.$requiredArgCount;
    $prototype.$defaultValues = $function.$defaultValues;
    return $constructor;
  },
  Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
    var getSelf = H.BoundClosure_selfOf;
    switch (isSuperCall ? -1 : arity) {
      case 0:
        return function(n, S) {
          return function() {
            return S(this)[n]();
          };
        }(stubName, getSelf);
      case 1:
        return function(n, S) {
          return function(a) {
            return S(this)[n](a);
          };
        }(stubName, getSelf);
      case 2:
        return function(n, S) {
          return function(a, b) {
            return S(this)[n](a, b);
          };
        }(stubName, getSelf);
      case 3:
        return function(n, S) {
          return function(a, b, c) {
            return S(this)[n](a, b, c);
          };
        }(stubName, getSelf);
      case 4:
        return function(n, S) {
          return function(a, b, c, d) {
            return S(this)[n](a, b, c, d);
          };
        }(stubName, getSelf);
      case 5:
        return function(n, S) {
          return function(a, b, c, d, e) {
            return S(this)[n](a, b, c, d, e);
          };
        }(stubName, getSelf);
      default:
        return function(f, s) {
          return function() {
            return f.apply(s(this), arguments);
          };
        }($function, getSelf);
    }
  },
  Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
    var stubName, arity, lookedUpFunction, t1, t2, $arguments;
    if (isIntercepted)
      return H.Closure_forwardInterceptedCallTo(receiver, $function);
    stubName = $function.$stubName;
    arity = $function.length;
    lookedUpFunction = receiver[stubName];
    t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
    t2 = !t1 || arity >= 27;
    if (t2)
      return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
    if (arity === 0) {
      t1 = $.BoundClosure_selfFieldNameCache;
      if (t1 == null) {
        t1 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t1;
      }
      t1 = "return function(){return this." + H.S(t1) + "." + H.S(stubName) + "();";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    }
    $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
    t1 = "return function(" + $arguments + "){return this.";
    t2 = $.BoundClosure_selfFieldNameCache;
    if (t2 == null) {
      t2 = H.BoundClosure_computeFieldNamed("self");
      $.BoundClosure_selfFieldNameCache = t2;
    }
    t2 = t1 + H.S(t2) + "." + H.S(stubName) + "(" + $arguments + ");";
    t1 = $.Closure_functionCounter;
    $.Closure_functionCounter = J.$add$ns(t1, 1);
    return new Function(t2 + H.S(t1) + "}")();
  },
  Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
    var getSelf, getReceiver;
    getSelf = H.BoundClosure_selfOf;
    getReceiver = H.BoundClosure_receiverOf;
    switch (isSuperCall ? -1 : arity) {
      case 0:
        throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
      case 1:
        return function(n, s, r) {
          return function() {
            return s(this)[n](r(this));
          };
        }($name, getSelf, getReceiver);
      case 2:
        return function(n, s, r) {
          return function(a) {
            return s(this)[n](r(this), a);
          };
        }($name, getSelf, getReceiver);
      case 3:
        return function(n, s, r) {
          return function(a, b) {
            return s(this)[n](r(this), a, b);
          };
        }($name, getSelf, getReceiver);
      case 4:
        return function(n, s, r) {
          return function(a, b, c) {
            return s(this)[n](r(this), a, b, c);
          };
        }($name, getSelf, getReceiver);
      case 5:
        return function(n, s, r) {
          return function(a, b, c, d) {
            return s(this)[n](r(this), a, b, c, d);
          };
        }($name, getSelf, getReceiver);
      case 6:
        return function(n, s, r) {
          return function(a, b, c, d, e) {
            return s(this)[n](r(this), a, b, c, d, e);
          };
        }($name, getSelf, getReceiver);
      default:
        return function(f, s, r, a) {
          return function() {
            a = [r(this)];
            Array.prototype.push.apply(a, arguments);
            return f.apply(s(this), a);
          };
        }($function, getSelf, getReceiver);
    }
  },
  Closure_forwardInterceptedCallTo: function(receiver, $function) {
    var selfField, t1, stubName, arity, lookedUpFunction, t2, t3, $arguments;
    selfField = H.BoundClosure_selfFieldName();
    t1 = $.BoundClosure_receiverFieldNameCache;
    if (t1 == null) {
      t1 = H.BoundClosure_computeFieldNamed("receiver");
      $.BoundClosure_receiverFieldNameCache = t1;
    }
    stubName = $function.$stubName;
    arity = $function.length;
    lookedUpFunction = receiver[stubName];
    t2 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
    t3 = !t2 || arity >= 28;
    if (t3)
      return H.Closure_cspForwardInterceptedCall(arity, !t2, stubName, $function);
    if (arity === 1) {
      t1 = "return function(){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ");";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    }
    $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
    t1 = "return function(" + $arguments + "){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ", " + $arguments + ");";
    t2 = $.Closure_functionCounter;
    $.Closure_functionCounter = J.$add$ns(t2, 1);
    return new Function(t1 + H.S(t2) + "}")();
  },
  closureFromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, $name) {
    var t1;
    functions.fixed$length = Array;
    if (!!J.getInterceptor(reflectionInfo).$isList) {
      reflectionInfo.fixed$length = Array;
      t1 = reflectionInfo;
    } else
      t1 = reflectionInfo;
    return H.Closure_fromTearOff(receiver, functions, t1, !!isStatic, jsArguments, $name);
  },
  propertyTypeCastError: function(value, property) {
    var t1 = J.getInterceptor$asx(property);
    throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
  },
  interceptedTypeCast: function(value, property) {
    var t1;
    if (value != null)
      t1 = typeof value === "object" && J.getInterceptor(value)[property];
    else
      t1 = true;
    if (t1)
      return value;
    H.propertyTypeCastError(value, property);
  },
  throwCyclicInit: function(staticName) {
    throw H.wrapException(new P.CyclicInitializationError("Cyclic initialization for static " + H.S(staticName)));
  },
  buildFunctionType: function(returnType, parameterTypes, optionalParameterTypes) {
    return new H.RuntimeFunctionType(returnType, parameterTypes, optionalParameterTypes, null);
  },
  getDynamicRuntimeType: function() {
    return C.C_DynamicRuntimeType;
  },
  random64: function() {
    return (Math.random() * 0x100000000 >>> 0) + (Math.random() * 0x100000000 >>> 0) * 4294967296;
  },
  setRuntimeTypeInfo: function(target, typeInfo) {
    if (target != null)
      target.$builtinTypeInfo = typeInfo;
    return target;
  },
  getRuntimeTypeInfo: function(target) {
    if (target == null)
      return;
    return target.$builtinTypeInfo;
  },
  getRuntimeTypeArguments: function(target, substitutionName) {
    return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
  },
  getRuntimeTypeArgument: function(target, substitutionName, index) {
    var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
    return $arguments == null ? null : $arguments[index];
  },
  getTypeArgumentByIndex: function(target, index) {
    var rti = H.getRuntimeTypeInfo(target);
    return rti == null ? null : rti[index];
  },
  runtimeTypeToString: function(type, onTypeVariable) {
    if (type == null)
      return "dynamic";
    else if (typeof type === "object" && type !== null && type.constructor === Array)
      return type[0].builtin$cls + H.joinArguments(type, 1, onTypeVariable);
    else if (typeof type == "function")
      return type.builtin$cls;
    else if (typeof type === "number" && Math.floor(type) === type)
      return C.JSInt_methods.toString$0(type);
    else
      return;
  },
  joinArguments: function(types, startIndex, onTypeVariable) {
    var buffer, index, firstArgument, allDynamic, t1, argument;
    if (types == null)
      return "";
    buffer = new P.StringBuffer("");
    for (index = startIndex, firstArgument = true, allDynamic = true, t1 = ""; index < types.length; ++index) {
      if (firstArgument)
        firstArgument = false;
      else
        buffer._contents = t1 + ", ";
      argument = types[index];
      if (argument != null)
        allDynamic = false;
      t1 = buffer._contents += H.S(H.runtimeTypeToString(argument, onTypeVariable));
    }
    return allDynamic ? "" : "<" + H.S(buffer) + ">";
  },
  substitute: function(substitution, $arguments) {
    if (typeof substitution == "function") {
      substitution = H.invokeOn(substitution, null, $arguments);
      if (substitution == null || typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
        $arguments = substitution;
      else if (typeof substitution == "function")
        $arguments = H.invokeOn(substitution, null, $arguments);
    }
    return $arguments;
  },
  areSubtypes: function(s, t) {
    var len, i;
    if (s == null || t == null)
      return true;
    len = s.length;
    for (i = 0; i < len; ++i)
      if (!H.isSubtype(s[i], t[i]))
        return false;
    return true;
  },
  computeSignature: function(signature, context, contextName) {
    return H.invokeOn(signature, context, H.getRuntimeTypeArguments(context, contextName));
  },
  isSubtype: function(s, t) {
    var t1, typeOfS, t2, typeOfT, $name, test, typeOfSPrototype, substitution;
    if (s === t)
      return true;
    if (s == null || t == null)
      return true;
    if ("func" in t)
      return H.isFunctionSubtype(s, t);
    if ("func" in s)
      return t.builtin$cls === "Function";
    t1 = typeof s === "object" && s !== null && s.constructor === Array;
    typeOfS = t1 ? s[0] : s;
    t2 = typeof t === "object" && t !== null && t.constructor === Array;
    typeOfT = t2 ? t[0] : t;
    $name = H.runtimeTypeToString(typeOfT, null);
    if (typeOfT !== typeOfS) {
      test = "$is" + H.S($name);
      typeOfSPrototype = typeOfS.prototype;
      if (!(test in typeOfSPrototype))
        return false;
      substitution = typeOfSPrototype["$as" + H.S(H.runtimeTypeToString(typeOfT, null))];
    } else
      substitution = null;
    if (!t1 && substitution == null || !t2)
      return true;
    t1 = t1 ? s.slice(1) : null;
    t2 = t2 ? t.slice(1) : null;
    return H.areSubtypes(H.substitute(substitution, t1), t2);
  },
  areAssignable: function(s, t, allowShorter) {
    var t1, sLength, tLength, i, t2;
    t1 = t == null;
    if (t1 && s == null)
      return true;
    if (t1)
      return allowShorter;
    if (s == null)
      return false;
    sLength = s.length;
    tLength = t.length;
    if (allowShorter) {
      if (sLength < tLength)
        return false;
    } else if (sLength !== tLength)
      return false;
    for (i = 0; i < tLength; ++i) {
      t1 = s[i];
      t2 = t[i];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
    return true;
  },
  areAssignableMaps: function(s, t) {
    var t1, names, i, $name, tType, sType;
    if (t == null)
      return true;
    if (s == null)
      return false;
    t1 = Object.getOwnPropertyNames(t);
    t1.fixed$length = Array;
    names = t1;
    for (t1 = names.length, i = 0; i < t1; ++i) {
      $name = names[i];
      if (!Object.hasOwnProperty.call(s, $name))
        return false;
      tType = t[$name];
      sType = s[$name];
      if (!(H.isSubtype(tType, sType) || H.isSubtype(sType, tType)))
        return false;
    }
    return true;
  },
  isFunctionSubtype: function(s, t) {
    var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, t1, t2, tPos, sPos;
    if (!("func" in s))
      return false;
    if ("void" in s) {
      if (!("void" in t) && "ret" in t)
        return false;
    } else if (!("void" in t)) {
      sReturnType = s.ret;
      tReturnType = t.ret;
      if (!(H.isSubtype(sReturnType, tReturnType) || H.isSubtype(tReturnType, sReturnType)))
        return false;
    }
    sParameterTypes = s.args;
    tParameterTypes = t.args;
    sOptionalParameterTypes = s.opt;
    tOptionalParameterTypes = t.opt;
    sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
    tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
    sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
    tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
    if (sParametersLen > tParametersLen)
      return false;
    if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
      return false;
    if (sParametersLen === tParametersLen) {
      if (!H.areAssignable(sParameterTypes, tParameterTypes, false))
        return false;
      if (!H.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
        return false;
    } else {
      for (pos = 0; pos < sParametersLen; ++pos) {
        t1 = sParameterTypes[pos];
        t2 = tParameterTypes[pos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tOptionalParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
    }
    return H.areAssignableMaps(s.named, t.named);
  },
  invokeOn: function($function, receiver, $arguments) {
    return $function.apply(receiver, $arguments);
  },
  toStringForNativeObject: function(obj) {
    var t1 = $.getTagFunction;
    return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
  },
  hashCodeForNativeObject: function(object) {
    return H.Primitives_objectHashCode(object);
  },
  defineProperty: function(obj, property, value) {
    Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
  },
  lookupAndCacheInterceptor: function(obj) {
    var tag, record, interceptor, interceptorClass, mark, t1;
    tag = $.getTagFunction.call$1(obj);
    record = $.dispatchRecordsForInstanceTags[tag];
    if (record != null) {
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    interceptor = $.interceptorsForUncacheableTags[tag];
    if (interceptor != null)
      return interceptor;
    interceptorClass = init.interceptorsByTag[tag];
    if (interceptorClass == null) {
      tag = $.alternateTagFunction.call$2(obj, tag);
      if (tag != null) {
        record = $.dispatchRecordsForInstanceTags[tag];
        if (record != null) {
          Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
          return record.i;
        }
        interceptor = $.interceptorsForUncacheableTags[tag];
        if (interceptor != null)
          return interceptor;
        interceptorClass = init.interceptorsByTag[tag];
      }
    }
    if (interceptorClass == null)
      return;
    interceptor = interceptorClass.prototype;
    mark = tag[0];
    if (mark === "!") {
      record = H.makeLeafDispatchRecord(interceptor);
      $.dispatchRecordsForInstanceTags[tag] = record;
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    if (mark === "~") {
      $.interceptorsForUncacheableTags[tag] = interceptor;
      return interceptor;
    }
    if (mark === "-") {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    }
    if (mark === "+")
      return H.patchInteriorProto(obj, interceptor);
    if (mark === "*")
      throw H.wrapException(P.UnimplementedError$(tag));
    if (init.leafTags[tag] === true) {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    } else
      return H.patchInteriorProto(obj, interceptor);
  },
  patchInteriorProto: function(obj, interceptor) {
    var proto = Object.getPrototypeOf(obj);
    Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
    return interceptor;
  },
  makeLeafDispatchRecord: function(interceptor) {
    return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  },
  makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
    var interceptor = interceptorClass.prototype;
    if (init.leafTags[tag] === true)
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    else
      return J.makeDispatchRecord(interceptor, proto, null, null);
  },
  initNativeDispatch: function() {
    if (true === $.initNativeDispatchFlag)
      return;
    $.initNativeDispatchFlag = true;
    H.initNativeDispatchContinue();
  },
  initNativeDispatchContinue: function() {
    var map, tags, fun, i, tag, proto, record, interceptorClass;
    $.dispatchRecordsForInstanceTags = Object.create(null);
    $.interceptorsForUncacheableTags = Object.create(null);
    H.initHooks();
    map = init.interceptorsByTag;
    tags = Object.getOwnPropertyNames(map);
    if (typeof window != "undefined") {
      window;
      fun = function() {
      };
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        proto = $.prototypeForTagFunction.call$1(tag);
        if (proto != null) {
          record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
          if (record != null) {
            Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            fun.prototype = proto;
          }
        }
      }
    }
    for (i = 0; i < tags.length; ++i) {
      tag = tags[i];
      if (/^[A-Za-z_]/.test(tag)) {
        interceptorClass = map[tag];
        map["!" + tag] = interceptorClass;
        map["~" + tag] = interceptorClass;
        map["-" + tag] = interceptorClass;
        map["+" + tag] = interceptorClass;
        map["*" + tag] = interceptorClass;
      }
    }
  },
  initHooks: function() {
    var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
    hooks = C.JS_CONST_gkc();
    hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_rr7, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_gkc0, H.applyHooksTransformer(C.JS_CONST_4hp, H.applyHooksTransformer(C.JS_CONST_QJm(C.JS_CONST_8ZY), hooks)))))));
    if (typeof dartNativeDispatchHooksTransformer != "undefined") {
      transformers = dartNativeDispatchHooksTransformer;
      if (typeof transformers == "function")
        transformers = [transformers];
      if (transformers.constructor == Array)
        for (i = 0; i < transformers.length; ++i) {
          transformer = transformers[i];
          if (typeof transformer == "function")
            hooks = transformer(hooks) || hooks;
        }
    }
    getTag = hooks.getTag;
    getUnknownTag = hooks.getUnknownTag;
    prototypeForTag = hooks.prototypeForTag;
    $.getTagFunction = new H.initHooks_closure(getTag);
    $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
    $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
  },
  applyHooksTransformer: function(transformer, hooks) {
    return transformer(hooks) || hooks;
  },
  stringContainsUnchecked: function(receiver, other, startIndex) {
    return C.JSString_methods.indexOf$2(receiver, other, startIndex) !== -1;
  },
  ReflectionInfo: {
    "^": "Object;jsFunction,data,isAccessor,requiredParameterCount,optionalParameterCount,areOptionalParametersNamed,functionType,cachedSortedIndices",
    static: {ReflectionInfo_ReflectionInfo: function(jsFunction) {
        var data, requiredParametersInfo, optionalParametersInfo;
        data = jsFunction.$reflectionInfo;
        if (data == null)
          return;
        data.fixed$length = Array;
        data = data;
        requiredParametersInfo = data[0];
        optionalParametersInfo = data[1];
        return new H.ReflectionInfo(jsFunction, data, (requiredParametersInfo & 1) === 1, requiredParametersInfo >> 1, optionalParametersInfo >> 1, (optionalParametersInfo & 1) === 1, data[2], null);
      }}
  },
  TypeErrorDecoder: {
    "^": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
    matchTypeError$1: function(message) {
      var match, result, t1;
      match = new RegExp(this._pattern).exec(message);
      if (match == null)
        return;
      result = Object.create(null);
      t1 = this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    },
    static: {TypeErrorDecoder_extractPattern: function(message) {
        var match, $arguments, argumentsExpr, expr, method, receiver;
        message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
        match = message.match(/\\\$[a-zA-Z]+\\\$/g);
        if (match == null)
          match = [];
        $arguments = match.indexOf("\\$arguments\\$");
        argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
        expr = match.indexOf("\\$expr\\$");
        method = match.indexOf("\\$method\\$");
        receiver = match.indexOf("\\$receiver\\$");
        return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
      }, TypeErrorDecoder_provokeCallErrorOn: function(expression) {
        return function($expr$) {
          var $argumentsExpr$ = '$arguments$';
          try {
            $expr$.$method$($argumentsExpr$);
          } catch (e) {
            return e.message;
          }
        }(expression);
      }, TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
        return function($expr$) {
          try {
            $expr$.$method$;
          } catch (e) {
            return e.message;
          }
        }(expression);
      }}
  },
  NullError: {
    "^": "Error;_message,_method",
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NullError: " + H.S(this._message);
      return "NullError: Cannot call \"" + H.S(t1) + "\" on null";
    }
  },
  JsNoSuchMethodError: {
    "^": "Error;_message,_method,_receiver",
    toString$0: function(_) {
      var t1, t2;
      t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this._message);
      t2 = this._receiver;
      if (t2 == null)
        return "NoSuchMethodError: Cannot call \"" + H.S(t1) + "\" (" + H.S(this._message) + ")";
      return "NoSuchMethodError: Cannot call \"" + H.S(t1) + "\" on \"" + H.S(t2) + "\" (" + H.S(this._message) + ")";
    },
    static: {JsNoSuchMethodError$: function(_message, match) {
        var t1, t2;
        t1 = match == null;
        t2 = t1 ? null : match.method;
        t1 = t1 ? null : match.receiver;
        return new H.JsNoSuchMethodError(_message, t2, t1);
      }}
  },
  UnknownJsTypeError: {
    "^": "Error;_message",
    toString$0: function(_) {
      var t1 = this._message;
      return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
    }
  },
  unwrapException_saveStackTrace: {
    "^": "Closure:1;ex_0",
    call$1: function(error) {
      if (!!J.getInterceptor(error).$isError)
        if (error.$thrownJsError == null)
          error.$thrownJsError = this.ex_0;
      return error;
    }
  },
  _StackTrace: {
    "^": "Object;_exception,_trace",
    toString$0: function(_) {
      var t1, trace;
      t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      t1 = trace == null ? "" : trace;
      this._trace = t1;
      return t1;
    }
  },
  invokeClosure_closure: {
    "^": "Closure:4;closure_0",
    call$0: function() {
      return this.closure_0.call$0();
    }
  },
  invokeClosure_closure0: {
    "^": "Closure:4;closure_1,arg1_2",
    call$0: function() {
      return this.closure_1.call$1(this.arg1_2);
    }
  },
  invokeClosure_closure1: {
    "^": "Closure:4;closure_3,arg1_4,arg2_5",
    call$0: function() {
      return this.closure_3.call$2(this.arg1_4, this.arg2_5);
    }
  },
  invokeClosure_closure2: {
    "^": "Closure:4;closure_6,arg1_7,arg2_8,arg3_9",
    call$0: function() {
      return this.closure_6.call$3(this.arg1_7, this.arg2_8, this.arg3_9);
    }
  },
  invokeClosure_closure3: {
    "^": "Closure:4;closure_10,arg1_11,arg2_12,arg3_13,arg4_14",
    call$0: function() {
      return this.closure_10.call$4(this.arg1_11, this.arg2_12, this.arg3_13, this.arg4_14);
    }
  },
  Closure: {
    "^": "Object;",
    toString$0: function(_) {
      return "Closure";
    },
    get$$call: function() {
      return this;
    },
    get$$call: function() {
      return this;
    }
  },
  TearOffClosure: {
    "^": "Closure;"
  },
  BoundClosure: {
    "^": "TearOffClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof H.BoundClosure))
        return false;
      return this._self === other._self && this.__js_helper$_target === other.__js_helper$_target && this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var t1, receiverHashCode;
      t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      return (receiverHashCode ^ H.Primitives_objectHashCode(this.__js_helper$_target)) >>> 0;
    },
    static: {BoundClosure_selfOf: function(closure) {
        return closure._self;
      }, BoundClosure_receiverOf: function(closure) {
        return closure._receiver;
      }, BoundClosure_selfFieldName: function() {
        var t1 = $.BoundClosure_selfFieldNameCache;
        if (t1 == null) {
          t1 = H.BoundClosure_computeFieldNamed("self");
          $.BoundClosure_selfFieldNameCache = t1;
        }
        return t1;
      }, BoundClosure_computeFieldNamed: function(fieldName) {
        var template, t1, names, i, $name;
        template = new H.BoundClosure("self", "target", "receiver", "name");
        t1 = Object.getOwnPropertyNames(template);
        t1.fixed$length = Array;
        names = t1;
        for (t1 = names.length, i = 0; i < t1; ++i) {
          $name = names[i];
          if (template[$name] === fieldName)
            return $name;
        }
      }}
  },
  CastErrorImplementation: {
    "^": "Error;message",
    toString$0: function(_) {
      return this.message;
    },
    static: {CastErrorImplementation$: function(actualType, expectedType) {
        return new H.CastErrorImplementation("CastError: Casting value of type " + H.S(actualType) + " to incompatible type " + H.S(expectedType));
      }}
  },
  RuntimeError: {
    "^": "Error;message",
    toString$0: function(_) {
      return "RuntimeError: " + H.S(this.message);
    },
    static: {RuntimeError$: function(message) {
        return new H.RuntimeError(message);
      }}
  },
  RuntimeType: {
    "^": "Object;"
  },
  RuntimeFunctionType: {
    "^": "RuntimeType;returnType,parameterTypes,optionalParameterTypes,namedParameters",
    _isTest$1: function(expression) {
      var functionTypeObject = this._extractFunctionTypeObjectFrom$1(expression);
      return functionTypeObject == null ? false : H.isFunctionSubtype(functionTypeObject, this.toRti$0());
    },
    _extractFunctionTypeObjectFrom$1: function(o) {
      var interceptor = J.getInterceptor(o);
      return "$signature" in interceptor ? interceptor.$signature() : null;
    },
    toRti$0: function() {
      var result, t1, t2, namedRti, keys, i, $name;
      result = {func: "dynafunc"};
      t1 = this.returnType;
      t2 = J.getInterceptor(t1);
      if (!!t2.$isVoidRuntimeType)
        result.void = true;
      else if (!t2.$isDynamicRuntimeType)
        result.ret = t1.toRti$0();
      t1 = this.parameterTypes;
      if (t1 != null && t1.length !== 0)
        result.args = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0)
        result.opt = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.namedParameters;
      if (t1 != null) {
        namedRti = Object.create(null);
        keys = H.extractKeys(t1);
        for (t2 = keys.length, i = 0; i < t2; ++i) {
          $name = keys[i];
          namedRti[$name] = t1[$name].toRti$0();
        }
        result.named = namedRti;
      }
      return result;
    },
    toString$0: function(_) {
      var t1, t2, result, needsComma, i, type, keys, $name;
      t1 = this.parameterTypes;
      if (t1 != null)
        for (t2 = t1.length, result = "(", needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
      else {
        result = "(";
        needsComma = false;
      }
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0) {
        result = (needsComma ? result + ", " : result) + "[";
        for (t2 = t1.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
        result += "]";
      } else {
        t1 = this.namedParameters;
        if (t1 != null) {
          result = (needsComma ? result + ", " : result) + "{";
          keys = H.extractKeys(t1);
          for (t2 = keys.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
            $name = keys[i];
            if (needsComma)
              result += ", ";
            result += H.S(t1[$name].toRti$0()) + " " + $name;
          }
          result += "}";
        }
      }
      return result + (") -> " + H.S(this.returnType));
    },
    static: {RuntimeFunctionType_listToRti: function(list) {
        var result, t1, i;
        list = list;
        result = [];
        for (t1 = list.length, i = 0; i < t1; ++i)
          result.push(list[i].toRti$0());
        return result;
      }}
  },
  DynamicRuntimeType: {
    "^": "RuntimeType;",
    toString$0: function(_) {
      return "dynamic";
    },
    toRti$0: function() {
      return;
    }
  },
  JsLinkedHashMap: {
    "^": "Object;__js_helper$_length,__js_helper$_strings,__js_helper$_nums,__js_helper$_rest,__js_helper$_first,__js_helper$_last,__js_helper$_modifications",
    get$length: function(_) {
      return this.__js_helper$_length;
    },
    get$keys: function() {
      return H.setRuntimeTypeInfo(new H.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      return H.MappedIterable_MappedIterable(H.setRuntimeTypeInfo(new H.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]), new H.JsLinkedHashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    containsKey$1: function(key) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this.__js_helper$_strings;
        if (strings == null)
          return false;
        return strings[key] != null;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this.__js_helper$_nums;
        if (nums == null)
          return false;
        return nums[key] != null;
      } else
        return this.internalContainsKey$1(key);
    },
    internalContainsKey$1: function(key) {
      var rest = this.__js_helper$_rest;
      if (rest == null)
        return false;
      return this.internalFindBucketIndex$2(rest[this.internalComputeHashCode$1(key)], key) >= 0;
    },
    addAll$1: function(_, other) {
      other.forEach$1(0, new H.JsLinkedHashMap_addAll_closure(this));
    },
    $index: function(_, key) {
      var strings, cell, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this.__js_helper$_strings;
        if (strings == null)
          return;
        cell = strings[key];
        return cell == null ? null : cell.get$hashMapCellValue();
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this.__js_helper$_nums;
        if (nums == null)
          return;
        cell = nums[key];
        return cell == null ? null : cell.get$hashMapCellValue();
      } else
        return this.internalGet$1(key);
    },
    internalGet$1: function(key) {
      var rest, bucket, index;
      rest = this.__js_helper$_rest;
      if (rest == null)
        return;
      bucket = rest[this.internalComputeHashCode$1(key)];
      index = this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$hashMapCellValue();
    },
    $indexSet: function(_, key, value) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this.__js_helper$_strings;
        if (strings == null) {
          strings = H.JsLinkedHashMap__newHashTable();
          this.__js_helper$_strings = strings;
        }
        this.__js_helper$_addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this.__js_helper$_nums;
        if (nums == null) {
          nums = H.JsLinkedHashMap__newHashTable();
          this.__js_helper$_nums = nums;
        }
        this.__js_helper$_addHashTableEntry$3(nums, key, value);
      } else
        this.internalSet$2(key, value);
    },
    internalSet$2: function(key, value) {
      var rest, hash, bucket, index;
      rest = this.__js_helper$_rest;
      if (rest == null) {
        rest = H.JsLinkedHashMap__newHashTable();
        this.__js_helper$_rest = rest;
      }
      hash = this.internalComputeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this.__js_helper$_newLinkedCell$2(key, value)];
      else {
        index = this.internalFindBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].set$hashMapCellValue(value);
        else
          bucket.push(this.__js_helper$_newLinkedCell$2(key, value));
      }
    },
    putIfAbsent$2: function(key, ifAbsent) {
      var value;
      if (this.containsKey$1(key))
        return this.$index(0, key);
      value = ifAbsent.call$0();
      this.$indexSet(0, key, value);
      return value;
    },
    remove$1: function(_, key) {
      if (typeof key === "string" && key !== "__proto__")
        return this.__js_helper$_removeHashTableEntry$2(this.__js_helper$_strings, key);
      else if (typeof key === "number" && (key & 0x3ffffff) === key)
        return this.__js_helper$_removeHashTableEntry$2(this.__js_helper$_nums, key);
      else
        return this.internalRemove$1(key);
    },
    internalRemove$1: function(key) {
      var rest, bucket, index, cell;
      rest = this.__js_helper$_rest;
      if (rest == null)
        return;
      bucket = rest[this.internalComputeHashCode$1(key)];
      index = this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this.__js_helper$_unlinkCell$1(cell);
      return cell.get$hashMapCellValue();
    },
    clear$0: function(_) {
      if (this.__js_helper$_length > 0) {
        this.__js_helper$_last = null;
        this.__js_helper$_first = null;
        this.__js_helper$_rest = null;
        this.__js_helper$_nums = null;
        this.__js_helper$_strings = null;
        this.__js_helper$_length = 0;
        this.__js_helper$_modifications = this.__js_helper$_modifications + 1 & 67108863;
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this.__js_helper$_first;
      modifications = this.__js_helper$_modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== this.__js_helper$_modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell.__js_helper$_next;
      }
    },
    __js_helper$_addHashTableEntry$3: function(table, key, value) {
      var cell = table[key];
      if (cell == null)
        table[key] = this.__js_helper$_newLinkedCell$2(key, value);
      else
        cell.set$hashMapCellValue(value);
    },
    __js_helper$_removeHashTableEntry$2: function(table, key) {
      var cell;
      if (table == null)
        return;
      cell = table[key];
      if (cell == null)
        return;
      this.__js_helper$_unlinkCell$1(cell);
      delete table[key];
      return cell.get$hashMapCellValue();
    },
    __js_helper$_newLinkedCell$2: function(key, value) {
      var cell, last;
      cell = new H.LinkedHashMapCell(key, value, null, null);
      if (this.__js_helper$_first == null) {
        this.__js_helper$_last = cell;
        this.__js_helper$_first = cell;
      } else {
        last = this.__js_helper$_last;
        cell.__js_helper$_previous = last;
        last.__js_helper$_next = cell;
        this.__js_helper$_last = cell;
      }
      ++this.__js_helper$_length;
      this.__js_helper$_modifications = this.__js_helper$_modifications + 1 & 67108863;
      return cell;
    },
    __js_helper$_unlinkCell$1: function(cell) {
      var previous, next;
      previous = cell.get$__js_helper$_previous();
      next = cell.__js_helper$_next;
      if (previous == null)
        this.__js_helper$_first = next;
      else
        previous.__js_helper$_next = next;
      if (next == null)
        this.__js_helper$_last = previous;
      else
        next.__js_helper$_previous = previous;
      --this.__js_helper$_length;
      this.__js_helper$_modifications = this.__js_helper$_modifications + 1 & 67108863;
    },
    internalComputeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    internalFindBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i].get$hashMapCellKey(), key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    $isInternalMap: 1,
    $isMap: 1,
    static: {JsLinkedHashMap__newHashTable: function() {
        var table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  JsLinkedHashMap_values_closure: {
    "^": "Closure:1;this_0",
    call$1: function(each) {
      return this.this_0.$index(0, each);
    }
  },
  JsLinkedHashMap_addAll_closure: {
    "^": "Closure;this_0",
    call$2: function(key, value) {
      this.this_0.$indexSet(0, key, value);
    },
    $signature: function() {
      return H.computeSignature(function(K, V) {
        return {func: "dynamic__K_V", args: [K, V]};
      }, this.this_0, "JsLinkedHashMap");
    }
  },
  LinkedHashMapCell: {
    "^": "Object;hashMapCellKey<,hashMapCellValue@,__js_helper$_next,__js_helper$_previous<"
  },
  LinkedHashMapKeyIterable: {
    "^": "IterableBase;_map",
    get$length: function(_) {
      return this._map.__js_helper$_length;
    },
    get$iterator: function(_) {
      var t1, t2;
      t1 = this._map;
      t2 = new H.LinkedHashMapKeyIterator(t1, t1.__js_helper$_modifications, null, null);
      t2.__js_helper$_cell = t1.__js_helper$_first;
      return t2;
    },
    contains$1: function(_, element) {
      return this._map.containsKey$1(element);
    },
    forEach$1: function(_, f) {
      var t1, cell, modifications;
      t1 = this._map;
      cell = t1.__js_helper$_first;
      modifications = t1.__js_helper$_modifications;
      for (; cell != null;) {
        f.call$1(cell.hashMapCellKey);
        if (modifications !== t1.__js_helper$_modifications)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        cell = cell.__js_helper$_next;
      }
    },
    $isEfficientLength: 1
  },
  LinkedHashMapKeyIterator: {
    "^": "Object;_map,__js_helper$_modifications,__js_helper$_cell,__js_helper$_current",
    get$current: function() {
      return this.__js_helper$_current;
    },
    moveNext$0: function() {
      var t1 = this._map;
      if (this.__js_helper$_modifications !== t1.__js_helper$_modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this.__js_helper$_cell;
        if (t1 == null) {
          this.__js_helper$_current = null;
          return false;
        } else {
          this.__js_helper$_current = t1.hashMapCellKey;
          this.__js_helper$_cell = t1.__js_helper$_next;
          return true;
        }
      }
    }
  },
  initHooks_closure: {
    "^": "Closure:1;getTag_0",
    call$1: function(o) {
      return this.getTag_0(o);
    }
  },
  initHooks_closure0: {
    "^": "Closure:5;getUnknownTag_1",
    call$2: function(o, tag) {
      return this.getUnknownTag_1(o, tag);
    }
  },
  initHooks_closure1: {
    "^": "Closure:6;prototypeForTag_2",
    call$1: function(tag) {
      return this.prototypeForTag_2(tag);
    }
  }
}],
["", "behaviour/a_star_algorithm.dart", , Y, {
  "^": "",
  getScore: function(pos, end) {
    var t1, t2, t3, t4, t5;
    t1 = J.getInterceptor$x(pos);
    t2 = t1.get$x(pos);
    t3 = end.storage;
    t4 = t3[0];
    if (typeof t2 !== "number")
      return t2.$sub();
    t1 = t1.get$y(pos);
    t3 = t3[1];
    if (typeof t1 !== "number")
      return t1.$sub();
    t5 = new Float32Array(2);
    t5[0] = t2 - t4;
    t5[1] = t1 - t3;
    t3 = t5[0];
    t5 = t5[1];
    return C.JSNumber_methods.toInt$0(Math.floor(Math.sqrt(t3 * t3 + t5 * t5) * 10));
  },
  positionInMap: function(map, position, size) {
    var t1 = {};
    t1.ret_0 = false;
    map.forEach$1(0, new Y.positionInMap_closure(t1, position, size));
    return t1.ret_0;
  },
  getNeighboors: function(current, map, size, end) {
    var ret, near_positions, t1, t2, t3, pos, t4, t5;
    ret = [];
    ret.$builtinTypeInfo = [Y.Node];
    near_positions = [];
    near_positions.$builtinTypeInfo = [T.Vector2];
    t1 = J.get$x$x(current.get$pos_());
    if (typeof t1 !== "number")
      return t1.$add();
    t2 = J.get$y$x(current.get$pos_());
    t3 = new Float32Array(2);
    t3[0] = t1 + 1;
    t3[1] = t2;
    near_positions.push(new T.Vector2(t3));
    t3 = J.get$x$x(current.get$pos_());
    if (typeof t3 !== "number")
      return t3.$sub();
    t2 = J.get$y$x(current.get$pos_());
    t1 = new Float32Array(2);
    t1[0] = t3 - 1;
    t1[1] = t2;
    near_positions.push(new T.Vector2(t1));
    t1 = J.get$x$x(current.get$pos_());
    t2 = J.get$y$x(current.get$pos_());
    if (typeof t2 !== "number")
      return t2.$add();
    t3 = new Float32Array(2);
    t3[0] = t1;
    t3[1] = t2 + 1;
    near_positions.push(new T.Vector2(t3));
    t3 = J.get$x$x(current.get$pos_());
    t2 = J.get$y$x(current.get$pos_());
    if (typeof t2 !== "number")
      return t2.$sub();
    t1 = new Float32Array(2);
    t1[0] = t3;
    t1[1] = t2 - 1;
    near_positions.push(new T.Vector2(t1));
    for (t1 = new J.ArrayIterator(near_positions, near_positions.length, 0, null), t2 = size.storage; t1.moveNext$0();) {
      pos = t1.__interceptors$_current;
      t3 = J.getInterceptor$x(pos);
      t4 = t3.get$x(pos);
      if (typeof t4 !== "number")
        return t4.$gt();
      if (t4 > 0) {
        t4 = t3.get$y(pos);
        if (typeof t4 !== "number")
          return t4.$gt();
        if (t4 > 0) {
          t4 = t3.get$x(pos);
          t5 = t2[0];
          if (typeof t4 !== "number")
            return t4.$lt();
          if (t4 < t5) {
            t3 = t3.get$y(pos);
            t4 = t2[1];
            if (typeof t3 !== "number")
              return t3.$lt();
            t3 = t3 < t4 && !Y.positionInMap(map, pos, size);
          } else
            t3 = false;
        } else
          t3 = false;
      } else
        t3 = false;
      if (t3) {
        t3 = new Y.Node(pos, null, current.get$g_score() + 10);
        t3.f_score = Y.getScore(pos, end);
        ret.push(t3);
      }
    }
    return ret;
  },
  getPath: function(traversed_map, $init, end) {
    var ret, t1, t2, added, key, t3, t4, rev_ret;
    ret = H.setRuntimeTypeInfo([], [T.Vector2]);
    t1 = $init.storage;
    t2 = end.storage;
    if (t1[0] === t2[0] && t1[1] === t2[1])
      ret.push($init);
    else {
      ret.push(end);
      for (; !J.$eq(C.JSArray_methods.get$last(ret), $init);) {
        new H.LinkedHashMapKeyIterable(traversed_map).$builtinTypeInfo = [H.getTypeArgumentByIndex(traversed_map, 0)];
        t1 = new H.LinkedHashMapKeyIterator(traversed_map, traversed_map.__js_helper$_modifications, null, null);
        t1.__js_helper$_cell = traversed_map.__js_helper$_first;
        while (true) {
          if (!t1.moveNext$0()) {
            added = false;
            break;
          }
          key = t1.__js_helper$_current;
          t2 = J.getInterceptor$x(key);
          t3 = t2.get$x(key);
          t4 = J.get$x$x(C.JSArray_methods.get$last(ret));
          if (t3 == null ? t4 == null : t3 === t4) {
            t2 = t2.get$y(key);
            t3 = J.get$y$x(C.JSArray_methods.get$last(ret));
            t3 = t2 == null ? t3 == null : t2 === t3;
            t2 = t3;
          } else
            t2 = false;
          if (t2) {
            ret.push(traversed_map.$index(0, key));
            added = true;
            break;
          }
        }
        if (!added)
          H.printString("path is not complete!!!");
      }
      rev_ret = H.setRuntimeTypeInfo([], [T.Vector2]);
      for (t1 = H.setRuntimeTypeInfo(new H.ReversedListIterable(ret), [H.getTypeArgumentByIndex(ret, 0)]), t1 = new H.ListIterator(t1, t1.get$length(t1), 0, null); t1.moveNext$0();)
        rev_ret.push(t1.__internal$_current);
      ret = rev_ret;
    }
    return new B.Path("aStar", ret);
  },
  aStar: function(map, size, $init, end) {
    var closed_set, open_set, traversed_map, t1, t2, t3, current, neighboors, cur_neighboor, equal_open_set, change;
    closed_set = H.setRuntimeTypeInfo([], [Y.Node]);
    open_set = H.setRuntimeTypeInfo([], [Y.Node]);
    traversed_map = P.LinkedHashMap_LinkedHashMap(null, null, null, T.Vector2, T.Vector2);
    t1 = $init.storage;
    t2 = Math.floor(t1[0]);
    t1 = Math.floor(t1[1]);
    t3 = new Float32Array(H._checkLength(2));
    $init = new T.Vector2(t3);
    t3[0] = t2;
    t3[1] = t1;
    t1 = J.getInterceptor$x(end);
    t3 = J.floorToDouble$0$n(t1.get$x(end));
    t1 = J.floorToDouble$0$n(t1.get$y(end));
    t2 = new Float32Array(H._checkLength(2));
    end = new T.Vector2(t2);
    t2[0] = t3;
    t2[1] = t1;
    t1 = new Y.Node($init, null, 0);
    t1.f_score = Y.getScore($init, end);
    open_set.push(t1);
    for (; open_set.length !== 0;) {
      current = C.JSArray_methods.get$last(open_set);
      if (J.get$x$x(current.get$pos_()) === t2[0] && J.get$y$x(current.get$pos_()) === t2[1]) {
        if (traversed_map.__js_helper$_length === 0)
          H.printString("empty");
        break;
      }
      if (0 >= open_set.length)
        return H.ioore(open_set, 0);
      open_set.pop();
      closed_set.push(current);
      neighboors = Y.getNeighboors(current, map, size, end);
      for (t1 = new J.ArrayIterator(neighboors, neighboors.length, 0, null); t1.moveNext$0();) {
        cur_neighboor = t1.__interceptors$_current;
        if (C.JSArray_methods.firstWhere$2$orElse(closed_set, new Y.aStar_closure(cur_neighboor), new Y.aStar_closure0()) == null) {
          equal_open_set = C.JSArray_methods.firstWhere$2$orElse(open_set, new Y.aStar_closure1(cur_neighboor), new Y.aStar_closure2());
          if (equal_open_set != null)
            if (equal_open_set.get$g_score() <= cur_neighboor.get$g_score())
              change = false;
            else {
              equal_open_set.g_score = cur_neighboor.g_score;
              equal_open_set.f_score = cur_neighboor.g_score + Y.getScore(cur_neighboor.pos_, end);
              change = true;
            }
          else {
            cur_neighboor.f_score = cur_neighboor.get$g_score() + Y.getScore(cur_neighboor.pos_, end);
            open_set.push(cur_neighboor);
            change = true;
          }
          if (change)
            traversed_map.$indexSet(0, cur_neighboor.get$pos_(), current.get$pos_());
        }
      }
      t1 = new Y.aStar_closure3();
      t3 = open_set.length - 1;
      if (t3 - 0 <= 32)
        H.Sort__insertionSort(open_set, 0, t3, t1);
      else
        H.Sort__dualPivotQuicksort(open_set, 0, t3, t1);
    }
    return Y.getPath(traversed_map, $init, end);
  },
  Node: {
    "^": "Object;pos_<,f_score<,g_score<"
  },
  positionInMap_closure: {
    "^": "Closure:7;box_0,position_1,size_2",
    call$2: function(pos, t) {
      var t1, t2, t3;
      t1 = J.getInterceptor$x(pos);
      t2 = this.position_1;
      t3 = J.getInterceptor$x(t2);
      if (J.floor$0$n(t1.get$x(pos)) === J.floor$0$n(t3.get$x(t2)) && J.floor$0$n(t1.get$y(pos)) === this.size_2.storage[1] - J.floor$0$n(t3.get$y(t2))) {
        this.box_0.ret_0 = true;
        return true;
      }
    }
  },
  aStar_closure: {
    "^": "Closure:8;cur_neighboor_0",
    call$1: function(o) {
      var t1, t2, t3;
      t1 = J.get$x$x(o.get$pos_());
      t2 = this.cur_neighboor_0;
      t3 = J.get$x$x(t2.get$pos_());
      if (t1 == null ? t3 == null : t1 === t3) {
        t1 = J.get$y$x(o.get$pos_());
        t2 = J.get$y$x(t2.get$pos_());
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
      return t1;
    }
  },
  aStar_closure0: {
    "^": "Closure:4;",
    call$0: function() {
      return;
    }
  },
  aStar_closure1: {
    "^": "Closure:8;cur_neighboor_1",
    call$1: function(o) {
      var t1, t2, t3;
      t1 = J.get$x$x(o.get$pos_());
      t2 = this.cur_neighboor_1;
      t3 = J.get$x$x(t2.get$pos_());
      if (t1 == null ? t3 == null : t1 === t3) {
        t1 = J.get$y$x(o.get$pos_());
        t2 = J.get$y$x(t2.get$pos_());
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
      return t1;
    }
  },
  aStar_closure2: {
    "^": "Closure:4;",
    call$0: function() {
      return;
    }
  },
  aStar_closure3: {
    "^": "Closure:3;",
    call$2: function(x, y) {
      var ret;
      if (x.get$f_score() > y.get$f_score())
        ret = -1;
      else
        ret = x.f_score === y.f_score ? 0 : 1;
      return ret;
    }
  }
}],
["animation", "animation.dart", , L, {
  "^": "",
  AnimationSequence: {
    "^": "Object;images<,time<"
  },
  AnimationData: {
    "^": "Object;num_images_side_,sequences_"
  }
}],
["asset_manager", "asset_manager.dart", , A, {
  "^": "",
  AssetManager: {
    "^": "Object;asset_list_,gl_,create_asset_",
    getAsset$1: function($name) {
      var t1 = this.asset_list_;
      t1.putIfAbsent$2($name, new A.AssetManager_getAsset_closure(this, $name));
      return t1.$index(0, $name);
    },
    create_asset_$1: function(arg0) {
      return this.create_asset_.call$1(arg0);
    }
  },
  AssetManager_getAsset_closure: {
    "^": "Closure:4;this_0,name_1",
    call$0: function() {
      return this.this_0.create_asset_$1(this.name_1);
    }
  }
}],
["async_importer", "async_importer.dart", , R, {
  "^": "",
  AsyncImporter: {
    "^": "Object;",
    RequestFile$1: function(path) {
      return W.HttpRequest_getString(path, null, null).then$1(new R.AsyncImporter_RequestFile_closure(this));
    }
  },
  AsyncImporter_RequestFile_closure: {
    "^": "Closure:1;this_0",
    call$1: function(res) {
      return this.this_0.processFile$1(res);
    }
  }
}],
["base_geometry", "base_geometry.dart", , S, {
  "^": "",
  Vertex: {
    "^": "Object;position_<,orientation_<,text_coord_,color_",
    Vertex$zero$0: function() {
      this.position_ = new T.Vector3(new Float32Array(H._checkLength(3)));
      this.orientation_ = new T.Vector3(new Float32Array(H._checkLength(3)));
      this.text_coord_ = new T.Vector2(new Float32Array(H._checkLength(2)));
      this.color_ = new T.Vector3(new Float32Array(H._checkLength(3)));
    },
    static: {Vertex$zero: function() {
        var t1 = new S.Vertex(null, null, null, null);
        t1.Vertex$zero$0();
        return t1;
      }}
  },
  BaseGeometry: {
    "^": "Object;vertices_<,orientation_<,indices_<"
  },
  TexturedGeometry: {
    "^": "BaseGeometry;text_coords_<,image_,vertices_,colors_,orientation_,indices_",
    AddVertex$1: function(vert) {
      var t1, t2;
      J.add$1$ax(this.vertices_, vert.position_.storage[0]);
      J.add$1$ax(this.vertices_, vert.position_.storage[1]);
      J.add$1$ax(this.vertices_, vert.position_.storage[2]);
      J.add$1$ax(this.orientation_, vert.orientation_.storage[0]);
      J.add$1$ax(this.orientation_, vert.orientation_.storage[1]);
      J.add$1$ax(this.orientation_, vert.orientation_.storage[2]);
      t1 = this.text_coords_;
      t2 = J.getInterceptor$ax(t1);
      t2.add$1(t1, vert.text_coord_.storage[0]);
      t2.add$1(t1, vert.text_coord_.storage[1]);
      t1 = this.colors_;
      if (t1 != null) {
        t1.push(vert.color_.storage[0]);
        this.colors_.push(vert.color_.storage[1]);
        this.colors_.push(vert.color_.storage[2]);
      }
      return J.round$0$n(J.$div$n(J.get$length$asx(this.vertices_), 3)) - 1;
    }
  }
}],
["behaviour", "behaviour/behaviour.dart", , D, {
  "^": "",
  Behaviour: {
    "^": "Object;",
    init$1: ["super$Behaviour$init$1", function(drawable) {
      this.drawable_ = drawable;
    }]
  }
}],
["button_behaviour", "behaviour/button_behaviour.dart", , Z, {
  "^": "",
  ButtonBehaviour: {
    "^": "Tile3dBehaviour;initial_pos_,object_,object_found_,height_,position_,area_,rotation_,offset_,drawable_",
    init$1: function(drawable) {
      var t1;
      this.super$Tile3dBehaviour$init$1(drawable);
      t1 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t1.setValues$3(0, 0.5, 0);
      this.offset_ = t1;
      this.initial_pos_ = this.drawable_.position_;
    },
    findObject$0: function() {
      var t1, t2, behaviour;
      t1 = this.object_;
      if (t1 != null) {
        if (this.object_found_ == null)
          for (t2 = this.area_.get$behaviours_(), t2 = new J.ArrayIterator(t2, t2.length, 0, null); t2.moveNext$0();) {
            behaviour = t2.__interceptors$_current;
            if (behaviour instanceof X.DoorBehaviour && J.$eq(behaviour.name_, t1)) {
              this.object_found_ = behaviour;
              break;
            }
          }
        if (this.object_found_ == null)
          P.print("object " + H.S(t1) + " not found!");
      }
    },
    update$0: function() {
      var t1, height, activated, behaviour, t2, t3, t4, t5, t6;
      for (t1 = this.area_.get$behaviours_(), t1 = new J.ArrayIterator(t1, t1.length, 0, null), height = 0, activated = false; t1.moveNext$0();) {
        behaviour = t1.__interceptors$_current;
        t2 = J.getInterceptor(behaviour);
        if (!!t2.$isTerrainElementBehaviour && !t2.$isButtonBehaviour && !t2.$isGrassBehaviour) {
          t2 = behaviour.get$position_();
          t3 = behaviour.get$offset_().storage;
          t4 = t3[0];
          t3 = t3[1];
          t5 = new Float32Array(2);
          t5[0] = t4;
          t5[1] = t3;
          t2 = t2.storage;
          t3 = t2[0];
          t4 = t5[0];
          t2 = t2[1];
          t5 = t5[1];
          t6 = new Float32Array(2);
          t6[0] = t3 + t4;
          t6[1] = t2 + t5;
          t5 = this.position_.$add(0, this.offset_.get$xy());
          t2 = new Float32Array(2);
          t2[1] = t6[1];
          t2[0] = t6[0];
          if (new T.Vector2(t2).sub$1(t5).get$length2() < 0.25) {
            height = -0.1;
            activated = true;
          }
        }
      }
      if (activated) {
        this.findObject$0();
        t1 = this.object_found_;
        if (t1 != null)
          J.open$0$x(t1);
      } else {
        this.findObject$0();
        t1 = this.object_found_;
        if (t1 != null)
          J.close$0$x(t1);
      }
      t1 = this.drawable_;
      t2 = this.initial_pos_;
      t3 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t3.setValues$3(0, 0, height);
      t1.position_ = t2.$add(0, t3);
    }
  }
}],
["camera", "camera.dart", , T, {
  "^": "",
  Camera: {
    "^": "Object;cam_mat_,pos_<,offset_<",
    Camera$0: function() {
      var t1 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t1.setValues$3(-1, 0, 0);
      this.cam_mat_.rotate$2(0, t1, 0.7853981633974483);
    }
  }
}],
["dart._internal", "dart:_internal", , H, {
  "^": "",
  IterableElementError_noElement: function() {
    return new P.StateError("No element");
  },
  IterableElementError_tooFew: function() {
    return new P.StateError("Too few elements");
  },
  Sort__doSort: function(a, left, right, compare) {
    if (right - left <= 32)
      H.Sort__insertionSort(a, left, right, compare);
    else
      H.Sort__dualPivotQuicksort(a, left, right, compare);
  },
  Sort__insertionSort: function(a, left, right, compare) {
    var i, t1, el, j, j0;
    for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
      el = t1.$index(a, i);
      j = i;
      while (true) {
        if (!(j > left && J.$gt$n(compare.call$2(t1.$index(a, j - 1), el), 0)))
          break;
        j0 = j - 1;
        t1.$indexSet(a, j, t1.$index(a, j0));
        j = j0;
      }
      t1.$indexSet(a, j, el);
    }
  },
  Sort__dualPivotQuicksort: function(a, left, right, compare) {
    var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, t2, great0, less0, pivots_are_equal;
    sixth = C.JSInt_methods._tdivFast$1(right - left + 1, 6);
    index1 = left + sixth;
    index5 = right - sixth;
    index3 = C.JSInt_methods._tdivFast$1(left + right, 2);
    index2 = index3 - sixth;
    index4 = index3 + sixth;
    t1 = J.getInterceptor$asx(a);
    el1 = t1.$index(a, index1);
    el2 = t1.$index(a, index2);
    el3 = t1.$index(a, index3);
    el4 = t1.$index(a, index4);
    el5 = t1.$index(a, index5);
    if (J.$gt$n(compare.call$2(el1, el2), 0)) {
      t0 = el2;
      el2 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el4, el5), 0)) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    if (J.$gt$n(compare.call$2(el1, el3), 0)) {
      t0 = el3;
      el3 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el3), 0)) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el1, el4), 0)) {
      t0 = el4;
      el4 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el3, el4), 0)) {
      t0 = el4;
      el4 = el3;
      el3 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el5), 0)) {
      t0 = el5;
      el5 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el3), 0)) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el4, el5), 0)) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    t1.$indexSet(a, index1, el1);
    t1.$indexSet(a, index3, el3);
    t1.$indexSet(a, index5, el5);
    t1.$indexSet(a, index2, t1.$index(a, left));
    t1.$indexSet(a, index4, t1.$index(a, right));
    less = left + 1;
    great = right - 1;
    if (J.$eq(compare.call$2(el2, el4), 0)) {
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        comp = compare.call$2(ak, el2);
        t2 = J.getInterceptor(comp);
        if (t2.$eq(comp, 0))
          continue;
        if (t2.$lt(comp, 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else
          for (; true;) {
            comp = compare.call$2(t1.$index(a, great), el2);
            t2 = J.getInterceptor$n(comp);
            if (t2.$gt(comp, 0)) {
              --great;
              continue;
            } else {
              great0 = great - 1;
              if (t2.$lt(comp, 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
                break;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                break;
              }
            }
          }
      }
      pivots_are_equal = true;
    } else {
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        if (J.$lt$n(compare.call$2(ak, el2), 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else if (J.$gt$n(compare.call$2(ak, el4), 0))
          for (; true;)
            if (J.$gt$n(compare.call$2(t1.$index(a, great), el4), 0)) {
              --great;
              if (great < k)
                break;
              continue;
            } else {
              great0 = great - 1;
              if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
      }
      pivots_are_equal = false;
    }
    t2 = less - 1;
    t1.$indexSet(a, left, t1.$index(a, t2));
    t1.$indexSet(a, t2, el2);
    t2 = great + 1;
    t1.$indexSet(a, right, t1.$index(a, t2));
    t1.$indexSet(a, t2, el4);
    H.Sort__doSort(a, left, less - 2, compare);
    H.Sort__doSort(a, great + 2, right, compare);
    if (pivots_are_equal)
      return;
    if (less < index1 && great > index5) {
      for (; J.$eq(compare.call$2(t1.$index(a, less), el2), 0);)
        ++less;
      for (; J.$eq(compare.call$2(t1.$index(a, great), el4), 0);)
        --great;
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        if (J.$eq(compare.call$2(ak, el2), 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else if (J.$eq(compare.call$2(ak, el4), 0))
          for (; true;)
            if (J.$eq(compare.call$2(t1.$index(a, great), el4), 0)) {
              --great;
              if (great < k)
                break;
              continue;
            } else {
              great0 = great - 1;
              if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
      }
      H.Sort__doSort(a, less, great, compare);
    } else
      H.Sort__doSort(a, less, great, compare);
  },
  Symbol_getName: function(symbol) {
    return symbol.get$_name();
  },
  ListIterable: {
    "^": "IterableBase;",
    get$iterator: function(_) {
      return new H.ListIterator(this, this.get$length(this), 0, null);
    },
    forEach$1: function(_, action) {
      var $length, i;
      $length = this.get$length(this);
      for (i = 0; i < $length; ++i) {
        action.call$1(this.elementAt$1(0, i));
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    get$first: function(_) {
      if (this.get$length(this) === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      return this.elementAt$1(0, 0);
    },
    contains$1: function(_, element) {
      var $length, i;
      $length = this.get$length(this);
      for (i = 0; i < $length; ++i) {
        if (J.$eq(this.elementAt$1(0, i), element))
          return true;
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
      return false;
    },
    map$1: function(_, f) {
      return H.setRuntimeTypeInfo(new H.MappedListIterable(this, f), [null, null]);
    },
    toList$1$growable: function(_, growable) {
      var result, i, t1;
      if (growable) {
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(this));
      } else
        result = H.setRuntimeTypeInfo(Array(this.get$length(this)), [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
      for (i = 0; i < this.get$length(this); ++i) {
        t1 = this.elementAt$1(0, i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    $isEfficientLength: 1
  },
  ListIterator: {
    "^": "Object;_iterable,__internal$_length,_index,__internal$_current",
    get$current: function() {
      return this.__internal$_current;
    },
    moveNext$0: function() {
      var t1, t2, $length, t3;
      t1 = this._iterable;
      t2 = J.getInterceptor$asx(t1);
      $length = t2.get$length(t1);
      if (this.__internal$_length !== $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = this._index;
      if (t3 >= $length) {
        this.__internal$_current = null;
        return false;
      }
      this.__internal$_current = t2.elementAt$1(t1, t3);
      ++this._index;
      return true;
    }
  },
  MappedIterable: {
    "^": "IterableBase;_iterable,_f",
    get$iterator: function(_) {
      var t1 = new H.MappedIterator(null, J.get$iterator$ax(this._iterable), this._f);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    get$length: function(_) {
      return J.get$length$asx(this._iterable);
    },
    get$first: function(_) {
      return this._f$1(J.get$first$ax(this._iterable));
    },
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    static: {MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
        if (!!J.getInterceptor(iterable).$isEfficientLength)
          return H.setRuntimeTypeInfo(new H.EfficientLengthMappedIterable(iterable, $function), [$S, $T]);
        return H.setRuntimeTypeInfo(new H.MappedIterable(iterable, $function), [$S, $T]);
      }}
  },
  EfficientLengthMappedIterable: {
    "^": "MappedIterable;_iterable,_f",
    $isEfficientLength: 1
  },
  MappedIterator: {
    "^": "Iterator;__internal$_current,_iterator,_f",
    moveNext$0: function() {
      var t1 = this._iterator;
      if (t1.moveNext$0()) {
        this.__internal$_current = this._f$1(t1.get$current());
        return true;
      }
      this.__internal$_current = null;
      return false;
    },
    get$current: function() {
      return this.__internal$_current;
    },
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    }
  },
  MappedListIterable: {
    "^": "ListIterable;_source,_f",
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      return this._f$1(J.elementAt$1$ax(this._source, index));
    },
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    $asListIterable: function($S, $T) {
      return [$T];
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    $isEfficientLength: 1
  },
  FixedLengthListMixin: {
    "^": "Object;",
    set$length: function(receiver, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    }
  },
  ReversedListIterable: {
    "^": "ListIterable;_source",
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      var t1, t2;
      t1 = this._source;
      t2 = J.getInterceptor$asx(t1);
      return t2.elementAt$1(t1, t2.get$length(t1) - 1 - index);
    }
  }
}],
["dart._js_names", "dart:_js_names", , H, {
  "^": "",
  extractKeys: function(victim) {
    var t1 = H.setRuntimeTypeInfo(victim ? Object.keys(victim) : [], [null]);
    t1.fixed$length = Array;
    return t1;
  }
}],
["dart.async", "dart:async", , P, {
  "^": "",
  _AsyncRun__initializeScheduleImmediate: function() {
    var t1, div, span;
    t1 = {};
    if (self.scheduleImmediate != null)
      return P._AsyncRun__scheduleImmediateJsOverride$closure();
    if (self.MutationObserver != null && self.document != null) {
      div = self.document.createElement("div");
      span = self.document.createElement("span");
      t1.storedCallback_0 = null;
      new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
      return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
    } else if (self.setImmediate != null)
      return P._AsyncRun__scheduleImmediateWithSetImmediate$closure();
    return P._AsyncRun__scheduleImmediateWithTimer$closure();
  },
  _AsyncRun__scheduleImmediateJsOverride: [function(callback) {
    ++init.globalState.topEventLoop._activeJsAsyncCount;
    self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(callback), 0));
  }, "call$1", "_AsyncRun__scheduleImmediateJsOverride$closure", 2, 0, 29],
  _AsyncRun__scheduleImmediateWithSetImmediate: [function(callback) {
    ++init.globalState.topEventLoop._activeJsAsyncCount;
    self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(callback), 0));
  }, "call$1", "_AsyncRun__scheduleImmediateWithSetImmediate$closure", 2, 0, 29],
  _AsyncRun__scheduleImmediateWithTimer: [function(callback) {
    P.Timer__createTimer(C.Duration_0, callback);
  }, "call$1", "_AsyncRun__scheduleImmediateWithTimer$closure", 2, 0, 29],
  _registerErrorHandler: function(errorHandler, zone) {
    var t1 = H.getDynamicRuntimeType();
    t1 = H.buildFunctionType(t1, [t1, t1])._isTest$1(errorHandler);
    if (t1) {
      zone.toString;
      return errorHandler;
    } else {
      zone.toString;
      return errorHandler;
    }
  },
  Future_Future$delayed: function(duration, computation, $T) {
    var result = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [$T]);
    P.Timer_Timer(duration, new P.Future_Future$delayed_closure(computation, result));
    return result;
  },
  _completeWithErrorCallback: function(result, error, stackTrace) {
    $.Zone__current.toString;
    result._completeError$2(error, stackTrace);
  },
  _asyncRunCallbackLoop: function() {
    var t1, t2;
    for (; t1 = $._nextCallback, t1 != null;) {
      $._lastPriorityCallback = null;
      t2 = t1.get$next();
      $._nextCallback = t2;
      if (t2 == null)
        $._lastCallback = null;
      t1.callback$0();
    }
  },
  _asyncRunCallback: [function() {
    $._isInCallbackLoop = true;
    try {
      P._asyncRunCallbackLoop();
    } finally {
      $._lastPriorityCallback = null;
      $._isInCallbackLoop = false;
      if ($._nextCallback != null)
        $.get$_AsyncRun_scheduleImmediateClosure().call$1(P._asyncRunCallback$closure());
    }
  }, "call$0", "_asyncRunCallback$closure", 0, 0, 2],
  _scheduleAsyncCallback: function(callback) {
    var t1, newEntry;
    if ($._nextCallback == null) {
      t1 = new P._AsyncCallbackEntry(callback, null);
      $._lastCallback = t1;
      $._nextCallback = t1;
      if (!$._isInCallbackLoop)
        $.get$_AsyncRun_scheduleImmediateClosure().call$1(P._asyncRunCallback$closure());
    } else {
      newEntry = new P._AsyncCallbackEntry(callback, null);
      $._lastCallback.next = newEntry;
      $._lastCallback = newEntry;
    }
  },
  scheduleMicrotask: function(callback) {
    var t1 = $.Zone__current;
    if (C.C__RootZone === t1) {
      P._rootScheduleMicrotask(null, null, C.C__RootZone, callback);
      return;
    }
    P._rootScheduleMicrotask(null, null, t1, t1.bindCallback$2$runGuarded(callback, true));
  },
  _nullDataHandler: [function(value) {
  }, "call$1", "_nullDataHandler$closure", 2, 0, 30],
  _nullErrorHandler: [function(error, stackTrace) {
    var t1 = $.Zone__current;
    t1.toString;
    P._rootHandleUncaughtError(null, null, t1, error, stackTrace);
  }, function(error) {
    return P._nullErrorHandler(error, null);
  }, null, "call$2", "call$1", "_nullErrorHandler$closure", 2, 2, 11, 37],
  _nullDoneHandler: [function() {
  }, "call$0", "_nullDoneHandler$closure", 0, 0, 2],
  _runUserCode: function(userCode, onSuccess, onError) {
    var e, s, replacement, error, stackTrace, exception, t1;
    try {
      onSuccess.call$1(userCode.call$0());
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = H.getTraceFromException(exception);
      $.Zone__current.toString;
      replacement = null;
      if (replacement == null)
        onError.call$2(e, s);
      else {
        t1 = J.get$error$x(replacement);
        error = t1;
        stackTrace = replacement.get$stackTrace();
        onError.call$2(error, stackTrace);
      }
    }
  },
  _cancelAndError: function(subscription, future, error, stackTrace) {
    var cancelFuture = subscription.cancel$0();
    if (!!J.getInterceptor(cancelFuture).$isFuture)
      cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
    else
      future._completeError$2(error, stackTrace);
  },
  _cancelAndErrorClosure: function(subscription, future) {
    return new P._cancelAndErrorClosure_closure(subscription, future);
  },
  _cancelAndValue: function(subscription, future, value) {
    var cancelFuture = subscription.cancel$0();
    if (!!J.getInterceptor(cancelFuture).$isFuture)
      cancelFuture.whenComplete$1(new P._cancelAndValue_closure(future, value));
    else
      future._complete$1(value);
  },
  Timer_Timer: function(duration, callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone) {
      t1.toString;
      return P.Timer__createTimer(duration, callback);
    }
    return P.Timer__createTimer(duration, t1.bindCallback$2$runGuarded(callback, true));
  },
  Timer__createTimer: function(duration, callback) {
    var milliseconds = C.JSInt_methods._tdivFast$1(duration._duration, 1000);
    return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
  },
  Zone__enter: function(zone) {
    var previous = $.Zone__current;
    $.Zone__current = zone;
    return previous;
  },
  _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
    var t1, entry, t2;
    t1 = new P._rootHandleUncaughtError_closure(error, stackTrace);
    entry = new P._AsyncCallbackEntry(t1, null);
    t2 = $._nextCallback;
    if (t2 == null) {
      P._scheduleAsyncCallback(t1);
      $._lastPriorityCallback = $._lastCallback;
    } else {
      t1 = $._lastPriorityCallback;
      if (t1 == null) {
        entry.next = t2;
        $._lastPriorityCallback = entry;
        $._nextCallback = entry;
      } else {
        entry.next = t1.next;
        t1.next = entry;
        $._lastPriorityCallback = entry;
        if (entry.next == null)
          $._lastCallback = entry;
      }
    }
  },
  _rootRun: function($self, $parent, zone, f) {
    var old, t1;
    if ($.Zone__current === zone)
      return f.call$0();
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$0();
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootRunUnary: function($self, $parent, zone, f, arg) {
    var old, t1;
    if ($.Zone__current === zone)
      return f.call$1(arg);
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$1(arg);
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootRunBinary: function($self, $parent, zone, f, arg1, arg2) {
    var old, t1;
    if ($.Zone__current === zone)
      return f.call$2(arg1, arg2);
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$2(arg1, arg2);
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootScheduleMicrotask: function($self, $parent, zone, f) {
    var t1 = C.C__RootZone !== zone;
    if (t1)
      f = zone.bindCallback$2$runGuarded(f, !(!t1 || C.C__RootZone.get$errorZone() === zone));
    P._scheduleAsyncCallback(f);
  },
  _AsyncRun__initializeScheduleImmediate_internalCallback: {
    "^": "Closure:1;box_0",
    call$1: function(_) {
      var t1, f;
      H.leaveJsAsync();
      t1 = this.box_0;
      f = t1.storedCallback_0;
      t1.storedCallback_0 = null;
      f.call$0();
    }
  },
  _AsyncRun__initializeScheduleImmediate_closure: {
    "^": "Closure:9;box_0,div_1,span_2",
    call$1: function(callback) {
      var t1, t2;
      ++init.globalState.topEventLoop._activeJsAsyncCount;
      this.box_0.storedCallback_0 = callback;
      t1 = this.div_1;
      t2 = this.span_2;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    }
  },
  _AsyncRun__scheduleImmediateJsOverride_internalCallback: {
    "^": "Closure:4;callback_0",
    call$0: function() {
      H.leaveJsAsync();
      this.callback_0.call$0();
    }
  },
  _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: {
    "^": "Closure:4;callback_0",
    call$0: function() {
      H.leaveJsAsync();
      this.callback_0.call$0();
    }
  },
  _UncaughtAsyncError: {
    "^": "AsyncError;error,stackTrace",
    toString$0: function(_) {
      var result, t1;
      result = "Uncaught Error: " + H.S(this.error);
      t1 = this.stackTrace;
      return t1 != null ? result + ("\nStack Trace:\n" + H.S(t1)) : result;
    },
    static: {_UncaughtAsyncError__getBestStackTrace: function(error, stackTrace) {
        if (stackTrace != null)
          return stackTrace;
        if (!!J.getInterceptor(error).$isError)
          return error.get$stackTrace();
        return;
      }}
  },
  Future: {
    "^": "Object;"
  },
  Future_Future$delayed_closure: {
    "^": "Closure:4;computation_0,result_1",
    call$0: function() {
      var e, s, t1, exception;
      try {
        t1 = this.computation_0.call$0();
        this.result_1._complete$1(t1);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = H.getTraceFromException(exception);
        P._completeWithErrorCallback(this.result_1, e, s);
      }
    }
  },
  _Completer: {
    "^": "Object;",
    completeError$2: [function(error, stackTrace) {
      error = error != null ? error : new P.NullThrownError();
      if (this.future._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      $.Zone__current.toString;
      this._completeError$2(error, stackTrace);
    }, function(error) {
      return this.completeError$2(error, null);
    }, "completeError$1", "call$2", "call$1", "get$completeError", 2, 2, 10, 37]
  },
  _AsyncCompleter: {
    "^": "_Completer;future",
    complete$1: function(_, value) {
      var t1 = this.future;
      if (t1._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      t1._asyncComplete$1(value);
    },
    _completeError$2: function(error, stackTrace) {
      this.future._asyncCompleteError$2(error, stackTrace);
    }
  },
  _FutureListener: {
    "^": "Object;_nextListener<,result>,state,callback,errorCallback",
    get$_zone: function() {
      return this.result._zone;
    },
    get$handlesValue: function() {
      return (this.state & 1) !== 0;
    },
    get$hasErrorTest: function() {
      return this.state === 6;
    },
    get$handlesComplete: function() {
      return this.state === 8;
    },
    get$_onValue: function() {
      return this.callback;
    },
    get$_whenCompleteAction: function() {
      return this.callback;
    }
  },
  _Future: {
    "^": "Object;_state,_zone<,_resultOrListeners",
    get$_hasError: function() {
      return this._state === 8;
    },
    set$_isChained: function(value) {
      if (value)
        this._state = 2;
      else
        this._state = 0;
    },
    then$2$onError: function(f, onError) {
      var result, t1;
      result = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
      t1 = result._zone;
      if (t1 !== C.C__RootZone) {
        t1.toString;
        if (onError != null)
          onError = P._registerErrorHandler(onError, t1);
      }
      t1 = onError == null ? 1 : 3;
      this._addListener$1(new P._FutureListener(null, result, t1, f, onError));
      return result;
    },
    then$1: function(f) {
      return this.then$2$onError(f, null);
    },
    whenComplete$1: function(action) {
      var t1, result;
      t1 = $.Zone__current;
      result = new P._Future(0, t1, null);
      result.$builtinTypeInfo = this.$builtinTypeInfo;
      if (t1 !== C.C__RootZone)
        t1.toString;
      this._addListener$1(new P._FutureListener(null, result, 8, action, null));
      return result;
    },
    _markPendingCompletion$0: function() {
      if (this._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      this._state = 1;
    },
    get$_value: function() {
      return this._resultOrListeners;
    },
    get$_error: function() {
      return this._resultOrListeners;
    },
    _setValue$1: function(value) {
      this._state = 4;
      this._resultOrListeners = value;
    },
    _setErrorObject$1: function(error) {
      this._state = 8;
      this._resultOrListeners = error;
    },
    _setError$2: function(error, stackTrace) {
      this._setErrorObject$1(new P.AsyncError(error, stackTrace));
    },
    _addListener$1: function(listener) {
      var t1;
      if (this._state >= 4) {
        t1 = this._zone;
        t1.toString;
        P._rootScheduleMicrotask(null, null, t1, new P._Future__addListener_closure(this, listener));
      } else {
        listener._nextListener = this._resultOrListeners;
        this._resultOrListeners = listener;
      }
    },
    _removeListeners$0: function() {
      var current, prev, next;
      current = this._resultOrListeners;
      this._resultOrListeners = null;
      for (prev = null; current != null; prev = current, current = next) {
        next = current.get$_nextListener();
        current._nextListener = prev;
      }
      return prev;
    },
    _complete$1: function(value) {
      var t1, listeners;
      t1 = J.getInterceptor(value);
      if (!!t1.$isFuture)
        if (!!t1.$is_Future)
          P._Future__chainCoreFuture(value, this);
        else
          P._Future__chainForeignFuture(value, this);
      else {
        listeners = this._removeListeners$0();
        this._setValue$1(value);
        P._Future__propagateToListeners(this, listeners);
      }
    },
    _completeWithValue$1: function(value) {
      var listeners = this._removeListeners$0();
      this._setValue$1(value);
      P._Future__propagateToListeners(this, listeners);
    },
    _completeError$2: [function(error, stackTrace) {
      var listeners = this._removeListeners$0();
      this._setErrorObject$1(new P.AsyncError(error, stackTrace));
      P._Future__propagateToListeners(this, listeners);
    }, function(error) {
      return this._completeError$2(error, null);
    }, "_completeError$1", "call$2", "call$1", "get$_completeError", 2, 2, 11, 37],
    _asyncComplete$1: function(value) {
      var t1;
      if (value == null)
        ;
      else {
        t1 = J.getInterceptor(value);
        if (!!t1.$isFuture) {
          if (!!t1.$is_Future) {
            t1 = value._state;
            if (t1 >= 4 && t1 === 8) {
              this._markPendingCompletion$0();
              t1 = this._zone;
              t1.toString;
              P._rootScheduleMicrotask(null, null, t1, new P._Future__asyncComplete_closure(this, value));
            } else
              P._Future__chainCoreFuture(value, this);
          } else
            P._Future__chainForeignFuture(value, this);
          return;
        }
      }
      this._markPendingCompletion$0();
      t1 = this._zone;
      t1.toString;
      P._rootScheduleMicrotask(null, null, t1, new P._Future__asyncComplete_closure0(this, value));
    },
    _asyncCompleteError$2: function(error, stackTrace) {
      var t1;
      this._markPendingCompletion$0();
      t1 = this._zone;
      t1.toString;
      P._rootScheduleMicrotask(null, null, t1, new P._Future__asyncCompleteError_closure(this, error, stackTrace));
    },
    $isFuture: 1,
    static: {_Future__chainForeignFuture: function(source, target) {
        target._state = 2;
        source.then$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target));
      }, _Future__chainCoreFuture: function(source, target) {
        var listener;
        target._state = 2;
        listener = new P._FutureListener(null, target, 0, null, null);
        if (source._state >= 4)
          P._Future__propagateToListeners(source, listener);
        else
          source._addListener$1(listener);
      }, _Future__propagateToListeners: function(source, listeners) {
        var t1, t2, t3, hasError, asyncError, t4, listeners0, sourceValue, zone, oldZone, chainSource, result;
        t1 = {};
        t1.source_4 = source;
        for (t2 = source; true;) {
          t3 = {};
          hasError = t2.get$_hasError();
          if (listeners == null) {
            if (hasError) {
              asyncError = t1.source_4.get$_error();
              t2 = t1.source_4.get$_zone();
              t3 = J.get$error$x(asyncError);
              t4 = asyncError.get$stackTrace();
              t2.toString;
              P._rootHandleUncaughtError(null, null, t2, t3, t4);
            }
            return;
          }
          for (; listeners.get$_nextListener() != null; listeners = listeners0) {
            listeners0 = listeners._nextListener;
            listeners._nextListener = null;
            P._Future__propagateToListeners(t1.source_4, listeners);
          }
          t3.listenerHasValue_1 = true;
          sourceValue = hasError ? null : t1.source_4.get$_value();
          t3.listenerValueOrError_2 = sourceValue;
          t3.isPropagationAborted_3 = false;
          t2 = !hasError;
          if (!t2 || listeners.get$handlesValue() || listeners.state === 8) {
            zone = listeners.get$_zone();
            if (hasError) {
              t4 = t1.source_4.get$_zone();
              t4.toString;
              if (t4 == null ? zone != null : t4 !== zone) {
                t4 = t4.get$errorZone();
                zone.toString;
                t4 = t4 === zone;
              } else
                t4 = true;
              t4 = !t4;
            } else
              t4 = false;
            if (t4) {
              asyncError = t1.source_4.get$_error();
              t2 = t1.source_4.get$_zone();
              t3 = J.get$error$x(asyncError);
              t4 = asyncError.get$stackTrace();
              t2.toString;
              P._rootHandleUncaughtError(null, null, t2, t3, t4);
              return;
            }
            oldZone = $.Zone__current;
            if (oldZone == null ? zone != null : oldZone !== zone)
              $.Zone__current = zone;
            else
              oldZone = null;
            if (t2) {
              if (listeners.get$handlesValue())
                t3.listenerHasValue_1 = new P._Future__propagateToListeners_handleValueCallback(t3, listeners, sourceValue, zone).call$0();
            } else
              new P._Future__propagateToListeners_handleError(t1, t3, listeners, zone).call$0();
            if (listeners.get$handlesComplete())
              new P._Future__propagateToListeners_handleWhenCompleteCallback(t1, t3, hasError, listeners, zone).call$0();
            if (oldZone != null)
              $.Zone__current = oldZone;
            if (t3.isPropagationAborted_3)
              return;
            if (t3.listenerHasValue_1 === true) {
              t2 = t3.listenerValueOrError_2;
              t2 = (sourceValue == null ? t2 != null : sourceValue !== t2) && !!J.getInterceptor(t2).$isFuture;
            } else
              t2 = false;
            if (t2) {
              chainSource = t3.listenerValueOrError_2;
              result = listeners.result;
              if (chainSource instanceof P._Future)
                if (chainSource._state >= 4) {
                  result._state = 2;
                  t1.source_4 = chainSource;
                  listeners = new P._FutureListener(null, result, 0, null, null);
                  t2 = chainSource;
                  continue;
                } else
                  P._Future__chainCoreFuture(chainSource, result);
              else
                P._Future__chainForeignFuture(chainSource, result);
              return;
            }
          }
          result = listeners.result;
          listeners = result._removeListeners$0();
          t2 = t3.listenerHasValue_1;
          t3 = t3.listenerValueOrError_2;
          if (t2 === true) {
            result._state = 4;
            result._resultOrListeners = t3;
          } else {
            result._state = 8;
            result._resultOrListeners = t3;
          }
          t1.source_4 = result;
          t2 = result;
        }
      }}
  },
  _Future__addListener_closure: {
    "^": "Closure:4;this_0,listener_1",
    call$0: function() {
      P._Future__propagateToListeners(this.this_0, this.listener_1);
    }
  },
  _Future__chainForeignFuture_closure: {
    "^": "Closure:1;target_0",
    call$1: function(value) {
      this.target_0._completeWithValue$1(value);
    }
  },
  _Future__chainForeignFuture_closure0: {
    "^": "Closure:12;target_1",
    call$2: function(error, stackTrace) {
      this.target_1._completeError$2(error, stackTrace);
    },
    call$1: function(error) {
      return this.call$2(error, null);
    }
  },
  _Future__asyncComplete_closure: {
    "^": "Closure:4;this_0,coreFuture_1",
    call$0: function() {
      P._Future__chainCoreFuture(this.coreFuture_1, this.this_0);
    }
  },
  _Future__asyncComplete_closure0: {
    "^": "Closure:4;this_2,value_3",
    call$0: function() {
      this.this_2._completeWithValue$1(this.value_3);
    }
  },
  _Future__asyncCompleteError_closure: {
    "^": "Closure:4;this_0,error_1,stackTrace_2",
    call$0: function() {
      this.this_0._completeError$2(this.error_1, this.stackTrace_2);
    }
  },
  _Future__propagateToListeners_handleValueCallback: {
    "^": "Closure:13;box_1,listener_3,sourceValue_4,zone_5",
    call$0: function() {
      var e, s, exception, t1;
      try {
        this.box_1.listenerValueOrError_2 = this.zone_5.runUnary$2(this.listener_3.get$_onValue(), this.sourceValue_4);
        return true;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = H.getTraceFromException(exception);
        this.box_1.listenerValueOrError_2 = new P.AsyncError(e, s);
        return false;
      }
    }
  },
  _Future__propagateToListeners_handleError: {
    "^": "Closure:2;box_2,box_1,listener_6,zone_7",
    call$0: function() {
      var asyncError, matchesTest, test, e, s, errorCallback, e0, s0, t1, exception, t2, listenerValueOrError, t3, t4;
      asyncError = this.box_2.source_4.get$_error();
      matchesTest = true;
      t1 = this.listener_6;
      if (t1.get$hasErrorTest()) {
        test = t1.callback;
        try {
          matchesTest = this.zone_7.runUnary$2(test, J.get$error$x(asyncError));
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          t1 = J.get$error$x(asyncError);
          t2 = e;
          listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P.AsyncError(e, s);
          t1 = this.box_1;
          t1.listenerValueOrError_2 = listenerValueOrError;
          t1.listenerHasValue_1 = false;
          return;
        }
      }
      errorCallback = t1.errorCallback;
      if (matchesTest === true && errorCallback != null) {
        try {
          t1 = errorCallback;
          t2 = H.getDynamicRuntimeType();
          t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
          t3 = this.zone_7;
          t4 = this.box_1;
          if (t2)
            t4.listenerValueOrError_2 = t3.runBinary$3(errorCallback, J.get$error$x(asyncError), asyncError.get$stackTrace());
          else
            t4.listenerValueOrError_2 = t3.runUnary$2(errorCallback, J.get$error$x(asyncError));
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e0 = t1;
          s0 = H.getTraceFromException(exception);
          t1 = J.get$error$x(asyncError);
          t2 = e0;
          listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P.AsyncError(e0, s0);
          t1 = this.box_1;
          t1.listenerValueOrError_2 = listenerValueOrError;
          t1.listenerHasValue_1 = false;
          return;
        }
        this.box_1.listenerHasValue_1 = true;
      } else {
        t1 = this.box_1;
        t1.listenerValueOrError_2 = asyncError;
        t1.listenerHasValue_1 = false;
      }
    }
  },
  _Future__propagateToListeners_handleWhenCompleteCallback: {
    "^": "Closure:2;box_2,box_1,hasError_8,listener_9,zone_10",
    call$0: function() {
      var t1, e, s, completeResult, t2, exception, result;
      t1 = {};
      t1.completeResult_0 = null;
      try {
        completeResult = this.zone_10.run$1(this.listener_9.get$_whenCompleteAction());
        t1.completeResult_0 = completeResult;
        t2 = completeResult;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = H.getTraceFromException(exception);
        if (this.hasError_8) {
          t1 = J.get$error$x(this.box_2.source_4.get$_error());
          t2 = e;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        t2 = this.box_1;
        if (t1)
          t2.listenerValueOrError_2 = this.box_2.source_4.get$_error();
        else
          t2.listenerValueOrError_2 = new P.AsyncError(e, s);
        t2.listenerHasValue_1 = false;
        return;
      }
      if (!!J.getInterceptor(t2).$isFuture) {
        t2 = this.listener_9;
        result = t2.get$result(t2);
        result.set$_isChained(true);
        this.box_1.isPropagationAborted_3 = true;
        t1.completeResult_0.then$2$onError(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(this.box_2, result), new P._Future__propagateToListeners_handleWhenCompleteCallback_closure0(t1, result));
      }
    }
  },
  _Future__propagateToListeners_handleWhenCompleteCallback_closure: {
    "^": "Closure:1;box_2,result_11",
    call$1: function(ignored) {
      P._Future__propagateToListeners(this.box_2.source_4, new P._FutureListener(null, this.result_11, 0, null, null));
    }
  },
  _Future__propagateToListeners_handleWhenCompleteCallback_closure0: {
    "^": "Closure:12;box_0,result_12",
    call$2: function(error, stackTrace) {
      var t1, completeResult;
      t1 = this.box_0;
      if (!(t1.completeResult_0 instanceof P._Future)) {
        completeResult = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
        t1.completeResult_0 = completeResult;
        completeResult._setError$2(error, stackTrace);
      }
      P._Future__propagateToListeners(t1.completeResult_0, new P._FutureListener(null, this.result_12, 0, null, null));
    },
    call$1: function(error) {
      return this.call$2(error, null);
    }
  },
  _AsyncCallbackEntry: {
    "^": "Object;callback,next@",
    callback$0: function() {
      return this.callback.call$0();
    }
  },
  Stream: {
    "^": "Object;",
    map$1: function(_, convert) {
      return H.setRuntimeTypeInfo(new P._MapStream(convert, this), [H.getRuntimeTypeArgument(this, "Stream", 0), null]);
    },
    contains$1: function(_, needle) {
      var t1, future;
      t1 = {};
      future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [P.bool]);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_contains_closure(t1, this, needle, future), true, new P.Stream_contains_closure0(future), future.get$_completeError());
      return future;
    },
    forEach$1: function(_, action) {
      var t1, future;
      t1 = {};
      future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
      return future;
    },
    get$length: function(_) {
      var t1, future;
      t1 = {};
      future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [P.$int]);
      t1.count_0 = 0;
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    },
    toList$0: function(_) {
      var result, future;
      result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(this, "Stream", 0)]);
      future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [[P.List, H.getRuntimeTypeArgument(this, "Stream", 0)]]);
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_toList_closure(this, result), true, new P.Stream_toList_closure0(result, future), future.get$_completeError());
      return future;
    },
    get$first: function(_) {
      var t1, future;
      t1 = {};
      future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [H.getRuntimeTypeArgument(this, "Stream", 0)]);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_first_closure(t1, this, future), true, new P.Stream_first_closure0(future), future.get$_completeError());
      return future;
    }
  },
  Stream_contains_closure: {
    "^": "Closure;box_0,this_1,needle_2,future_3",
    call$1: function(element) {
      var t1, t2;
      t1 = this.box_0;
      t2 = this.future_3;
      P._runUserCode(new P.Stream_contains__closure(this.needle_2, element), new P.Stream_contains__closure0(t1, t2), P._cancelAndErrorClosure(t1.subscription_0, t2));
    },
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_contains__closure: {
    "^": "Closure:4;needle_4,element_5",
    call$0: function() {
      return J.$eq(this.element_5, this.needle_4);
    }
  },
  Stream_contains__closure0: {
    "^": "Closure:0;box_0,future_6",
    call$1: function(isMatch) {
      if (isMatch === true)
        P._cancelAndValue(this.box_0.subscription_0, this.future_6, true);
    }
  },
  Stream_contains_closure0: {
    "^": "Closure:4;future_7",
    call$0: function() {
      this.future_7._complete$1(false);
    }
  },
  Stream_forEach_closure: {
    "^": "Closure;box_0,this_1,action_2,future_3",
    call$1: function(element) {
      P._runUserCode(new P.Stream_forEach__closure(this.action_2, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this.box_0.subscription_0, this.future_3));
    },
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_forEach__closure: {
    "^": "Closure:4;action_4,element_5",
    call$0: function() {
      return this.action_4.call$1(this.element_5);
    }
  },
  Stream_forEach__closure0: {
    "^": "Closure:1;",
    call$1: function(_) {
    }
  },
  Stream_forEach_closure0: {
    "^": "Closure:4;future_6",
    call$0: function() {
      this.future_6._complete$1(null);
    }
  },
  Stream_length_closure: {
    "^": "Closure:1;box_0",
    call$1: function(_) {
      ++this.box_0.count_0;
    }
  },
  Stream_length_closure0: {
    "^": "Closure:4;box_0,future_1",
    call$0: function() {
      this.future_1._complete$1(this.box_0.count_0);
    }
  },
  Stream_toList_closure: {
    "^": "Closure;this_0,result_1",
    call$1: function(data) {
      this.result_1.push(data);
    },
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_0, "Stream");
    }
  },
  Stream_toList_closure0: {
    "^": "Closure:4;result_2,future_3",
    call$0: function() {
      this.future_3._complete$1(this.result_2);
    }
  },
  Stream_first_closure: {
    "^": "Closure;box_0,this_1,future_2",
    call$1: function(value) {
      P._cancelAndValue(this.box_0.subscription_0, this.future_2, value);
    },
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_first_closure0: {
    "^": "Closure:4;future_3",
    call$0: function() {
      var e, s, t1, exception;
      try {
        t1 = H.IterableElementError_noElement();
        throw H.wrapException(t1);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = H.getTraceFromException(exception);
        P._completeWithErrorCallback(this.future_3, e, s);
      }
    }
  },
  StreamSubscription: {
    "^": "Object;"
  },
  _EventSink: {
    "^": "Object;"
  },
  _BufferingStreamSubscription: {
    "^": "Object;_zone<",
    pause$1: function(_, resumeSignal) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      this._state = (t1 + 128 | 4) >>> 0;
      if (t1 < 128 && this._pending != null)
        this._pending.cancelSchedule$0();
      if ((t1 & 4) === 0 && (this._state & 32) === 0)
        this._guardCallback$1(this.get$_onPause());
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    resume$0: function() {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 >= 128) {
        t1 -= 128;
        this._state = t1;
        if (t1 < 128) {
          if ((t1 & 64) !== 0) {
            t1 = this._pending;
            t1 = !t1.get$isEmpty(t1);
          } else
            t1 = false;
          if (t1)
            this._pending.schedule$1(this);
          else {
            t1 = (this._state & 4294967291) >>> 0;
            this._state = t1;
            if ((t1 & 32) === 0)
              this._guardCallback$1(this.get$_onResume());
          }
        }
      }
    },
    cancel$0: function() {
      var t1 = (this._state & 4294967279) >>> 0;
      this._state = t1;
      if ((t1 & 8) !== 0)
        return this._cancelFuture;
      this._cancel$0();
      return this._cancelFuture;
    },
    _cancel$0: function() {
      var t1 = (this._state | 8) >>> 0;
      this._state = t1;
      if ((t1 & 64) !== 0)
        this._pending.cancelSchedule$0();
      if ((this._state & 32) === 0)
        this._pending = null;
      this._cancelFuture = this._onCancel$0();
    },
    _async$_add$1: ["super$_BufferingStreamSubscription$_async$_add$1", function(data) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendData$1(data);
      else
        this._addPending$1(new P._DelayedData(data, null));
    }],
    _addError$2: ["super$_BufferingStreamSubscription$_addError$2", function(error, stackTrace) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendError$2(error, stackTrace);
      else
        this._addPending$1(new P._DelayedError(error, stackTrace, null));
    }],
    _async$_close$0: function() {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      t1 = (t1 | 2) >>> 0;
      this._state = t1;
      if (t1 < 32)
        this._sendDone$0();
      else
        this._addPending$1(C.C__DelayedDone);
    },
    _onPause$0: [function() {
    }, "call$0", "get$_onPause", 0, 0, 2],
    _onResume$0: [function() {
    }, "call$0", "get$_onResume", 0, 0, 2],
    _onCancel$0: function() {
      return;
    },
    _addPending$1: function($event) {
      var pending, t1;
      pending = this._pending;
      if (pending == null) {
        pending = new P._StreamImplEvents(null, null, 0);
        this._pending = pending;
      }
      pending.add$1(0, $event);
      t1 = this._state;
      if ((t1 & 64) === 0) {
        t1 = (t1 | 64) >>> 0;
        this._state = t1;
        if (t1 < 128)
          this._pending.schedule$1(this);
      }
    },
    _sendData$1: function(data) {
      var t1 = this._state;
      this._state = (t1 | 32) >>> 0;
      this._zone.runUnaryGuarded$2(this._async$_onData, data);
      this._state = (this._state & 4294967263) >>> 0;
      this._checkState$1((t1 & 4) !== 0);
    },
    _sendError$2: function(error, stackTrace) {
      var t1, t2;
      t1 = this._state;
      t2 = new P._BufferingStreamSubscription__sendError_sendError(this, error, stackTrace);
      if ((t1 & 1) !== 0) {
        this._state = (t1 | 16) >>> 0;
        this._cancel$0();
        t1 = this._cancelFuture;
        if (!!J.getInterceptor(t1).$isFuture)
          t1.whenComplete$1(t2);
        else
          t2.call$0();
      } else {
        t2.call$0();
        this._checkState$1((t1 & 4) !== 0);
      }
    },
    _sendDone$0: function() {
      var t1, t2;
      t1 = new P._BufferingStreamSubscription__sendDone_sendDone(this);
      this._cancel$0();
      this._state = (this._state | 16) >>> 0;
      t2 = this._cancelFuture;
      if (!!J.getInterceptor(t2).$isFuture)
        t2.whenComplete$1(t1);
      else
        t1.call$0();
    },
    _guardCallback$1: function(callback) {
      var t1 = this._state;
      this._state = (t1 | 32) >>> 0;
      callback.call$0();
      this._state = (this._state & 4294967263) >>> 0;
      this._checkState$1((t1 & 4) !== 0);
    },
    _checkState$1: function(wasInputPaused) {
      var t1, isInputPaused;
      if ((this._state & 64) !== 0) {
        t1 = this._pending;
        t1 = t1.get$isEmpty(t1);
      } else
        t1 = false;
      if (t1) {
        t1 = (this._state & 4294967231) >>> 0;
        this._state = t1;
        if ((t1 & 4) !== 0)
          if (t1 < 128) {
            t1 = this._pending;
            t1 = t1 == null || t1.get$isEmpty(t1);
          } else
            t1 = false;
        else
          t1 = false;
        if (t1)
          this._state = (this._state & 4294967291) >>> 0;
      }
      for (; true; wasInputPaused = isInputPaused) {
        t1 = this._state;
        if ((t1 & 8) !== 0) {
          this._pending = null;
          return;
        }
        isInputPaused = (t1 & 4) !== 0;
        if (wasInputPaused === isInputPaused)
          break;
        this._state = (t1 ^ 32) >>> 0;
        if (isInputPaused)
          this._onPause$0();
        else
          this._onResume$0();
        this._state = (this._state & 4294967263) >>> 0;
      }
      t1 = this._state;
      if ((t1 & 64) !== 0 && t1 < 128)
        this._pending.schedule$1(this);
    },
    _BufferingStreamSubscription$4: function(onData, onError, onDone, cancelOnError) {
      var t1 = this._zone;
      t1.toString;
      this._async$_onData = onData;
      this._onError = P._registerErrorHandler(onError, t1);
      this._onDone = onDone;
    }
  },
  _BufferingStreamSubscription__sendError_sendError: {
    "^": "Closure:2;this_0,error_1,stackTrace_2",
    call$0: function() {
      var t1, t2, t3, t4, t5, t6;
      t1 = this.this_0;
      t2 = t1._state;
      if ((t2 & 8) !== 0 && (t2 & 16) === 0)
        return;
      t1._state = (t2 | 32) >>> 0;
      t2 = t1._onError;
      t3 = H.getDynamicRuntimeType();
      t3 = H.buildFunctionType(t3, [t3, t3])._isTest$1(t2);
      t4 = t1._zone;
      t5 = this.error_1;
      t6 = t1._onError;
      if (t3)
        t4.runBinaryGuarded$3(t6, t5, this.stackTrace_2);
      else
        t4.runUnaryGuarded$2(t6, t5);
      t1._state = (t1._state & 4294967263) >>> 0;
    }
  },
  _BufferingStreamSubscription__sendDone_sendDone: {
    "^": "Closure:2;this_0",
    call$0: function() {
      var t1, t2;
      t1 = this.this_0;
      t2 = t1._state;
      if ((t2 & 16) === 0)
        return;
      t1._state = (t2 | 42) >>> 0;
      t1._zone.runGuarded$1(t1._onDone);
      t1._state = (t1._state & 4294967263) >>> 0;
    }
  },
  _DelayedEvent: {
    "^": "Object;next@"
  },
  _DelayedData: {
    "^": "_DelayedEvent;value,next",
    perform$1: function(dispatch) {
      dispatch._sendData$1(this.value);
    }
  },
  _DelayedError: {
    "^": "_DelayedEvent;error>,stackTrace<,next",
    perform$1: function(dispatch) {
      dispatch._sendError$2(this.error, this.stackTrace);
    }
  },
  _DelayedDone: {
    "^": "Object;",
    perform$1: function(dispatch) {
      dispatch._sendDone$0();
    },
    get$next: function() {
      return;
    },
    set$next: function(_) {
      throw H.wrapException(P.StateError$("No events after a done."));
    }
  },
  _PendingEvents: {
    "^": "Object;",
    schedule$1: function(dispatch) {
      var t1 = this._state;
      if (t1 === 1)
        return;
      if (t1 >= 1) {
        this._state = 1;
        return;
      }
      P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
      this._state = 1;
    },
    cancelSchedule$0: function() {
      if (this._state === 1)
        this._state = 3;
    }
  },
  _PendingEvents_schedule_closure: {
    "^": "Closure:4;this_0,dispatch_1",
    call$0: function() {
      var t1, oldState;
      t1 = this.this_0;
      oldState = t1._state;
      t1._state = 0;
      if (oldState === 3)
        return;
      t1.handleNext$1(this.dispatch_1);
    }
  },
  _StreamImplEvents: {
    "^": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
    get$isEmpty: function(_) {
      return this.lastPendingEvent == null;
    },
    add$1: function(_, $event) {
      var t1 = this.lastPendingEvent;
      if (t1 == null) {
        this.lastPendingEvent = $event;
        this.firstPendingEvent = $event;
      } else {
        t1.set$next($event);
        this.lastPendingEvent = $event;
      }
    },
    handleNext$1: function(dispatch) {
      var $event, t1;
      $event = this.firstPendingEvent;
      t1 = $event.get$next();
      this.firstPendingEvent = t1;
      if (t1 == null)
        this.lastPendingEvent = null;
      $event.perform$1(dispatch);
    }
  },
  _cancelAndError_closure: {
    "^": "Closure:4;future_0,error_1,stackTrace_2",
    call$0: function() {
      return this.future_0._completeError$2(this.error_1, this.stackTrace_2);
    }
  },
  _cancelAndErrorClosure_closure: {
    "^": "Closure:14;subscription_0,future_1",
    call$2: function(error, stackTrace) {
      return P._cancelAndError(this.subscription_0, this.future_1, error, stackTrace);
    }
  },
  _cancelAndValue_closure: {
    "^": "Closure:4;future_0,value_1",
    call$0: function() {
      return this.future_0._complete$1(this.value_1);
    }
  },
  _ForwardingStream: {
    "^": "Stream;",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      return this._createSubscription$4(onData, onError, onDone, true === cancelOnError);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
      return P._ForwardingStreamSubscription$(this, onData, onError, onDone, cancelOnError, H.getRuntimeTypeArgument(this, "_ForwardingStream", 0), H.getRuntimeTypeArgument(this, "_ForwardingStream", 1));
    },
    _handleData$2: function(data, sink) {
      sink._async$_add$1(data);
    },
    $asStream: function($S, $T) {
      return [$T];
    }
  },
  _ForwardingStreamSubscription: {
    "^": "_BufferingStreamSubscription;_stream,_subscription,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
    _async$_add$1: function(data) {
      if ((this._state & 2) !== 0)
        return;
      this.super$_BufferingStreamSubscription$_async$_add$1(data);
    },
    _addError$2: function(error, stackTrace) {
      if ((this._state & 2) !== 0)
        return;
      this.super$_BufferingStreamSubscription$_addError$2(error, stackTrace);
    },
    _onPause$0: [function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.pause$0(0);
    }, "call$0", "get$_onPause", 0, 0, 2],
    _onResume$0: [function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.resume$0();
    }, "call$0", "get$_onResume", 0, 0, 2],
    _onCancel$0: function() {
      var t1 = this._subscription;
      if (t1 != null) {
        this._subscription = null;
        t1.cancel$0();
      }
      return;
    },
    _handleData$1: [function(data) {
      this._stream._handleData$2(data, this);
    }, "call$1", "get$_handleData", 2, 0, function() {
      return H.computeSignature(function(S, T) {
        return {func: "void__S", void: true, args: [S]};
      }, this.$receiver, "_ForwardingStreamSubscription");
    }],
    _handleError$2: [function(error, stackTrace) {
      this._addError$2(error, stackTrace);
    }, "call$2", "get$_handleError", 4, 0, 15],
    _handleDone$0: [function() {
      this._async$_close$0();
    }, "call$0", "get$_handleDone", 0, 0, 2],
    _ForwardingStreamSubscription$5: function(_stream, onData, onError, onDone, cancelOnError, $S, $T) {
      var t1, t2;
      t1 = this.get$_handleData();
      t2 = this.get$_handleError();
      this._subscription = this._stream._async$_source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2);
    },
    static: {_ForwardingStreamSubscription$: function(_stream, onData, onError, onDone, cancelOnError, $S, $T) {
        var t1, t2;
        t1 = $.Zone__current;
        t2 = cancelOnError ? 1 : 0;
        t2 = H.setRuntimeTypeInfo(new P._ForwardingStreamSubscription(_stream, null, null, null, null, t1, t2, null, null), [$S, $T]);
        t2._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError);
        t2._ForwardingStreamSubscription$5(_stream, onData, onError, onDone, cancelOnError, $S, $T);
        return t2;
      }}
  },
  _MapStream: {
    "^": "_ForwardingStream;_transform,_async$_source",
    _handleData$2: function(inputEvent, sink) {
      var outputEvent, e, s, exception, t1;
      outputEvent = null;
      try {
        outputEvent = this._transform$1(inputEvent);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = H.getTraceFromException(exception);
        $.Zone__current.toString;
        sink._addError$2(e, s);
        return;
      }
      sink._async$_add$1(outputEvent);
    },
    _transform$1: function(arg0) {
      return this._transform.call$1(arg0);
    }
  },
  AsyncError: {
    "^": "Object;error>,stackTrace<",
    toString$0: function(_) {
      return H.S(this.error);
    },
    $isError: 1
  },
  _Zone: {
    "^": "Object;"
  },
  _rootHandleUncaughtError_closure: {
    "^": "Closure:4;error_0,stackTrace_1",
    call$0: function() {
      var t1 = this.error_0;
      throw H.wrapException(new P._UncaughtAsyncError(t1, P._UncaughtAsyncError__getBestStackTrace(t1, this.stackTrace_1)));
    }
  },
  _RootZone: {
    "^": "_Zone;",
    get$errorZone: function() {
      return this;
    },
    runGuarded$1: function(f) {
      var e, s, t1, exception;
      try {
        if (C.C__RootZone === $.Zone__current) {
          t1 = f.call$0();
          return t1;
        }
        t1 = P._rootRun(null, null, this, f);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = H.getTraceFromException(exception);
        return P._rootHandleUncaughtError(null, null, this, e, s);
      }
    },
    runUnaryGuarded$2: function(f, arg) {
      var e, s, t1, exception;
      try {
        if (C.C__RootZone === $.Zone__current) {
          t1 = f.call$1(arg);
          return t1;
        }
        t1 = P._rootRunUnary(null, null, this, f, arg);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = H.getTraceFromException(exception);
        return P._rootHandleUncaughtError(null, null, this, e, s);
      }
    },
    runBinaryGuarded$3: function(f, arg1, arg2) {
      var e, s, t1, exception;
      try {
        if (C.C__RootZone === $.Zone__current) {
          t1 = f.call$2(arg1, arg2);
          return t1;
        }
        t1 = P._rootRunBinary(null, null, this, f, arg1, arg2);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = H.getTraceFromException(exception);
        return P._rootHandleUncaughtError(null, null, this, e, s);
      }
    },
    bindCallback$2$runGuarded: function(f, runGuarded) {
      if (runGuarded)
        return new P._RootZone_bindCallback_closure(this, f);
      else
        return new P._RootZone_bindCallback_closure0(this, f);
    },
    bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
      if (runGuarded)
        return new P._RootZone_bindUnaryCallback_closure(this, f);
      else
        return new P._RootZone_bindUnaryCallback_closure0(this, f);
    },
    $index: function(_, key) {
      return;
    },
    run$1: function(f) {
      if ($.Zone__current === C.C__RootZone)
        return f.call$0();
      return P._rootRun(null, null, this, f);
    },
    runUnary$2: function(f, arg) {
      if ($.Zone__current === C.C__RootZone)
        return f.call$1(arg);
      return P._rootRunUnary(null, null, this, f, arg);
    },
    runBinary$3: function(f, arg1, arg2) {
      if ($.Zone__current === C.C__RootZone)
        return f.call$2(arg1, arg2);
      return P._rootRunBinary(null, null, this, f, arg1, arg2);
    }
  },
  _RootZone_bindCallback_closure: {
    "^": "Closure:4;this_0,f_1",
    call$0: function() {
      return this.this_0.runGuarded$1(this.f_1);
    }
  },
  _RootZone_bindCallback_closure0: {
    "^": "Closure:4;this_2,f_3",
    call$0: function() {
      return this.this_2.run$1(this.f_3);
    }
  },
  _RootZone_bindUnaryCallback_closure: {
    "^": "Closure:1;this_0,f_1",
    call$1: function(arg) {
      return this.this_0.runUnaryGuarded$2(this.f_1, arg);
    }
  },
  _RootZone_bindUnaryCallback_closure0: {
    "^": "Closure:1;this_2,f_3",
    call$1: function(arg) {
      return this.this_2.runUnary$2(this.f_3, arg);
    }
  }
}],
["dart.collection", "dart:collection", , P, {
  "^": "",
  LinkedHashMap_LinkedHashMap$_literal: function(keyValuePairs, $K, $V) {
    return H.fillLiteralMap(keyValuePairs, H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]));
  },
  LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
    return H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]);
  },
  _defaultEquals: [function(a, b) {
    return J.$eq(a, b);
  }, "call$2", "_defaultEquals$closure", 4, 0, 31],
  _defaultHashCode: [function(a) {
    return J.get$hashCode$(a);
  }, "call$1", "_defaultHashCode$closure", 2, 0, 32],
  IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
    var parts, t1;
    if (P.IterableBase__isToStringVisiting(iterable)) {
      if (leftDelimiter === "(" && rightDelimiter === ")")
        return "(...)";
      return leftDelimiter + "..." + rightDelimiter;
    }
    parts = [];
    t1 = $.get$IterableBase__toStringVisiting();
    t1.push(iterable);
    try {
      P.IterableBase__iterablePartsToStrings(iterable, parts);
    } finally {
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    t1 = new P.StringBuffer(leftDelimiter);
    t1.writeAll$2(parts, ", ");
    t1 = t1._contents += rightDelimiter;
    return t1.charCodeAt(0) == 0 ? t1 : t1;
  },
  IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
    var buffer, t1;
    if (P.IterableBase__isToStringVisiting(iterable))
      return leftDelimiter + "..." + rightDelimiter;
    buffer = new P.StringBuffer(leftDelimiter);
    t1 = $.get$IterableBase__toStringVisiting();
    t1.push(iterable);
    try {
      buffer.writeAll$2(iterable, ", ");
    } finally {
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    t1 = buffer;
    t1._contents = t1.get$_contents() + rightDelimiter;
    t1 = buffer.get$_contents();
    return t1.charCodeAt(0) == 0 ? t1 : t1;
  },
  IterableBase__isToStringVisiting: function(o) {
    var i, t1;
    for (i = 0; t1 = $.get$IterableBase__toStringVisiting(), i < t1.length; ++i) {
      t1 = t1[i];
      if (o == null ? t1 == null : o === t1)
        return true;
    }
    return false;
  },
  IterableBase__iterablePartsToStrings: function(iterable, parts) {
    var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
    it = iterable.get$iterator(iterable);
    $length = 0;
    count = 0;
    while (true) {
      if (!($length < 80 || count < 3))
        break;
      if (!it.moveNext$0())
        return;
      next = H.S(it.get$current());
      parts.push(next);
      $length += next.length + 2;
      ++count;
    }
    if (!it.moveNext$0()) {
      if (count <= 5)
        return;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      ultimateString = parts.pop();
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      penultimateString = parts.pop();
    } else {
      penultimate = it.get$current();
      ++count;
      if (!it.moveNext$0()) {
        if (count <= 4) {
          parts.push(H.S(penultimate));
          return;
        }
        ultimateString = H.S(penultimate);
        if (0 >= parts.length)
          return H.ioore(parts, 0);
        penultimateString = parts.pop();
        $length += ultimateString.length + 2;
      } else {
        ultimate = it.get$current();
        ++count;
        for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
          ultimate0 = it.get$current();
          ++count;
          if (count > 100) {
            while (true) {
              if (!($length > 75 && count > 3))
                break;
              if (0 >= parts.length)
                return H.ioore(parts, 0);
              $length -= parts.pop().length + 2;
              --count;
            }
            parts.push("...");
            return;
          }
        }
        penultimateString = H.S(penultimate);
        ultimateString = H.S(ultimate);
        $length += ultimateString.length + penultimateString.length + 4;
      }
    }
    if (count > parts.length + 2) {
      $length += 5;
      elision = "...";
    } else
      elision = null;
    while (true) {
      if (!($length > 80 && parts.length > 3))
        break;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      $length -= parts.pop().length + 2;
      if (elision == null) {
        $length += 5;
        elision = "...";
      }
    }
    if (elision != null)
      parts.push(elision);
    parts.push(penultimateString);
    parts.push(ultimateString);
  },
  LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
    var t1 = new H.JsLinkedHashMap(0, null, null, null, null, null, 0);
    t1.$builtinTypeInfo = [$K, $V];
    return t1;
  },
  LinkedHashMap_LinkedHashMap$identity: function($K, $V) {
    return H.setRuntimeTypeInfo(new P._LinkedIdentityHashMap(0, null, null, null, null, null, 0), [$K, $V]);
  },
  LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
    return H.setRuntimeTypeInfo(new P._LinkedHashSet(0, null, null, null, null, null, 0), [$E]);
  },
  Maps_mapToString: function(m) {
    var t1, result, t2;
    t1 = {};
    if (P.IterableBase__isToStringVisiting(m))
      return "{...}";
    result = new P.StringBuffer("");
    try {
      $.get$IterableBase__toStringVisiting().push(m);
      t2 = result;
      t2._contents = t2.get$_contents() + "{";
      t1.first_0 = true;
      J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
      t1 = result;
      t1._contents = t1.get$_contents() + "}";
    } finally {
      t1 = $.get$IterableBase__toStringVisiting();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    t1 = result.get$_contents();
    return t1.charCodeAt(0) == 0 ? t1 : t1;
  },
  _LinkedIdentityHashMap: {
    "^": "JsLinkedHashMap;__js_helper$_length,__js_helper$_strings,__js_helper$_nums,__js_helper$_rest,__js_helper$_first,__js_helper$_last,__js_helper$_modifications",
    internalComputeHashCode$1: function(key) {
      return H.objectHashCode(key) & 0x3ffffff;
    },
    internalFindBucketIndex$2: function(bucket, key) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i) {
        t1 = bucket[i].get$hashMapCellKey();
        if (t1 == null ? key == null : t1 === key)
          return i;
      }
      return -1;
    }
  },
  _LinkedHashSet: {
    "^": "_HashSetBase;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
    get$iterator: function(_) {
      var t1 = new P.LinkedHashSetIterator(this, this._modifications, null, null);
      t1._cell = this._first;
      return t1;
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    contains$1: function(_, object) {
      var strings, nums;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[object] != null;
      } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[object] != null;
      } else
        return this._contains$1(object);
    },
    _contains$1: function(object) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    },
    lookup$1: function(object) {
      var t1;
      if (!(typeof object === "string" && object !== "__proto__"))
        t1 = typeof object === "number" && (object & 0x3ffffff) === object;
      else
        t1 = true;
      if (t1)
        return this.contains$1(0, object) ? object : null;
      else
        return this._lookup$1(object);
    },
    _lookup$1: function(object) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return;
      return J.$index$asx(bucket, index).get$_collection$_element();
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$1(cell._collection$_element);
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell._next;
      }
    },
    get$first: function(_) {
      var t1 = this._first;
      if (t1 == null)
        throw H.wrapException(P.StateError$("No elements"));
      return t1._collection$_element;
    },
    add$1: function(_, element) {
      var strings, table, nums;
      if (typeof element === "string" && element !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._strings = table;
          strings = table;
        }
        return this._addHashTableEntry$2(strings, element);
      } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
        nums = this._nums;
        if (nums == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._nums = table;
          nums = table;
        }
        return this._addHashTableEntry$2(nums, element);
      } else
        return this._add$1(element);
    },
    _add$1: function(element) {
      var rest, hash, bucket;
      rest = this._rest;
      if (rest == null) {
        rest = P._LinkedHashSet__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$1(element)];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(this._newLinkedCell$1(element));
      }
      return true;
    },
    remove$1: function(_, object) {
      if (typeof object === "string" && object !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, object);
      else if (typeof object === "number" && (object & 0x3ffffff) === object)
        return this._removeHashTableEntry$2(this._nums, object);
      else
        return this._remove$1(object);
    },
    _remove$1: function(object) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      this._unlinkCell$1(bucket.splice(index, 1)[0]);
      return true;
    },
    clear$0: function(_) {
      if (this._collection$_length > 0) {
        this._last = null;
        this._first = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._collection$_length = 0;
        this._modifications = this._modifications + 1 & 67108863;
      }
    },
    _addHashTableEntry$2: function(table, element) {
      if (table[element] != null)
        return false;
      table[element] = this._newLinkedCell$1(element);
      return true;
    },
    _removeHashTableEntry$2: function(table, element) {
      var cell;
      if (table == null)
        return false;
      cell = table[element];
      if (cell == null)
        return false;
      this._unlinkCell$1(cell);
      delete table[element];
      return true;
    },
    _newLinkedCell$1: function(element) {
      var cell, last;
      cell = new P.LinkedHashSetCell(element, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last._next = cell;
        this._last = cell;
      }
      ++this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var previous, next;
      previous = cell.get$_previous();
      next = cell._next;
      if (previous == null)
        this._first = next;
      else
        previous._next = next;
      if (next == null)
        this._last = previous;
      else
        next._previous = previous;
      --this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i].get$_collection$_element(), element))
          return i;
      return -1;
    },
    $isEfficientLength: 1,
    static: {_LinkedHashSet__newHashTable: function() {
        var table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  LinkedHashSetCell: {
    "^": "Object;_collection$_element<,_next,_previous<"
  },
  LinkedHashSetIterator: {
    "^": "Object;_set,_modifications,_cell,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1 = this._set;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = t1._collection$_element;
          this._cell = t1._next;
          return true;
        }
      }
    }
  },
  _HashSetBase: {
    "^": "SetBase;"
  },
  IterableBase: {
    "^": "Object;",
    map$1: function(_, f) {
      return H.MappedIterable_MappedIterable(this, f, H.getRuntimeTypeArgument(this, "IterableBase", 0), null);
    },
    contains$1: function(_, element) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (J.$eq(t1.get$current(), element))
          return true;
      return false;
    },
    forEach$1: function(_, f) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1.get$current());
    },
    toList$1$growable: function(_, growable) {
      return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "IterableBase", 0));
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$length: function(_) {
      var it, count;
      it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$first: function(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      return it.get$current();
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element;
      if (index < 0)
        H.throwExpression(P.RangeError$range(index, 0, null, "index", null));
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current();
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    }
  },
  ListMixin: {
    "^": "Object;",
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, this.get$length(receiver), 0, null);
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    forEach$1: function(receiver, action) {
      var $length, i;
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (i >= receiver.length)
          return H.ioore(receiver, i);
        action.call$1(receiver[i]);
        if ($length !== receiver.length)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    get$first: function(receiver) {
      if (this.get$length(receiver) === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      if (0 >= receiver.length)
        return H.ioore(receiver, 0);
      return receiver[0];
    },
    contains$1: function(receiver, element) {
      var $length, t1, t2, i;
      $length = this.get$length(receiver);
      for (t1 = receiver.length, t2 = $length !== t1, i = 0; i < t1; ++i)
        if (t2)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      return false;
    },
    map$1: function(receiver, f) {
      return H.setRuntimeTypeInfo(new H.MappedListIterable(receiver, f), [null, null]);
    },
    add$1: function(receiver, element) {
      var t1 = this.get$length(receiver);
      this.set$length(receiver, t1 + 1);
      if (t1 < 0 || t1 >= receiver.length)
        return H.ioore(receiver, t1);
      receiver[t1] = element;
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    $isList: 1,
    $asList: null,
    $isEfficientLength: 1
  },
  Maps_mapToString_closure: {
    "^": "Closure:3;box_0,result_1",
    call$2: function(k, v) {
      var t1, t2;
      t1 = this.box_0;
      if (!t1.first_0)
        this.result_1._contents += ", ";
      t1.first_0 = false;
      t1 = this.result_1;
      t2 = t1._contents += H.S(k);
      t1._contents = t2 + ": ";
      t1._contents += H.S(v);
    }
  },
  ListQueue: {
    "^": "IterableBase;_table,_head,_tail,_modificationCount",
    get$iterator: function(_) {
      return new P._ListQueueIterator(this, this._tail, this._modificationCount, this._head, null);
    },
    forEach$1: function(_, action) {
      var modificationCount, i, t1;
      modificationCount = this._modificationCount;
      for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
        t1 = this._table;
        if (i < 0 || i >= t1.length)
          return H.ioore(t1, i);
        action.call$1(t1[i]);
        if (modificationCount !== this._modificationCount)
          H.throwExpression(P.ConcurrentModificationError$(this));
      }
    },
    get$isEmpty: function(_) {
      return this._head === this._tail;
    },
    get$length: function(_) {
      return (this._tail - this._head & this._table.length - 1) >>> 0;
    },
    get$first: function(_) {
      var t1, t2;
      t1 = this._head;
      if (t1 === this._tail)
        throw H.wrapException(H.IterableElementError_noElement());
      t2 = this._table;
      if (t1 >= t2.length)
        return H.ioore(t2, t1);
      return t2[t1];
    },
    add$1: function(_, element) {
      this._add$1(element);
    },
    clear$0: function(_) {
      var i, t1, t2, t3, t4;
      i = this._head;
      t1 = this._tail;
      if (i !== t1) {
        for (t2 = this._table, t3 = t2.length, t4 = t3 - 1; i !== t1; i = (i + 1 & t4) >>> 0) {
          if (i < 0 || i >= t3)
            return H.ioore(t2, i);
          t2[i] = null;
        }
        this._tail = 0;
        this._head = 0;
        ++this._modificationCount;
      }
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    removeFirst$0: function() {
      var t1, t2, t3, result;
      t1 = this._head;
      if (t1 === this._tail)
        throw H.wrapException(H.IterableElementError_noElement());
      ++this._modificationCount;
      t2 = this._table;
      t3 = t2.length;
      if (t1 >= t3)
        return H.ioore(t2, t1);
      result = t2[t1];
      t2[t1] = null;
      this._head = (t1 + 1 & t3 - 1) >>> 0;
      return result;
    },
    _add$1: function(element) {
      var t1, t2, t3;
      t1 = this._table;
      t2 = this._tail;
      t3 = t1.length;
      if (t2 < 0 || t2 >= t3)
        return H.ioore(t1, t2);
      t1[t2] = element;
      t3 = (t2 + 1 & t3 - 1) >>> 0;
      this._tail = t3;
      if (this._head === t3)
        this._grow$0();
      ++this._modificationCount;
    },
    _grow$0: function() {
      var t1, newTable, t2, split;
      t1 = Array(this._table.length * 2);
      t1.fixed$length = Array;
      newTable = H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
      t1 = this._table;
      t2 = this._head;
      split = t1.length - t2;
      C.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
      C.JSArray_methods.setRange$4(newTable, split, split + this._head, this._table, 0);
      this._head = 0;
      this._tail = this._table.length;
      this._table = newTable;
    },
    ListQueue$1: function(initialCapacity, $E) {
      var t1 = Array(8);
      t1.fixed$length = Array;
      this._table = H.setRuntimeTypeInfo(t1, [$E]);
    },
    $isEfficientLength: 1,
    static: {ListQueue$: function(initialCapacity, $E) {
        var t1 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [$E]);
        t1.ListQueue$1(initialCapacity, $E);
        return t1;
      }}
  },
  _ListQueueIterator: {
    "^": "Object;_queue,_collection$_end,_modificationCount,_collection$_position,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1, t2, t3;
      t1 = this._queue;
      if (this._modificationCount !== t1._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(t1));
      t2 = this._collection$_position;
      if (t2 === this._collection$_end) {
        this._collection$_current = null;
        return false;
      }
      t1 = t1._table;
      t3 = t1.length;
      if (t2 >= t3)
        return H.ioore(t1, t2);
      this._collection$_current = t1[t2];
      this._collection$_position = (t2 + 1 & t3 - 1) >>> 0;
      return true;
    }
  },
  SetMixin: {
    "^": "Object;",
    map$1: function(_, f) {
      return H.setRuntimeTypeInfo(new H.EfficientLengthMappedIterable(this, f), [H.getTypeArgumentByIndex(this, 0), null]);
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    forEach$1: function(_, f) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1._collection$_current);
    },
    join$1: function(_, separator) {
      var iterator, buffer, t1;
      iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      buffer = new P.StringBuffer("");
      if (separator === "") {
        do
          buffer._contents += H.S(iterator._collection$_current);
        while (iterator.moveNext$0());
      } else {
        buffer._contents = H.S(iterator._collection$_current);
        for (; iterator.moveNext$0();) {
          buffer._contents += separator;
          buffer._contents += H.S(iterator._collection$_current);
        }
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    get$first: function(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      return it._collection$_current;
    },
    $isEfficientLength: 1
  },
  SetBase: {
    "^": "SetMixin;"
  }
}],
["dart.convert", "dart:convert", , P, {
  "^": "",
  _convertJsonToDartLazy: function(object) {
    var i;
    if (object == null)
      return;
    if (typeof object != "object")
      return object;
    if (Object.getPrototypeOf(object) !== Array.prototype)
      return new P._JsonMap(object, Object.create(null), null);
    for (i = 0; i < object.length; ++i)
      object[i] = P._convertJsonToDartLazy(object[i]);
    return object;
  },
  _parseJson: function(source, reviver) {
    var parsed, e, t1, exception;
    t1 = source;
    if (typeof t1 !== "string")
      throw H.wrapException(P.ArgumentError$(source));
    parsed = null;
    try {
      parsed = JSON.parse(source);
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      throw H.wrapException(P.FormatException$(String(e), null, null));
    }
    return P._convertJsonToDartLazy(parsed);
  },
  _JsonMap: {
    "^": "Object;_original,_processed,_data",
    $index: function(_, key) {
      var t1, result;
      t1 = this._processed;
      if (t1 == null)
        return this._data.$index(0, key);
      else if (typeof key !== "string")
        return;
      else {
        result = t1[key];
        return typeof result == "undefined" ? this._process$1(key) : result;
      }
    },
    get$length: function(_) {
      var t1;
      if (this._processed == null) {
        t1 = this._data;
        t1 = t1.get$length(t1);
      } else
        t1 = this._computeKeys$0().length;
      return t1;
    },
    $indexSet: function(_, key, value) {
      var processed, original;
      if (this._processed == null)
        this._data.$indexSet(0, key, value);
      else if (this.containsKey$1(key)) {
        processed = this._processed;
        processed[key] = value;
        original = this._original;
        if (original == null ? processed != null : original !== processed)
          original[key] = null;
      } else
        this._upgrade$0().$indexSet(0, key, value);
    },
    containsKey$1: function(key) {
      if (this._processed == null)
        return this._data.containsKey$1(key);
      if (typeof key !== "string")
        return false;
      return Object.prototype.hasOwnProperty.call(this._original, key);
    },
    forEach$1: function(_, f) {
      var keys, i, key, value;
      if (this._processed == null)
        return this._data.forEach$1(0, f);
      keys = this._computeKeys$0();
      for (i = 0; i < keys.length; ++i) {
        key = keys[i];
        value = this._processed[key];
        if (typeof value == "undefined") {
          value = P._convertJsonToDartLazy(this._original[key]);
          this._processed[key] = value;
        }
        f.call$2(key, value);
        if (keys !== this._data)
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    _computeKeys$0: function() {
      var keys = this._data;
      if (keys == null) {
        keys = Object.keys(this._original);
        this._data = keys;
      }
      return keys;
    },
    _upgrade$0: function() {
      var result, keys, i, t1, key;
      if (this._processed == null)
        return this._data;
      result = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      keys = this._computeKeys$0();
      for (i = 0; t1 = keys.length, i < t1; ++i) {
        key = keys[i];
        result.$indexSet(0, key, this.$index(0, key));
      }
      if (t1 === 0)
        keys.push(null);
      else
        C.JSArray_methods.set$length(keys, 0);
      this._processed = null;
      this._original = null;
      this._data = result;
      return result;
    },
    _process$1: function(key) {
      var result;
      if (!Object.prototype.hasOwnProperty.call(this._original, key))
        return;
      result = P._convertJsonToDartLazy(this._original[key]);
      return this._processed[key] = result;
    },
    $isMap: 1,
    $asMap: $.functionThatReturnsNull
  },
  Codec: {
    "^": "Object;"
  },
  Converter: {
    "^": "Object;"
  },
  JsonCodec: {
    "^": "Codec;_reviver,_toEncodable",
    decode$2$reviver: function(source, reviver) {
      return P._parseJson(source, this.get$decoder()._reviver);
    },
    decode$1: function(source) {
      return this.decode$2$reviver(source, null);
    },
    get$decoder: function() {
      return C.JsonDecoder_null;
    }
  },
  JsonDecoder: {
    "^": "Converter;_reviver"
  }
}],
["dart.core", "dart:core", , P, {
  "^": "",
  _symbolToString: function(symbol) {
    return H.Symbol_getName(symbol);
  },
  Comparable_compare: [function(a, b) {
    return J.compareTo$1$ns(a, b);
  }, "call$2", "Comparable_compare$closure", 4, 0, 33],
  Error_safeToString: function(object) {
    if (typeof object === "number" || typeof object === "boolean" || null == object)
      return J.toString$0(object);
    if (typeof object === "string")
      return JSON.stringify(object);
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  },
  Exception_Exception: function(message) {
    return new P._ExceptionImplementation(message);
  },
  identical: [function(a, b) {
    return a == null ? b == null : a === b;
  }, "call$2", "identical$closure", 4, 0, 34],
  identityHashCode: [function(object) {
    return H.objectHashCode(object);
  }, "call$1", "identityHashCode$closure", 2, 0, 35],
  List_List$from: function(elements, growable, $E) {
    var list, t1;
    list = H.setRuntimeTypeInfo([], [$E]);
    for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
      list.push(t1.get$current());
    if (growable)
      return list;
    list.fixed$length = Array;
    return list;
  },
  print: function(object) {
    var line = H.S(object);
    H.printString(line);
  },
  NoSuchMethodError_toString_closure: {
    "^": "Closure:16;box_0",
    call$2: function(key, value) {
      var t1 = this.box_0;
      if (t1.i_1 > 0)
        t1.sb_0._contents += ", ";
      P._symbolToString(key);
    }
  },
  bool: {
    "^": "Object;"
  },
  "+bool": 0,
  Comparable: {
    "^": "Object;"
  },
  DateTime: {
    "^": "Object;",
    $isComparable: 1,
    $asComparable: $.functionThatReturnsNull
  },
  $double: {
    "^": "num;",
    $isComparable: 1,
    $asComparable: function() {
      return [P.num];
    }
  },
  "+double": 0,
  Duration: {
    "^": "Object;_duration<",
    $add: function(_, other) {
      return new P.Duration(this._duration + other.get$_duration());
    },
    $sub: function(_, other) {
      return new P.Duration(this._duration - other.get$_duration());
    },
    $mul: function(_, factor) {
      if (typeof factor !== "number")
        return H.iae(factor);
      return new P.Duration(C.JSNumber_methods.round$0(this._duration * factor));
    },
    $lt: function(_, other) {
      return C.JSInt_methods.$lt(this._duration, other.get$_duration());
    },
    $gt: function(_, other) {
      return this._duration > other.get$_duration();
    },
    $le: function(_, other) {
      return this._duration <= other.get$_duration();
    },
    $ge: function(_, other) {
      return C.JSInt_methods.$ge(this._duration, other.get$_duration());
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof P.Duration))
        return false;
      return this._duration === other._duration;
    },
    get$hashCode: function(_) {
      return this._duration & 0x1FFFFFFF;
    },
    compareTo$1: function(_, other) {
      return C.JSInt_methods.compareTo$1(this._duration, other.get$_duration());
    },
    toString$0: function(_) {
      var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
      t1 = new P.Duration_toString_twoDigits();
      t2 = this._duration;
      if (t2 < 0)
        return "-" + new P.Duration(-t2).toString$0(0);
      twoDigitMinutes = t1.call$1(C.JSInt_methods.remainder$1(C.JSInt_methods._tdivFast$1(t2, 60000000), 60));
      twoDigitSeconds = t1.call$1(C.JSInt_methods.remainder$1(C.JSInt_methods._tdivFast$1(t2, 1000000), 60));
      sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSInt_methods.remainder$1(t2, 1000000));
      return "" + C.JSInt_methods._tdivFast$1(t2, 3600000000) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.Duration];
    },
    static: {Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
        return new P.Duration(864e8 * days + 3600000000 * hours + 60000000 * minutes + 1000000 * seconds + 1000 * milliseconds + microseconds);
      }}
  },
  Duration_toString_sixDigits: {
    "^": "Closure:17;",
    call$1: function(n) {
      if (n >= 100000)
        return "" + n;
      if (n >= 10000)
        return "0" + n;
      if (n >= 1000)
        return "00" + n;
      if (n >= 100)
        return "000" + n;
      if (n >= 10)
        return "0000" + n;
      return "00000" + n;
    }
  },
  Duration_toString_twoDigits: {
    "^": "Closure:17;",
    call$1: function(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    }
  },
  Error: {
    "^": "Object;",
    get$stackTrace: function() {
      return H.getTraceFromException(this.$thrownJsError);
    }
  },
  NullThrownError: {
    "^": "Error;",
    toString$0: function(_) {
      return "Throw of null.";
    }
  },
  ArgumentError: {
    "^": "Error;_hasValue,invalidValue,name,message",
    get$_errorName: function() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation: function() {
      return "";
    },
    toString$0: function(_) {
      var t1, nameString, message, prefix, explanation, errorValue;
      t1 = this.name;
      nameString = t1 != null ? " (" + H.S(t1) + ")" : "";
      t1 = this.message;
      message = t1 == null ? "" : ": " + H.S(t1);
      prefix = this.get$_errorName() + nameString + message;
      if (!this._hasValue)
        return prefix;
      explanation = this.get$_errorExplanation();
      errorValue = P.Error_safeToString(this.invalidValue);
      return prefix + explanation + ": " + H.S(errorValue);
    },
    static: {ArgumentError$: function(message) {
        return new P.ArgumentError(false, null, null, message);
      }}
  },
  RangeError: {
    "^": "ArgumentError;start,end,_hasValue,invalidValue,name,message",
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var t1, explanation, t2;
      t1 = this.start;
      if (t1 == null) {
        t1 = this.end;
        explanation = t1 != null ? ": Not less than or equal to " + H.S(t1) : "";
      } else {
        t2 = this.end;
        if (t2 == null)
          explanation = ": Not greater than or equal to " + H.S(t1);
        else {
          if (typeof t2 !== "number")
            return t2.$gt();
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (t2 > t1)
            explanation = ": Not in range " + t1 + ".." + t2 + ", inclusive";
          else
            explanation = t2 < t1 ? ": Valid value range is empty" : ": Only valid value is " + t1;
        }
      }
      return explanation;
    },
    static: {RangeError$: function(message) {
        return new P.RangeError(null, null, false, null, null, message);
      }, RangeError$value: function(value, $name, message) {
        return new P.RangeError(null, null, true, value, $name, "Value not in range");
      }, RangeError$range: function(invalidValue, minValue, maxValue, $name, message) {
        return new P.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
      }, RangeError_checkValidRange: function(start, end, $length, startName, endName, message) {
        if (start < 0 || start > $length)
          throw H.wrapException(P.RangeError$range(start, 0, $length, "start", message));
        if (end < start || end > $length)
          throw H.wrapException(P.RangeError$range(end, start, $length, "end", message));
        return end;
      }}
  },
  IndexError: {
    "^": "ArgumentError;indexable,length>,_hasValue,invalidValue,name,message",
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      P.Error_safeToString(this.indexable);
      var explanation = ": index should be less than " + H.S(this.length);
      return J.$lt$n(this.invalidValue, 0) ? ": index must not be negative" : explanation;
    },
    static: {IndexError$: function(invalidValue, indexable, $name, message, $length) {
        var t1 = $length != null ? $length : J.get$length$asx(indexable);
        return new P.IndexError(indexable, t1, true, invalidValue, $name, "Index out of range");
      }}
  },
  UnsupportedError: {
    "^": "Error;message",
    toString$0: function(_) {
      return "Unsupported operation: " + this.message;
    },
    static: {UnsupportedError$: function(message) {
        return new P.UnsupportedError(message);
      }}
  },
  UnimplementedError: {
    "^": "Error;message",
    toString$0: function(_) {
      var t1 = this.message;
      return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
    },
    static: {UnimplementedError$: function(message) {
        return new P.UnimplementedError(message);
      }}
  },
  StateError: {
    "^": "Error;message",
    toString$0: function(_) {
      return "Bad state: " + this.message;
    },
    static: {StateError$: function(message) {
        return new P.StateError(message);
      }}
  },
  ConcurrentModificationError: {
    "^": "Error;modifiedObject",
    toString$0: function(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
    },
    static: {ConcurrentModificationError$: function(modifiedObject) {
        return new P.ConcurrentModificationError(modifiedObject);
      }}
  },
  OutOfMemoryError: {
    "^": "Object;",
    toString$0: function(_) {
      return "Out of Memory";
    },
    get$stackTrace: function() {
      return;
    },
    $isError: 1
  },
  StackOverflowError: {
    "^": "Object;",
    toString$0: function(_) {
      return "Stack Overflow";
    },
    get$stackTrace: function() {
      return;
    },
    $isError: 1
  },
  CyclicInitializationError: {
    "^": "Error;variableName",
    toString$0: function(_) {
      return "Reading static variable '" + this.variableName + "' during its initialization";
    }
  },
  _ExceptionImplementation: {
    "^": "Object;message",
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 == null)
        return "Exception";
      return "Exception: " + H.S(t1);
    }
  },
  FormatException: {
    "^": "Object;message,source,offset",
    toString$0: function(_) {
      var t1, report;
      t1 = this.message;
      report = t1 != null && "" !== t1 ? "FormatException: " + H.S(t1) : "FormatException";
      return report;
    },
    static: {FormatException$: function(message, source, offset) {
        return new P.FormatException(message, source, offset);
      }}
  },
  Expando: {
    "^": "Object;name",
    toString$0: function(_) {
      return "Expando:" + H.S(this.name);
    },
    $index: function(_, object) {
      var values = H.Primitives_getProperty(object, "expando$values");
      return values == null ? null : H.Primitives_getProperty(values, this._getKey$0());
    },
    $indexSet: function(_, object, value) {
      var values = H.Primitives_getProperty(object, "expando$values");
      if (values == null) {
        values = new P.Object();
        H.Primitives_setProperty(object, "expando$values", values);
      }
      H.Primitives_setProperty(values, this._getKey$0(), value);
    },
    _getKey$0: function() {
      var key, t1;
      key = H.Primitives_getProperty(this, "expando$key");
      if (key == null) {
        t1 = $.Expando__keyCount;
        $.Expando__keyCount = t1 + 1;
        key = "expando$key$" + t1;
        H.Primitives_setProperty(this, "expando$key", key);
      }
      return key;
    }
  },
  Function: {
    "^": "Object;"
  },
  $int: {
    "^": "num;",
    $isComparable: 1,
    $asComparable: function() {
      return [P.num];
    }
  },
  "+int": 0,
  Iterator: {
    "^": "Object;"
  },
  List: {
    "^": "Object;",
    $asList: null,
    $isEfficientLength: 1
  },
  "+List": 0,
  Map: {
    "^": "Object;"
  },
  Null: {
    "^": "Object;",
    toString$0: function(_) {
      return "null";
    }
  },
  "+Null": 0,
  num: {
    "^": "Object;",
    $isComparable: 1,
    $asComparable: function() {
      return [P.num];
    }
  },
  "+num": 0,
  Object: {
    "^": ";",
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return H.Primitives_objectToString(this);
    }
  },
  StackTrace: {
    "^": "Object;"
  },
  String: {
    "^": "Object;",
    $isComparable: 1,
    $asComparable: function() {
      return [P.String];
    }
  },
  "+String": 0,
  StringBuffer: {
    "^": "Object;_contents<",
    get$length: function(_) {
      return this._contents.length;
    },
    writeAll$2: function(objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return;
      if (separator.length === 0) {
        do
          this._contents += H.S(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        this._contents += H.S(iterator.get$current());
        for (; iterator.moveNext$0();) {
          this._contents += separator;
          this._contents += H.S(iterator.get$current());
        }
      }
    },
    toString$0: function(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  },
  Symbol: {
    "^": "Object;"
  }
}],
["dart.dom.html", "dart:html", , W, {
  "^": "",
  CssStyleDeclaration__camelCase: function(hyphenated) {
    return hyphenated.replace(/^-ms-/, "ms-").replace(/-([\da-z])/ig, C.JS_CONST_s8I);
  },
  Element__determineMouseWheelEventType: [function(e) {
    if (e.onwheel !== undefined)
      return "wheel";
    else if (e.onmousewheel !== undefined)
      return "mousewheel";
    else
      return "DOMMouseScroll";
  }, "call$1", "Element__determineMouseWheelEventType$closure", 2, 0, 36],
  _ElementFactoryProvider_createElement_tag: function(tag, typeExtension) {
    return document.createElement(tag);
  },
  HttpRequest_getString: function(url, onProgress, withCredentials) {
    return W.HttpRequest_request(url, null, null, onProgress, null, null, null, withCredentials).then$1(new W.HttpRequest_getString_closure());
  },
  HttpRequest_request: function(url, method, mimeType, onProgress, requestHeaders, responseType, sendData, withCredentials) {
    var t1, completer, xhr;
    t1 = W.HttpRequest;
    completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [t1])), [t1]);
    xhr = new XMLHttpRequest();
    C.HttpRequest_methods.open$3$async(xhr, "GET", url, true);
    t1 = C.EventStreamProvider_load.forTarget$1(xhr);
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new W.HttpRequest_request_closure(completer, xhr)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    t1 = C.EventStreamProvider_error.forTarget$1(xhr);
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(completer.get$completeError()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    xhr.send();
    return completer.future;
  },
  _JenkinsSmiHash_combine: function(hash, value) {
    hash = 536870911 & hash + value;
    hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    return hash ^ hash >>> 6;
  },
  _JenkinsSmiHash_finish: function(hash) {
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >>> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  _wrapZone: function(callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone)
      return callback;
    return t1.bindUnaryCallback$2$runGuarded(callback, true);
  },
  HtmlElement: {
    "^": "Element;",
    $isHtmlElement: 1,
    $isEventTarget: 1,
    $isObject: 1,
    "%": "HTMLAppletElement|HTMLBRElement|HTMLBaseElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDirectoryElement|HTMLDivElement|HTMLFontElement|HTMLFrameElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLMapElement|HTMLMarqueeElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOptGroupElement|HTMLOptionElement|HTMLParagraphElement|HTMLParamElement|HTMLPictureElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLShadowElement|HTMLSpanElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTemplateElement|HTMLTitleElement|HTMLUListElement|HTMLUnknownElement|PluginPlaceholderElement;HTMLElement"
  },
  AnchorElement: {
    "^": "HtmlElement;type=",
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isInterceptor: 1,
    "%": "HTMLAnchorElement"
  },
  AreaElement: {
    "^": "HtmlElement;",
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isInterceptor: 1,
    "%": "HTMLAreaElement"
  },
  Blob: {
    "^": "Interceptor;type=",
    close$0: function(receiver) {
      return receiver.close();
    },
    "%": "Blob|File"
  },
  BodyElement: {
    "^": "HtmlElement;",
    get$onLoad: function(receiver) {
      return C.EventStreamProvider_load0.forElement$1(receiver);
    },
    $isInterceptor: 1,
    "%": "HTMLBodyElement"
  },
  ButtonElement: {
    "^": "HtmlElement;type=",
    "%": "HTMLButtonElement"
  },
  CanvasElement: {
    "^": "HtmlElement;height%,width%",
    getContext$2: function(receiver, contextId, attrs) {
      return receiver.getContext(contextId);
    },
    getContext$1: function($receiver, contextId) {
      return this.getContext$2($receiver, contextId, null);
    },
    "%": "HTMLCanvasElement"
  },
  CharacterData: {
    "^": "Node0;length=",
    $isInterceptor: 1,
    "%": "CDATASection|CharacterData|Comment|ProcessingInstruction|Text"
  },
  CssStyleDeclaration: {
    "^": "Interceptor_CssStyleDeclarationBase;length=",
    setProperty$3: function(receiver, propertyName, value, priority) {
      if (W.CssStyleDeclaration__camelCase(propertyName) in receiver)
        return this._setPropertyHelper$3(receiver, propertyName, value, priority);
      else
        return this._setPropertyHelper$3(receiver, P.Device_cssPrefix() + propertyName, value, priority);
    },
    _setPropertyHelper$3: function(receiver, propertyName, value, priority) {
      var exception;
      try {
        if (value == null)
          value = "";
        if (priority == null)
          priority = "";
        receiver.setProperty(propertyName, value, priority);
        if (!!receiver.setAttribute)
          receiver.setAttribute(propertyName, value);
      } catch (exception) {
        H.unwrapException(exception);
      }
    },
    "%": "CSS2Properties|CSSStyleDeclaration|MSStyleCSSProperties"
  },
  Interceptor_CssStyleDeclarationBase: {
    "^": "Interceptor+CssStyleDeclarationBase;"
  },
  CssStyleDeclarationBase: {
    "^": "Object;",
    set$display: function(receiver, value) {
      this.setProperty$3(receiver, "display", value, "");
    },
    set$height: function(receiver, value) {
      this.setProperty$3(receiver, "height", value, "");
    },
    set$left: function(receiver, value) {
      this.setProperty$3(receiver, "left", value, "");
    },
    set$marginLeft: function(receiver, value) {
      this.setProperty$3(receiver, "margin-left", value, "");
    },
    set$marginTop: function(receiver, value) {
      this.setProperty$3(receiver, "margin-top", value, "");
    },
    set$top: function(receiver, value) {
      this.setProperty$3(receiver, "top", value, "");
    },
    set$visibility: function(receiver, value) {
      this.setProperty$3(receiver, "visibility", value, "");
    },
    set$width: function(receiver, value) {
      this.setProperty$3(receiver, "width", value, "");
    }
  },
  DetailsElement: {
    "^": "HtmlElement;",
    open$0: function($receiver) {
      return $receiver.open.call$0();
    },
    "%": "HTMLDetailsElement"
  },
  DeviceOrientationEvent: {
    "^": "Event;",
    $isEvent: 1,
    $isObject: 1,
    "%": "DeviceOrientationEvent"
  },
  DialogElement: {
    "^": "HtmlElement;",
    open$0: function($receiver) {
      return $receiver.open.call$0();
    },
    "%": "HTMLDialogElement"
  },
  Document: {
    "^": "Node0;",
    get$onLoad: function(receiver) {
      return C.EventStreamProvider_load0.forTarget$1(receiver);
    },
    "%": "Document|HTMLDocument|XMLDocument"
  },
  DocumentFragment: {
    "^": "Node0;",
    $isInterceptor: 1,
    "%": "DocumentFragment|ShadowRoot"
  },
  DomException: {
    "^": "Interceptor;",
    toString$0: function(receiver) {
      return String(receiver);
    },
    "%": "DOMException"
  },
  DomRectReadOnly: {
    "^": "Interceptor;bottom=,height=,left=,right=,top=,width=,x=,y=",
    toString$0: function(receiver) {
      return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(this.get$width(receiver)) + " x " + H.S(this.get$height(receiver));
    },
    $eq: function(receiver, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (!t1.$isRectangle)
        return false;
      t2 = receiver.left;
      t3 = t1.get$left(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = receiver.top;
        t3 = t1.get$top(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = this.get$width(receiver);
          t3 = t1.get$width(other);
          if (t2 == null ? t3 == null : t2 === t3) {
            t2 = this.get$height(receiver);
            t1 = t1.get$height(other);
            t1 = t2 == null ? t1 == null : t2 === t1;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(receiver) {
      var t1, t2, t3, t4;
      t1 = J.get$hashCode$(receiver.left);
      t2 = J.get$hashCode$(receiver.top);
      t3 = J.get$hashCode$(this.get$width(receiver));
      t4 = J.get$hashCode$(this.get$height(receiver));
      return W._JenkinsSmiHash_finish(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4));
    },
    $isRectangle: 1,
    $asRectangle: $.functionThatReturnsNull,
    "%": ";DOMRectReadOnly"
  },
  Element: {
    "^": "Node0;",
    get$classes: function(receiver) {
      return new W._ElementCssClassSet(receiver);
    },
    get$client: function(receiver) {
      return P.Rectangle$(C.JSNumber_methods.round$0(receiver.clientLeft), C.JSNumber_methods.round$0(receiver.clientTop), C.JSNumber_methods.round$0(receiver.clientWidth), C.JSNumber_methods.round$0(receiver.clientHeight), null);
    },
    toString$0: function(receiver) {
      return receiver.localName;
    },
    get$onClick: function(receiver) {
      return C.EventStreamProvider_click.forElement$1(receiver);
    },
    get$onLoad: function(receiver) {
      return C.EventStreamProvider_load0.forElement$1(receiver);
    },
    get$onMouseDown: function(receiver) {
      return C.EventStreamProvider_mousedown.forElement$1(receiver);
    },
    get$onMouseMove: function(receiver) {
      return C.EventStreamProvider_mousemove.forElement$1(receiver);
    },
    get$onMouseUp: function(receiver) {
      return C.EventStreamProvider_mouseup.forElement$1(receiver);
    },
    get$onMouseWheel: function(receiver) {
      return C._CustomEventStreamProvider__determineMouseWheelEventType.forElement$1(receiver);
    },
    $isInterceptor: 1,
    "%": ";Element"
  },
  EmbedElement: {
    "^": "HtmlElement;height%,src},type=,width%",
    "%": "HTMLEmbedElement"
  },
  ErrorEvent: {
    "^": "Event;error=",
    "%": "ErrorEvent"
  },
  Event: {
    "^": "Interceptor;timeStamp=,type=",
    preventDefault$0: function(receiver) {
      return receiver.preventDefault();
    },
    $isEvent: 1,
    $isObject: 1,
    "%": "AnimationPlayerEvent|ApplicationCacheErrorEvent|AudioProcessingEvent|AutocompleteErrorEvent|BeforeUnloadEvent|CloseEvent|CustomEvent|DeviceLightEvent|DeviceMotionEvent|ExtendableEvent|FetchEvent|FontFaceSetLoadEvent|GamepadEvent|HashChangeEvent|IDBVersionChangeEvent|InstallEvent|MIDIConnectionEvent|MIDIMessageEvent|MediaKeyEvent|MediaKeyMessageEvent|MediaKeyNeededEvent|MediaQueryListEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|PushEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|RelatedEvent|SecurityPolicyViolationEvent|SpeechRecognitionEvent|SpeechSynthesisEvent|StorageEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent;ClipboardEvent|Event|InputEvent"
  },
  EventTarget: {
    "^": "Interceptor;",
    _addEventListener$3: function(receiver, type, listener, useCapture) {
      return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
    },
    _removeEventListener$3: function(receiver, type, listener, useCapture) {
      return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
    },
    $isEventTarget: 1,
    $isObject: 1,
    "%": "MediaStream;EventTarget"
  },
  FieldSetElement: {
    "^": "HtmlElement;type=",
    "%": "HTMLFieldSetElement"
  },
  FormElement: {
    "^": "HtmlElement;length=",
    "%": "HTMLFormElement"
  },
  HttpRequest: {
    "^": "HttpRequestEventTarget;responseText=",
    open$5$async$password$user: function(receiver, method, url, async, password, user) {
      return receiver.open(method, url, async, user, password);
    },
    open$3$async: function($receiver, method, url, async) {
      return $receiver.open(method, url, async);
    },
    send$1: function(receiver, data) {
      return receiver.send(data);
    },
    $isHttpRequest: 1,
    $isEventTarget: 1,
    $isObject: 1,
    "%": "XMLHttpRequest"
  },
  HttpRequest_getString_closure: {
    "^": "Closure:18;",
    call$1: function(xhr) {
      return J.get$responseText$x(xhr);
    }
  },
  HttpRequest_request_closure0: {
    "^": "Closure:3;xhr_0",
    call$2: function(header, value) {
      this.xhr_0.setRequestHeader(header, value);
    }
  },
  HttpRequest_request_closure: {
    "^": "Closure:1;completer_1,xhr_2",
    call$1: function(e) {
      var t1, t2, t3;
      t1 = this.xhr_2;
      t2 = t1.status;
      if (typeof t2 !== "number")
        return t2.$ge();
      t2 = t2 >= 200 && t2 < 300 || t2 === 0 || t2 === 304;
      t3 = this.completer_1;
      if (t2)
        t3.complete$1(0, t1);
      else
        t3.completeError$1(e);
    }
  },
  HttpRequestEventTarget: {
    "^": "EventTarget;",
    get$onLoad: function(receiver) {
      return C.EventStreamProvider_load.forTarget$1(receiver);
    },
    "%": ";XMLHttpRequestEventTarget"
  },
  IFrameElement: {
    "^": "HtmlElement;height%,src},width%",
    "%": "HTMLIFrameElement"
  },
  ImageElement: {
    "^": "HtmlElement;height%,src},width%",
    "%": "HTMLImageElement"
  },
  InputElement: {
    "^": "HtmlElement;height%,src},type=,width%",
    $isInterceptor: 1,
    "%": "HTMLInputElement"
  },
  KeyboardEvent: {
    "^": "UIEvent;",
    get$keyCode: function(receiver) {
      return receiver.keyCode;
    },
    $isKeyboardEvent: 1,
    $isEvent: 1,
    $isObject: 1,
    "%": "KeyboardEvent"
  },
  KeygenElement: {
    "^": "HtmlElement;type=",
    "%": "HTMLKeygenElement"
  },
  LinkElement: {
    "^": "HtmlElement;type=",
    "%": "HTMLLinkElement"
  },
  MediaElement: {
    "^": "HtmlElement;error=,src}",
    "%": "HTMLAudioElement;HTMLMediaElement"
  },
  MenuElement: {
    "^": "HtmlElement;type=",
    "%": "HTMLMenuElement"
  },
  MenuItemElement: {
    "^": "HtmlElement;type=",
    "%": "HTMLMenuItemElement"
  },
  MouseEvent: {
    "^": "UIEvent;button=,_clientX:clientX=",
    get$client: function(receiver) {
      return H.setRuntimeTypeInfo(new P.Point(receiver.clientX, receiver.clientY), [null]);
    },
    get$movement: function(receiver) {
      return H.setRuntimeTypeInfo(new P.Point(receiver.webkitMovementX, receiver.webkitMovementY), [null]);
    },
    $isMouseEvent: 1,
    $isEvent: 1,
    $isObject: 1,
    "%": ";DragEvent|MSPointerEvent|MouseEvent|PointerEvent"
  },
  Navigator: {
    "^": "Interceptor;",
    $isInterceptor: 1,
    "%": "Navigator"
  },
  Node0: {
    "^": "EventTarget;",
    toString$0: function(receiver) {
      var value = receiver.nodeValue;
      return value == null ? this.super$Interceptor$toString$0(receiver) : value;
    },
    contains$1: function(receiver, other) {
      return receiver.contains(other);
    },
    $isEventTarget: 1,
    $isObject: 1,
    "%": "Attr;Node"
  },
  NodeList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node0];
    },
    $isEfficientLength: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isJSIndexable: 1,
    "%": "NodeList|RadioNodeList"
  },
  Interceptor_ListMixin: {
    "^": "Interceptor+ListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.Node0];
    },
    $isEfficientLength: 1
  },
  Interceptor_ListMixin_ImmutableListMixin: {
    "^": "Interceptor_ListMixin+ImmutableListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.Node0];
    },
    $isEfficientLength: 1
  },
  OListElement: {
    "^": "HtmlElement;type=",
    "%": "HTMLOListElement"
  },
  ObjectElement: {
    "^": "HtmlElement;height%,type=,width%",
    "%": "HTMLObjectElement"
  },
  OutputElement: {
    "^": "HtmlElement;type=",
    "%": "HTMLOutputElement"
  },
  ProgressEvent: {
    "^": "Event;",
    $isEvent: 1,
    $isObject: 1,
    "%": "ProgressEvent|ResourceProgressEvent|XMLHttpRequestProgressEvent"
  },
  ScriptElement: {
    "^": "HtmlElement;src},type=",
    "%": "HTMLScriptElement"
  },
  SelectElement: {
    "^": "HtmlElement;length=,type=",
    "%": "HTMLSelectElement"
  },
  SourceElement: {
    "^": "HtmlElement;src},type=",
    "%": "HTMLSourceElement"
  },
  SpeechRecognitionError: {
    "^": "Event;error=",
    "%": "SpeechRecognitionError"
  },
  StyleElement: {
    "^": "HtmlElement;type=",
    "%": "HTMLStyleElement"
  },
  TextAreaElement: {
    "^": "HtmlElement;type=",
    "%": "HTMLTextAreaElement"
  },
  Touch: {
    "^": "Interceptor;identifier=",
    get$client: function(receiver) {
      return H.setRuntimeTypeInfo(new P.Point(C.JSNumber_methods.round$0(receiver.clientX), C.JSNumber_methods.round$0(receiver.clientY)), [null]);
    },
    $isTouch: 1,
    $isObject: 1,
    "%": "Touch"
  },
  TouchEvent: {
    "^": "UIEvent;changedTouches=",
    $isTouchEvent: 1,
    $isEvent: 1,
    $isObject: 1,
    "%": "TouchEvent"
  },
  TouchList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin0;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: 1,
    $asList: function() {
      return [W.Touch];
    },
    $isEfficientLength: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isJSIndexable: 1,
    "%": "TouchList"
  },
  Interceptor_ListMixin0: {
    "^": "Interceptor+ListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.Touch];
    },
    $isEfficientLength: 1
  },
  Interceptor_ListMixin_ImmutableListMixin0: {
    "^": "Interceptor_ListMixin0+ImmutableListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.Touch];
    },
    $isEfficientLength: 1
  },
  TrackElement: {
    "^": "HtmlElement;src}",
    "%": "HTMLTrackElement"
  },
  UIEvent: {
    "^": "Event;",
    get$page: function(receiver) {
      return H.setRuntimeTypeInfo(new P.Point(receiver.pageX, receiver.pageY), [null]);
    },
    "%": "CompositionEvent|FocusEvent|SVGZoomEvent|TextEvent;UIEvent"
  },
  VideoElement: {
    "^": "MediaElement;height%,width%",
    "%": "HTMLVideoElement"
  },
  WheelEvent: {
    "^": "MouseEvent;",
    get$deltaY: function(receiver) {
      var detail;
      if (receiver.deltaY !== undefined)
        return receiver.deltaY;
      else if (receiver.wheelDelta !== undefined)
        return -receiver.wheelDelta;
      else if (receiver.detail !== undefined) {
        if (receiver.axis == MouseScrollEvent.VERTICAL_AXIS) {
          detail = receiver.detail;
          if (Math.abs(detail) < 100)
            return -detail * 40;
          return -detail;
        }
        return 0;
      }
      throw H.wrapException(P.UnsupportedError$("deltaY is not supported"));
    },
    get$deltaX: function(receiver) {
      var detail;
      if (receiver.deltaX !== undefined)
        return receiver.deltaX;
      else if (receiver.wheelDeltaX !== undefined)
        return -receiver.wheelDeltaX;
      else if (receiver.detail !== undefined) {
        if (receiver.axis !== undefined && receiver.axis == MouseScrollEvent.HORIZONTAL_AXIS) {
          detail = receiver.detail;
          if (detail < 100)
            return -detail * 40;
          return -detail;
        }
        return 0;
      }
      throw H.wrapException(P.UnsupportedError$("deltaX is not supported"));
    },
    $isWheelEvent: 1,
    $isMouseEvent: 1,
    $isEvent: 1,
    $isObject: 1,
    "%": "MouseScrollEvent|MouseWheelEvent|WheelEvent"
  },
  Window: {
    "^": "EventTarget;",
    _html$_requestAnimationFrame$1: function(receiver, callback) {
      return receiver.requestAnimationFrame(H.convertDartClosureToJS(callback, 1));
    },
    _ensureRequestAnimationFrame$0: function(receiver) {
      if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
        return;
      (function($this) {
        var vendors = ['ms', 'moz', 'webkit', 'o'];
        for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
          $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
          $this.cancelAnimationFrame = $this[vendors[i] + 'CancelAnimationFrame'] || $this[vendors[i] + 'CancelRequestAnimationFrame'];
        }
        if ($this.requestAnimationFrame && $this.cancelAnimationFrame)
          return;
        $this.requestAnimationFrame = function(callback) {
          return window.setTimeout(function() {
            callback(Date.now());
          }, 16);
        };
        $this.cancelAnimationFrame = function(id) {
          clearTimeout(id);
        };
      })(receiver);
    },
    close$0: function(receiver) {
      return receiver.close();
    },
    get$onLoad: function(receiver) {
      return C.EventStreamProvider_load0.forTarget$1(receiver);
    },
    $isInterceptor: 1,
    "%": "DOMWindow|Window"
  },
  _ClientRect: {
    "^": "Interceptor;bottom=,height=,left=,right=,top=,width=",
    toString$0: function(receiver) {
      return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
    },
    $eq: function(receiver, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (!t1.$isRectangle)
        return false;
      t2 = receiver.left;
      t3 = t1.get$left(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = receiver.top;
        t3 = t1.get$top(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.width;
          t3 = t1.get$width(other);
          if (t2 == null ? t3 == null : t2 === t3) {
            t2 = receiver.height;
            t1 = t1.get$height(other);
            t1 = t2 == null ? t1 == null : t2 === t1;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(receiver) {
      var t1, t2, t3, t4;
      t1 = J.get$hashCode$(receiver.left);
      t2 = J.get$hashCode$(receiver.top);
      t3 = J.get$hashCode$(receiver.width);
      t4 = J.get$hashCode$(receiver.height);
      return W._JenkinsSmiHash_finish(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4));
    },
    $isRectangle: 1,
    $asRectangle: $.functionThatReturnsNull,
    "%": "ClientRect"
  },
  _DocumentType: {
    "^": "Node0;",
    $isInterceptor: 1,
    "%": "DocumentType"
  },
  _DomRect: {
    "^": "DomRectReadOnly;",
    get$height: function(receiver) {
      return receiver.height;
    },
    get$width: function(receiver) {
      return receiver.width;
    },
    get$x: function(receiver) {
      return receiver.x;
    },
    set$x: function(receiver, value) {
      receiver.x = value;
    },
    get$y: function(receiver) {
      return receiver.y;
    },
    set$y: function(receiver, value) {
      receiver.y = value;
    },
    "%": "DOMRect"
  },
  _HTMLFrameSetElement: {
    "^": "HtmlElement;",
    $isInterceptor: 1,
    "%": "HTMLFrameSetElement"
  },
  _NamedNodeMap: {
    "^": "Interceptor_ListMixin_ImmutableListMixin1;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node0];
    },
    $isEfficientLength: 1,
    $isJavaScriptIndexingBehavior: 1,
    $isJSIndexable: 1,
    "%": "MozNamedAttrMap|NamedNodeMap"
  },
  Interceptor_ListMixin1: {
    "^": "Interceptor+ListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.Node0];
    },
    $isEfficientLength: 1
  },
  Interceptor_ListMixin_ImmutableListMixin1: {
    "^": "Interceptor_ListMixin1+ImmutableListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.Node0];
    },
    $isEfficientLength: 1
  },
  _ElementCssClassSet: {
    "^": "CssClassSetImpl;_html$_element",
    readClasses$0: function() {
      var s, t1, trimmed;
      s = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
      for (t1 = this._html$_element.className.split(" "), t1 = new J.ArrayIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        trimmed = J.trim$0$s(t1.__interceptors$_current);
        if (trimmed.length !== 0)
          s.add$1(0, trimmed);
      }
      return s;
    },
    writeClasses$1: function(s) {
      this._html$_element.className = s.join$1(0, " ");
    }
  },
  EventStreamProvider: {
    "^": "Object;_eventType",
    forTarget$2$useCapture: function(e, useCapture) {
      return H.setRuntimeTypeInfo(new W._EventStream(e, this._eventType, useCapture), [null]);
    },
    forTarget$1: function(e) {
      return this.forTarget$2$useCapture(e, false);
    },
    forElement$2$useCapture: function(e, useCapture) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(e, this._eventType, useCapture), [null]);
    },
    forElement$1: function(e) {
      return this.forElement$2$useCapture(e, false);
    }
  },
  _EventStream: {
    "^": "Stream;_target,_eventType,_useCapture",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1 = new W._EventStreamSubscription(0, this._target, this._eventType, W._wrapZone(onData), this._useCapture);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      t1._tryResume$0();
      return t1;
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    }
  },
  _ElementEventStreamImpl: {
    "^": "_EventStream;_target,_eventType,_useCapture"
  },
  _EventStreamSubscription: {
    "^": "StreamSubscription;_pauseCount,_target,_eventType,_onData,_useCapture",
    cancel$0: function() {
      if (this._target == null)
        return;
      this._unlisten$0();
      this._target = null;
      this._onData = null;
      return;
    },
    pause$1: function(_, resumeSignal) {
      if (this._target == null)
        return;
      ++this._pauseCount;
      this._unlisten$0();
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    resume$0: function() {
      if (this._target == null || this._pauseCount <= 0)
        return;
      --this._pauseCount;
      this._tryResume$0();
    },
    _tryResume$0: function() {
      var t1, t2, t3;
      t1 = this._onData;
      t2 = t1 != null;
      if (t2 && this._pauseCount <= 0) {
        t3 = this._target;
        t3.toString;
        if (t2)
          J._addEventListener$3$x(t3, this._eventType, t1, this._useCapture);
      }
    },
    _unlisten$0: function() {
      var t1, t2, t3;
      t1 = this._onData;
      t2 = t1 != null;
      if (t2) {
        t3 = this._target;
        t3.toString;
        if (t2)
          J._removeEventListener$3$x(t3, this._eventType, t1, this._useCapture);
      }
    }
  },
  _CustomEventStreamProvider: {
    "^": "Object;_eventTypeGetter",
    forElement$2$useCapture: function(e, useCapture) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(e, this._eventTypeGetter$1(e), useCapture), [null]);
    },
    forElement$1: function(e) {
      return this.forElement$2$useCapture(e, false);
    },
    _eventTypeGetter$1: function(arg0) {
      return this._eventTypeGetter.call$1(arg0);
    }
  },
  ImmutableListMixin: {
    "^": "Object;",
    get$iterator: function(receiver) {
      return new W.FixedSizeListIterator(receiver, this.get$length(receiver), -1, null);
    },
    add$1: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
    },
    $isList: 1,
    $asList: null,
    $isEfficientLength: 1
  },
  FixedSizeListIterator: {
    "^": "Object;_array,_length,_position,_current",
    moveNext$0: function() {
      var nextPosition, t1;
      nextPosition = this._position + 1;
      t1 = this._length;
      if (nextPosition < t1) {
        this._current = J.$index$asx(this._array, nextPosition);
        this._position = nextPosition;
        return true;
      }
      this._current = null;
      this._position = t1;
      return false;
    },
    get$current: function() {
      return this._current;
    }
  }
}],
["dart.dom.indexed_db", "dart:indexed_db", , P, {
  "^": ""
}],
["dart.dom.svg", "dart:svg", , P, {
  "^": "",
  AElement: {
    "^": "GraphicsElement;",
    $isInterceptor: 1,
    "%": "SVGAElement"
  },
  AltGlyphElement: {
    "^": "TextPositioningElement;",
    $isInterceptor: 1,
    "%": "SVGAltGlyphElement"
  },
  AnimationElement: {
    "^": "SvgElement;",
    $isInterceptor: 1,
    "%": "SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGSetElement"
  },
  FEBlendElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFEBlendElement"
  },
  FEColorMatrixElement: {
    "^": "SvgElement;type=,height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFEColorMatrixElement"
  },
  FEComponentTransferElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFEComponentTransferElement"
  },
  FECompositeElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFECompositeElement"
  },
  FEConvolveMatrixElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFEConvolveMatrixElement"
  },
  FEDiffuseLightingElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFEDiffuseLightingElement"
  },
  FEDisplacementMapElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFEDisplacementMapElement"
  },
  FEFloodElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFEFloodElement"
  },
  FEGaussianBlurElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFEGaussianBlurElement"
  },
  FEImageElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFEImageElement"
  },
  FEMergeElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFEMergeElement"
  },
  FEMorphologyElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFEMorphologyElement"
  },
  FEOffsetElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFEOffsetElement"
  },
  FEPointLightElement: {
    "^": "SvgElement;x=,y=,z=",
    "%": "SVGFEPointLightElement"
  },
  FESpecularLightingElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFESpecularLightingElement"
  },
  FESpotLightElement: {
    "^": "SvgElement;x=,y=,z=",
    "%": "SVGFESpotLightElement"
  },
  FETileElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFETileElement"
  },
  FETurbulenceElement: {
    "^": "SvgElement;type=,height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFETurbulenceElement"
  },
  FilterElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFilterElement"
  },
  ForeignObjectElement: {
    "^": "GraphicsElement;height=,width=,x=,y=",
    "%": "SVGForeignObjectElement"
  },
  GeometryElement: {
    "^": "GraphicsElement;",
    "%": "SVGCircleElement|SVGEllipseElement|SVGLineElement|SVGPathElement;SVGGeometryElement"
  },
  GraphicsElement: {
    "^": "SvgElement;",
    $isInterceptor: 1,
    "%": "SVGClipPathElement|SVGDefsElement|SVGGElement|SVGSwitchElement;SVGGraphicsElement"
  },
  ImageElement0: {
    "^": "GraphicsElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGImageElement"
  },
  MarkerElement: {
    "^": "SvgElement;",
    $isInterceptor: 1,
    "%": "SVGMarkerElement"
  },
  MaskElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGMaskElement"
  },
  PatternElement: {
    "^": "SvgElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGPatternElement"
  },
  PointList: {
    "^": "Interceptor;length=",
    "%": "SVGPointList"
  },
  PolygonElement: {
    "^": "GeometryElement;points=",
    "%": "SVGPolygonElement"
  },
  PolylineElement: {
    "^": "GeometryElement;points=",
    "%": "SVGPolylineElement"
  },
  Rect: {
    "^": "Interceptor;x%,y%",
    "%": "SVGRect"
  },
  RectElement: {
    "^": "GeometryElement;height=,width=,x=,y=",
    "%": "SVGRectElement"
  },
  ScriptElement0: {
    "^": "SvgElement;type=",
    $isInterceptor: 1,
    "%": "SVGScriptElement"
  },
  StyleElement0: {
    "^": "SvgElement;type=",
    "%": "SVGStyleElement"
  },
  _AttributeClassSet: {
    "^": "CssClassSetImpl;_element",
    readClasses$0: function() {
      var classname, s, t1, trimmed;
      classname = this._element.getAttribute("class");
      s = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
      if (classname == null)
        return s;
      for (t1 = classname.split(" "), t1 = new J.ArrayIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        trimmed = J.trim$0$s(t1.__interceptors$_current);
        if (trimmed.length !== 0)
          s.add$1(0, trimmed);
      }
      return s;
    },
    writeClasses$1: function(s) {
      this._element.setAttribute("class", s.join$1(0, " "));
    }
  },
  SvgElement: {
    "^": "Element;",
    get$classes: function(receiver) {
      if (receiver._cssClassSet == null)
        receiver._cssClassSet = new P._AttributeClassSet(receiver);
      return receiver._cssClassSet;
    },
    get$onClick: function(receiver) {
      return C.EventStreamProvider_click.forElement$1(receiver);
    },
    get$onLoad: function(receiver) {
      return C.EventStreamProvider_load0.forElement$1(receiver);
    },
    get$onMouseDown: function(receiver) {
      return C.EventStreamProvider_mousedown.forElement$1(receiver);
    },
    get$onMouseMove: function(receiver) {
      return C.EventStreamProvider_mousemove.forElement$1(receiver);
    },
    get$onMouseUp: function(receiver) {
      return C.EventStreamProvider_mouseup.forElement$1(receiver);
    },
    get$onMouseWheel: function(receiver) {
      return C.EventStreamProvider_mousewheel.forElement$1(receiver);
    },
    $isInterceptor: 1,
    "%": "SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGComponentTransferFunctionElement|SVGDescElement|SVGDiscardElement|SVGFEDistantLightElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGHKernElement|SVGMetadataElement|SVGMissingGlyphElement|SVGStopElement|SVGTitleElement|SVGVKernElement;SVGElement"
  },
  SvgSvgElement: {
    "^": "GraphicsElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGSVGElement"
  },
  SymbolElement: {
    "^": "SvgElement;",
    $isInterceptor: 1,
    "%": "SVGSymbolElement"
  },
  TextContentElement: {
    "^": "GraphicsElement;",
    "%": ";SVGTextContentElement"
  },
  TextPathElement: {
    "^": "TextContentElement;",
    $isInterceptor: 1,
    "%": "SVGTextPathElement"
  },
  TextPositioningElement: {
    "^": "TextContentElement;x=,y=",
    "%": "SVGTSpanElement|SVGTextElement;SVGTextPositioningElement"
  },
  UseElement: {
    "^": "GraphicsElement;height=,width=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGUseElement"
  },
  ViewElement: {
    "^": "SvgElement;",
    $isInterceptor: 1,
    "%": "SVGViewElement"
  },
  _GradientElement: {
    "^": "SvgElement;",
    $isInterceptor: 1,
    "%": "SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement"
  },
  _SVGCursorElement: {
    "^": "SvgElement;",
    $isInterceptor: 1,
    "%": "SVGCursorElement"
  },
  _SVGFEDropShadowElement: {
    "^": "SvgElement;",
    $isInterceptor: 1,
    "%": "SVGFEDropShadowElement"
  },
  _SVGGlyphRefElement: {
    "^": "SvgElement;",
    $isInterceptor: 1,
    "%": "SVGGlyphRefElement"
  },
  _SVGMPathElement: {
    "^": "SvgElement;",
    $isInterceptor: 1,
    "%": "SVGMPathElement"
  }
}],
["dart.dom.web_audio", "dart:web_audio", , P, {
  "^": ""
}],
["dart.dom.web_gl", "dart:web_gl", , P, {
  "^": "",
  RenderingContext: {
    "^": "Interceptor;",
    bindBuffer$2: function(receiver, target, buffer) {
      return receiver.bindBuffer(target, buffer);
    },
    bindFramebuffer$2: function(receiver, target, framebuffer) {
      return receiver.bindFramebuffer(target, framebuffer);
    },
    bindRenderbuffer$2: function(receiver, target, renderbuffer) {
      return receiver.bindRenderbuffer(target, renderbuffer);
    },
    bindTexture$2: function(receiver, target, texture) {
      return receiver.bindTexture(target, texture);
    },
    blendFunc$2: function(receiver, sfactor, dfactor) {
      return receiver.blendFunc(sfactor, dfactor);
    },
    bufferDataTyped$3: function(receiver, target, data, usage) {
      return receiver.bufferData(target, data, usage);
    },
    clear$1: function(receiver, mask) {
      return receiver.clear(mask);
    },
    clearColor$4: function(receiver, red, green, blue, alpha) {
      return receiver.clearColor(red, green, blue, alpha);
    },
    createBuffer$0: function(receiver) {
      return receiver.createBuffer();
    },
    createFramebuffer$0: function(receiver) {
      return receiver.createFramebuffer();
    },
    createRenderbuffer$0: function(receiver) {
      return receiver.createRenderbuffer();
    },
    createShader$1: function(receiver, type) {
      return receiver.createShader(type);
    },
    createTexture$0: function(receiver) {
      return receiver.createTexture();
    },
    depthMask$1: function(receiver, flag) {
      return receiver.depthMask(flag);
    },
    enable$1: function(receiver, cap) {
      return receiver.enable(cap);
    },
    framebufferRenderbuffer$4: function(receiver, target, attachment, renderbuffertarget, renderbuffer) {
      return receiver.framebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);
    },
    framebufferTexture2D$5: function(receiver, target, attachment, textarget, texture, level) {
      return receiver.framebufferTexture2D(target, attachment, textarget, texture, level);
    },
    getAttribLocation$2: function(receiver, program, $name) {
      return receiver.getAttribLocation(program, $name);
    },
    getUniformLocation$2: function(receiver, program, $name) {
      return receiver.getUniformLocation(program, $name);
    },
    readPixels$7: function(receiver, x, y, width, height, format, type, pixels) {
      return receiver.readPixels(x, y, width, height, format, type, pixels);
    },
    renderbufferStorage$4: function(receiver, target, internalformat, width, height) {
      return receiver.renderbufferStorage(target, internalformat, width, height);
    },
    texImage2DImage$6: function(receiver, target, level, internalformat, format, type, image) {
      return receiver.texImage2D(target, level, internalformat, format, type, image);
    },
    texParameteri$3: function(receiver, target, pname, param) {
      return receiver.texParameteri(target, pname, param);
    },
    uniform2f$3: function(receiver, $location, x, y) {
      return receiver.uniform2f($location, x, y);
    },
    uniform3f$4: function(receiver, $location, x, y, z) {
      return receiver.uniform3f($location, x, y, z);
    },
    uniformMatrix3fv$3: function(receiver, $location, transpose, array) {
      return receiver.uniformMatrix3fv($location, transpose, array);
    },
    useProgram$1: function(receiver, program) {
      return receiver.useProgram(program);
    },
    viewport$4: function(receiver, x, y, width, height) {
      return receiver.viewport(x, y, width, height);
    },
    texImage2DTyped$9: function(receiver, targetTexture, levelOfDetail, internalFormat, width, height, border, format, type, data) {
      return receiver.texImage2D(targetTexture, levelOfDetail, internalFormat, width, height, border, format, type, data);
    },
    "%": "WebGLRenderingContext"
  }
}],
["dart.dom.web_sql", "dart:web_sql", , P, {
  "^": ""
}],
["dart.isolate", "dart:isolate", , P, {
  "^": "",
  Capability: {
    "^": "Object;"
  }
}],
["dart.math", "dart:math", , P, {
  "^": "",
  _JenkinsSmiHash_combine0: function(hash, value) {
    hash = 536870911 & hash + value;
    hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    return hash ^ hash >>> 6;
  },
  _JenkinsSmiHash_finish0: function(hash) {
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >>> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  _JSRandom: {
    "^": "Object;",
    nextInt$1: function(max) {
      if (max <= 0 || max > 4294967296)
        throw H.wrapException(P.RangeError$("max must be in range 0 < max \u2264 2^32, was " + max));
      return Math.random() * max >>> 0;
    },
    nextDouble$0: function() {
      return Math.random();
    }
  },
  Point: {
    "^": "Object;x>,y>",
    toString$0: function(_) {
      return "Point(" + H.S(this.x) + ", " + H.S(this.y) + ")";
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (!(other instanceof P.Point))
        return false;
      t1 = this.x;
      t2 = other.x;
      if (t1 == null ? t2 == null : t1 === t2) {
        t1 = this.y;
        t2 = other.y;
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var t1, t2;
      t1 = J.get$hashCode$(this.x);
      t2 = J.get$hashCode$(this.y);
      return P._JenkinsSmiHash_finish0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2));
    },
    $add: function(_, other) {
      var t1, t2, t3, t4;
      t1 = this.x;
      t2 = J.getInterceptor$x(other);
      t3 = t2.get$x(other);
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = this.y;
      t2 = t2.get$y(other);
      if (typeof t4 !== "number")
        return t4.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = new P.Point(t1 + t3, t4 + t2);
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      return t2;
    },
    $sub: function(_, other) {
      var t1, t2, t3, t4;
      t1 = this.x;
      t2 = J.getInterceptor$x(other);
      t3 = t2.get$x(other);
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = this.y;
      t2 = t2.get$y(other);
      if (typeof t4 !== "number")
        return t4.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = new P.Point(t1 - t3, t4 - t2);
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      return t2;
    },
    $mul: function(_, factor) {
      var t1, t2;
      t1 = this.x;
      if (typeof t1 !== "number")
        return t1.$mul();
      if (typeof factor !== "number")
        return H.iae(factor);
      t2 = this.y;
      if (typeof t2 !== "number")
        return t2.$mul();
      t2 = new P.Point(t1 * factor, t2 * factor);
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      return t2;
    }
  },
  _RectangleBase: {
    "^": "Object;",
    get$right: function(_) {
      return this.get$left(this) + this.width;
    },
    get$bottom: function(_) {
      return this.get$top(this) + this.height;
    },
    toString$0: function(_) {
      return "Rectangle (" + this.get$left(this) + ", " + this.top + ") " + this.width + " x " + this.height;
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (!t1.$isRectangle)
        return false;
      if (this.get$left(this) === t1.get$left(other)) {
        t2 = this.top;
        t1 = t2 === t1.get$top(other) && this.left + this.width === t1.get$right(other) && t2 + this.height === t1.get$bottom(other);
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var t1 = this.top;
      return P._JenkinsSmiHash_finish0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, this.get$left(this) & 0x1FFFFFFF), t1 & 0x1FFFFFFF), this.left + this.width & 0x1FFFFFFF), t1 + this.height & 0x1FFFFFFF));
    }
  },
  Rectangle: {
    "^": "_RectangleBase;left>,top>,width>,height>",
    $asRectangle: null,
    static: {Rectangle$: function(left, $top, width, height, $T) {
        var t1, t2;
        t1 = width < 0 ? -width * 0 : width;
        t2 = height < 0 ? -height * 0 : height;
        return H.setRuntimeTypeInfo(new P.Rectangle(left, $top, t1, t2), [$T]);
      }}
  }
}],
["dart.typed_data.implementation", "dart:_native_typed_data", , H, {
  "^": "",
  _checkLength: function($length) {
    return $length;
  },
  _ensureNativeList: function(list) {
    var t1, t2, result, i, t3;
    t1 = J.getInterceptor(list);
    if (!!t1.$isJSIndexable)
      return list;
    t2 = t1.get$length(list);
    if (typeof t2 !== "number")
      return H.iae(t2);
    result = Array(t2);
    result.fixed$length = Array;
    t2 = result.length;
    i = 0;
    while (true) {
      t3 = t1.get$length(list);
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (!(i < t3))
        break;
      t3 = t1.$index(list, i);
      if (i >= t2)
        return H.ioore(result, i);
      result[i] = t3;
      ++i;
    }
    return result;
  },
  NativeByteBuffer: {
    "^": "Interceptor;",
    $isNativeByteBuffer: 1,
    "%": "ArrayBuffer"
  },
  NativeTypedData: {
    "^": "Interceptor;",
    _invalidIndex$2: function(receiver, index, $length) {
      var t1 = J.getInterceptor$n(index);
      if (t1.$lt(index, 0) || t1.$ge(index, $length)) {
        if (!!this.$isList)
          if ($length === receiver.length)
            throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        throw H.wrapException(P.RangeError$range(index, 0, $length - 1, null, null));
      } else
        throw H.wrapException(P.ArgumentError$("Invalid list index " + H.S(index)));
    },
    $isNativeTypedData: 1,
    "%": "DataView;ArrayBufferView;NativeTypedArray|NativeTypedArray_ListMixin|NativeTypedArray_ListMixin_FixedLengthListMixin|NativeTypedArrayOfDouble|NativeTypedArray_ListMixin0|NativeTypedArray_ListMixin_FixedLengthListMixin0|NativeTypedArrayOfInt"
  },
  NativeTypedArray: {
    "^": "NativeTypedData;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $isJavaScriptIndexingBehavior: 1,
    $isJSIndexable: 1
  },
  NativeTypedArrayOfDouble: {
    "^": "NativeTypedArray_ListMixin_FixedLengthListMixin;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    }
  },
  NativeTypedArray_ListMixin: {
    "^": "NativeTypedArray+ListMixin;",
    $isList: 1,
    $asList: function() {
      return [P.$double];
    },
    $isEfficientLength: 1
  },
  NativeTypedArray_ListMixin_FixedLengthListMixin: {
    "^": "NativeTypedArray_ListMixin+FixedLengthListMixin;"
  },
  NativeTypedArrayOfInt: {
    "^": "NativeTypedArray_ListMixin_FixedLengthListMixin0;",
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: 1,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: 1
  },
  NativeTypedArray_ListMixin0: {
    "^": "NativeTypedArray+ListMixin;",
    $isList: 1,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: 1
  },
  NativeTypedArray_ListMixin_FixedLengthListMixin0: {
    "^": "NativeTypedArray_ListMixin0+FixedLengthListMixin;"
  },
  NativeFloat32List: {
    "^": "NativeTypedArrayOfDouble;",
    $isList: 1,
    $asList: function() {
      return [P.$double];
    },
    $isEfficientLength: 1,
    "%": "Float32Array"
  },
  NativeFloat64List: {
    "^": "NativeTypedArrayOfDouble;",
    $isList: 1,
    $asList: function() {
      return [P.$double];
    },
    $isEfficientLength: 1,
    "%": "Float64Array"
  },
  NativeInt16List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $isList: 1,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: 1,
    "%": "Int16Array"
  },
  NativeInt32List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $isList: 1,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: 1,
    "%": "Int32Array"
  },
  NativeInt8List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $isList: 1,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: 1,
    "%": "Int8Array"
  },
  NativeUint16List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $isList: 1,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: 1,
    "%": "Uint16Array"
  },
  NativeUint32List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $isList: 1,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: 1,
    "%": "Uint32Array"
  },
  NativeUint8ClampedList: {
    "^": "NativeTypedArrayOfInt;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $isList: 1,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: 1,
    "%": "CanvasPixelArray|Uint8ClampedArray"
  },
  NativeUint8List: {
    "^": "NativeTypedArrayOfInt;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $isList: 1,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: 1,
    "%": ";Uint8Array"
  }
}],
["dart2js._js_primitives", "dart:_js_primitives", , H, {
  "^": "",
  printString: function(string) {
    if (typeof dartPrint == "function") {
      dartPrint(string);
      return;
    }
    if (typeof console == "object" && typeof console.log != "undefined") {
      console.log(string);
      return;
    }
    if (typeof window == "object")
      return;
    if (typeof print == "function") {
      print(string);
      return;
    }
    throw "Unable to print message: " + String(string);
  }
}],
["dialogue_box", "dialogue_box.dart", , O, {
  "^": "",
  DialogueBox: {
    "^": "Object;div_,text_div_,close_div_",
    DialogueBox$1: function(div_) {
      var t1 = this.div_;
      this.text_div_ = t1.querySelector("#dialogue-text");
      t1 = t1.querySelector("#dialogue-close");
      this.close_div_ = t1;
      t1 = J.get$onClick$x(t1);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new O.DialogueBox_closure()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    },
    static: {DialogueBox$: function(div_) {
        var t1 = new O.DialogueBox(div_, null, null);
        t1.DialogueBox$1(div_);
        return t1;
      }}
  },
  DialogueBox_closure: {
    "^": "Closure:1;",
    call$1: function($event) {
      return P.print("click");
    }
  }
}],
["directions", "behaviour/directions.dart", , K, {
  "^": "",
  Directions: {
    "^": "Object;_directions$_value",
    toString$0: function(_) {
      return "Enum." + this._directions$_value;
    }
  }
}],
["door_behaviour", "behaviour/door_behaviour.dart", , X, {
  "^": "",
  DoorBehaviour: {
    "^": "Tile3dBehaviour;name_,closed_,passing_,height_,position_,area_,rotation_,offset_,drawable_",
    init$1: function(drawable) {
      var t1;
      this.super$Tile3dBehaviour$init$1(drawable);
      t1 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t1.setValues$3(0, 0.5, 0);
      this.offset_ = t1;
    },
    open$0: function(_) {
      this.drawable_.setModel$1(1);
      this.closed_ = false;
    },
    close$0: function(_) {
      if (!this.passing_) {
        this.drawable_.setModel$1(0);
        this.closed_ = true;
      }
    },
    update$0: function() {
      var t1, behaviour, t2, t3, t4, t5, t6;
      this.passing_ = false;
      for (t1 = this.area_.get$behaviours_(), t1 = new J.ArrayIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        behaviour = t1.__interceptors$_current;
        t2 = J.getInterceptor(behaviour);
        if (!!t2.$isTerrainElementBehaviour && !t2.$isDoorBehaviour) {
          t2 = behaviour.get$position_();
          t3 = behaviour.get$offset_().storage;
          t4 = t3[0];
          t3 = t3[1];
          t5 = new Float32Array(2);
          t5[0] = t4;
          t5[1] = t3;
          t2 = t2.storage;
          t3 = t2[0];
          t4 = t5[0];
          t2 = t2[1];
          t5 = t5[1];
          t6 = new Float32Array(2);
          t6[0] = t3 + t4;
          t6[1] = t2 + t5;
          t5 = this.position_.$add(0, this.offset_.get$xy());
          t2 = new Float32Array(2);
          t2[1] = t6[1];
          t2[0] = t6[0];
          if (new T.Vector2(t2).sub$1(t5).get$length2() < 0.5)
            this.passing_ = true;
        }
      }
    },
    getHeight$0: function() {
      return this.closed_ === true ? 1 : 0;
    }
  }
}],
["drawable_factory", "drawable_factory.dart", , S, {
  "^": "",
  DrawableFactory: {
    "^": "Object;renderer_,texture_manager_",
    initGeometry$2: function(geometry, buffers) {
      var t1 = J.createBuffer$0$x(this.renderer_.gl_);
      buffers.pos_buffer_ = t1;
      J.bindBuffer$2$x(this.renderer_.gl_, 34962, t1);
      J.bufferDataTyped$3$x(this.renderer_.gl_, 34962, new Float32Array(H._ensureNativeList(geometry.get$vertices_())), 35044);
      t1 = J.createBuffer$0$x(this.renderer_.gl_);
      buffers.ind_buffer_ = t1;
      J.bindBuffer$2$x(this.renderer_.gl_, 34963, t1);
      J.bufferDataTyped$3$x(this.renderer_.gl_, 34963, new Uint16Array(H._ensureNativeList(geometry.get$indices_())), 35044);
      if (geometry.orientation_ != null) {
        t1 = J.createBuffer$0$x(this.renderer_.gl_);
        buffers.nor_buffer_ = t1;
        J.bindBuffer$2$x(this.renderer_.gl_, 34962, t1);
        J.bufferDataTyped$3$x(this.renderer_.gl_, 34962, new Float32Array(H._ensureNativeList(geometry.orientation_)), 35044);
      }
      buffers.vertices_ = J.get$length$asx(geometry.indices_);
    },
    initTexture$2: function(geometry, buffers) {
      var t1 = J.createBuffer$0$x(this.renderer_.gl_);
      buffers.tex_buffer_ = t1;
      J.bindBuffer$2$x(this.renderer_.gl_, 34962, t1);
      J.bufferDataTyped$3$x(this.renderer_.gl_, 34962, new Float32Array(H._ensureNativeList(geometry.get$text_coords_())), 35044);
      buffers.tex_ = this.texture_manager_.getAsset$1(geometry.image_);
    },
    createTexturedDrawable$1: function(geometry) {
      var buffers, t1, t2, t3, t4, ret;
      buffers = new Q.BaseDrawableBuffers(null, null, null, null, null, null, null);
      if (geometry == null)
        P.print("Uninitialised geometry in TexturedDrawable");
      this.initGeometry$2(geometry, buffers);
      this.initTexture$2(geometry, buffers);
      t1 = H.setRuntimeTypeInfo([], [Q.BaseDrawableBuffers]);
      t2 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t2.setValues$3(0, 0, 0);
      t3 = T.Quaternion$(0, 0, 0, 1);
      t4 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t4.setValues$3(1, 1, 1);
      ret = new Q.BaseDrawable(t1, null, t2, t3, 1, t4, null, null, false);
      t1.push(buffers);
      ret.current_buffer_ = buffers;
      t1 = geometry.get$orientation_();
      t2 = this.renderer_;
      if (t1 == null)
        ret.shader_ = t2.texture_shader_;
      else
        ret.shader_ = t2.light_shader_;
      return ret;
    },
    createAnimatedDrawable$1: function(geometry) {
      var buffers, t1, g, buff, t2, t3, t4, t5, ret;
      buffers = H.setRuntimeTypeInfo([], [Q.BaseDrawableBuffers]);
      for (t1 = new J.ArrayIterator(geometry, geometry.length, 0, null); t1.moveNext$0();) {
        g = t1.__interceptors$_current;
        buff = new Q.BaseDrawableBuffers(null, null, null, null, null, null, null);
        this.initGeometry$2(g, buff);
        this.initTexture$2(g, buff);
        buffers.push(buff);
      }
      t1 = C.JSArray_methods.get$first(buffers);
      t2 = H.setRuntimeTypeInfo([], [Q.BaseDrawableBuffers]);
      t3 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t3.setValues$3(0, 0, 0);
      t4 = T.Quaternion$(0, 0, 0, 1);
      t5 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t5.setValues$3(1, 1, 1);
      ret = new Q.AnimatedGeometry(null, null, null, null, null, 0, t2, null, t3, t4, 1, t5, null, null, false);
      t2.push(t1);
      ret.current_buffer_ = t1;
      ret.AnimatedGeometry$1(buffers);
      t1 = C.JSArray_methods.get$first(geometry).get$orientation_();
      t2 = this.renderer_;
      if (t1 == null)
        ret.shader_ = t2.texture_shader_;
      else
        ret.shader_ = t2.light_shader_;
      return ret;
    },
    DrawableFactory$1: function(renderer_) {
      this.texture_manager_ = new A.AssetManager(P.LinkedHashMap_LinkedHashMap(null, null, null, null, null), null, new S.DrawableFactory_closure(this));
    },
    static: {DrawableFactory$: function(renderer_) {
        var t1 = new S.DrawableFactory(renderer_, null);
        t1.DrawableFactory$1(renderer_);
        return t1;
      }}
  },
  DrawableFactory_closure: {
    "^": "Closure:1;this_0",
    call$1: function($name) {
      return Z.Texture$($name, this.this_0.renderer_.gl_);
    }
  }
}],
["enemy_behaviour", "behaviour/enemy_behaviour.dart", , Y, {
  "^": "",
  EnemyNormalState: {
    "^": "WalkingBehaviourState;path_follower_,original_node_,dir_,max_vel_,element_",
    hit$1: function(sprite) {
      var element, t1;
      element = this.element_;
      t1 = element.get$dead_state_();
      element.cur_state_.toString;
      element.cur_state_ = t1;
      t1.begin$0();
    },
    update$0: function() {
      var t1, behaviour, t2, t3, t4, t5, t6, dist, closest_sheep, min_distance, getBackNode, diff, distance, desired;
      for (t1 = this.element_.area_.get$behaviours_(), t1 = new J.ArrayIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        behaviour = t1.__interceptors$_current;
        if (behaviour instanceof O.BaseSheepBehaviour && !(behaviour.cur_state_ instanceof O.SheepDeadState)) {
          t2 = this.element_;
          t3 = t2.position_;
          t2 = t2.offset_.storage;
          t4 = t2[0];
          t2 = t2[1];
          t5 = new Float32Array(2);
          t5[0] = t4;
          t5[1] = t2;
          t3 = t3.storage;
          t2 = t3[0];
          t4 = t5[0];
          t3 = t3[1];
          t5 = t5[1];
          t6 = new Float32Array(2);
          t6[0] = t2 + t4;
          t6[1] = t3 + t5;
          t5 = behaviour.get$position_().$add(0, behaviour.get$offset_().get$xy());
          t2 = new Float32Array(2);
          t2[1] = t6[1];
          t2[0] = t6[0];
          dist = new T.Vector2(t2).sub$1(t5).get$length2();
          closest_sheep = behaviour;
          min_distance = dist;
        } else {
          min_distance = null;
          closest_sheep = null;
        }
        if (closest_sheep != null) {
          if (typeof min_distance !== "number")
            return min_distance.$lt();
          t2 = min_distance < 12;
        } else
          t2 = false;
        if (t2) {
          getBackNode = this.original_node_;
          if (getBackNode == null) {
            t2 = this.path_follower_;
            getBackNode = J.$index$asx(J.get$points$x(t2.path_), t2.cur_path_point_);
          }
          t2 = this.element_;
          t3 = new Y.EnemyFollowState(closest_sheep, getBackNode, C.Directions_UP, 0.05, t2);
          t2.cur_state_.toString;
          t2.cur_state_ = t3;
          t3.begin$0();
        }
      }
      t1 = this.path_follower_;
      diff = J.$sub$n(J.$index$asx(J.get$points$x(t1.path_), t1.cur_path_point_), this.element_.position_);
      distance = J.get$length$asx(diff);
      t2 = t1.cur_path_point_;
      t3 = J.get$length$asx(J.get$points$x(t1.path_));
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = J.getInterceptor$n(distance);
      if (t4.$lt(distance, 0.1))
        ++t1.cur_path_point_;
      else {
        if (t4.$lt(distance, t1.acceptable_distance_))
          t2 = t2 < t3 || t1.callback_ == null;
        else
          t2 = false;
        if (t2)
          ++t1.cur_path_point_;
        else {
          t2 = this.max_vel_;
          desired = diff.normalize$0().$mul(0, t2).$mul(0, 0.1);
          t2 = t1.vel_.$add(0, desired).normalize$0().$mul(0, t2);
          t1.vel_ = t2;
          this.addPos$1(t2);
        }
      }
      t2 = t1.cur_path_point_;
      t3 = J.get$length$asx(J.get$points$x(t1.path_));
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (t2 >= t3)
        if (t1.callback_ == null)
          t1.cur_path_point_ = 0;
        else
          t1.callback_$0();
    }
  },
  EnemyFollowState: {
    "^": "WalkingBehaviourState;follow_,origin_pos_,dir_,max_vel_,element_",
    hit$1: function(sprite) {
    },
    update$0: function() {
      var diff, t1, behaviour, min_distance, t2;
      diff = this.follow_.get$position_().$sub(0, this.element_.position_);
      for (t1 = this.element_.area_.get$behaviours_(), t1 = new J.ArrayIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        behaviour = t1.__interceptors$_current;
        min_distance = diff.get$length(diff);
        if (behaviour instanceof O.BaseSheepBehaviour && !(behaviour.cur_state_ instanceof O.SheepDeadState)) {
          t2 = behaviour.get$position_().$sub(0, this.element_.position_);
          if (t2.get$length(t2) < min_distance)
            this.follow_ = behaviour;
        }
      }
      this.walkDir$1(diff);
      if (diff.get$length2() < 0.1) {
        this.follow_.hit$1(this.element_);
        this.initGetBackState$0();
      }
      if (diff.get$length2() > 20)
        this.initGetBackState$0();
    },
    initGetBackState$0: function() {
      var this_element, t1, t2, getBack, t3;
      this_element = this.element_;
      t1 = this.origin_pos_;
      t2 = Y.aStar(this_element.area_.get$terrain_().obstacles_, this_element.area_.get$terrain_().getSize$0(), this_element.position_, t1);
      getBack = new Y.EnemyNormalState(null, null, C.Directions_UP, 0.03, this_element);
      t3 = new Float32Array(H._checkLength(2));
      t3[0] = 0;
      t3[1] = 0;
      t3 = new F.MapPathFollower(t2, 0, null, new T.Vector2(t3), 0.1);
      getBack.path_follower_ = t3;
      t3.callback_ = new Y.EnemyFollowState_initGetBackState_closure(this, this_element);
      getBack.original_node_ = t1;
      t1 = this.element_;
      t1.cur_state_.toString;
      t1.cur_state_ = getBack;
      getBack.begin$0();
    }
  },
  EnemyFollowState_initGetBackState_closure: {
    "^": "Closure:4;this_0,this_element_1",
    call$0: function() {
      var t1, t2;
      t1 = this.this_0.element_;
      t2 = this.this_element_1.get$normal_state_();
      t1.cur_state_.toString;
      t1.cur_state_ = t2;
      t2.begin$0();
    }
  },
  EnemyDeadState: {
    "^": "BehaviourState;element_",
    begin$0: function() {
      this.element_.anim_drawable_.SetSequence$2("die", 1);
    },
    hit$1: function(sprite) {
    },
    update$0: function() {
    }
  },
  EnemyBehaviour: {
    "^": "SpriteBehaviour;dead_,dead_state_<,normal_state_<,cur_state_,anim_drawable_,z_accel_,height_,on_ground_,position_,area_,rotation_,offset_,drawable_",
    EnemyBehaviour$2: function(area, path) {
      var t1, t2;
      this.dead_state_ = new Y.EnemyDeadState(this);
      t1 = new Y.EnemyNormalState(null, null, C.Directions_UP, 0.03, this);
      t2 = new Float32Array(H._checkLength(2));
      t2[0] = 0;
      t2[1] = 0;
      t1.path_follower_ = new F.MapPathFollower(path, 0, null, new T.Vector2(t2), 0.1);
      this.normal_state_ = t1;
      this.cur_state_ = t1;
    }
  }
}],
["game_area", "game_area.dart", , V, {
  "^": "",
  GameArea: {
    "^": "Object;drawables_<,behaviours_<,drawables_to_add_,behaviours_to_add_,drawables_to_remove_,behaviours_to_remove_,paths_,terrain_<,iterating_,offset_<",
    LoadGameArea$4: function(level_path, behaviour_path, loader, state) {
      var ret = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null])), [null]);
      this.loadTerrain$3(level_path, state, loader).then$1(new V.GameArea_LoadGameArea_closure(this, behaviour_path, loader, state, ret));
      return ret.future;
    },
    loadTerrain$3: function(level_path, state, loader) {
      return new V.LevelImporter().RequestFile$1(level_path).then$1(new V.GameArea_loadTerrain_closure(this, state, loader));
    },
    updateBehaviour$0: function() {
      var t1, t2, t3;
      this.iterating_ = true;
      for (t1 = this.behaviours_, t2 = new J.ArrayIterator(t1, t1.length, 0, null); t2.moveNext$0();)
        t2.__interceptors$_current.update$0();
      this.iterating_ = false;
      t2 = this.drawables_;
      t3 = this.drawables_to_add_;
      C.JSArray_methods.addAll$1(t2, t3);
      C.JSArray_methods.set$length(t3, 0);
      t3 = this.behaviours_to_add_;
      C.JSArray_methods.addAll$1(t1, t3);
      C.JSArray_methods.set$length(t3, 0);
      C.JSArray_methods.checkGrowable$1(t2, "removeWhere");
      C.JSArray_methods._removeWhere$2(t2, new V.GameArea_updateBehaviour_closure(this), true);
      C.JSArray_methods.set$length(this.drawables_to_remove_, 0);
      C.JSArray_methods.checkGrowable$1(t1, "removeWhere");
      C.JSArray_methods._removeWhere$2(t1, new V.GameArea_updateBehaviour_closure0(this), true);
      C.JSArray_methods.set$length(this.behaviours_to_remove_, 0);
    },
    initBehaviour$4: function(behaviour_path, terrain, loader, state) {
      new R.SpriteImporter(loader, this.offset_).RequestFile$1(behaviour_path).then$1(new V.GameArea_initBehaviour_closure(this, terrain, loader, state));
    },
    addElement$2: function(drawable, behaviour) {
      behaviour.init$1(drawable);
      if (this.iterating_) {
        this.drawables_to_add_.push(drawable);
        this.behaviours_to_add_.push(behaviour);
      } else {
        this.drawables_.push(drawable);
        this.behaviours_.push(behaviour);
      }
    }
  },
  GameArea_LoadGameArea_closure: {
    "^": "Closure:1;this_0,behaviour_path_1,loader_2,state_3,ret_4",
    call$1: function(res) {
      var t1 = this.behaviour_path_1;
      if (t1 != null)
        this.this_0.initBehaviour$4(t1, res, this.loader_2, this.state_3);
      this.ret_4.complete$1(0, true);
    }
  },
  GameArea_loadTerrain_closure: {
    "^": "Closure:19;this_0,state_1,loader_2",
    call$1: function(data) {
      return data.AddToGameState$3(this.this_0, this.state_1, this.loader_2);
    }
  },
  GameArea_updateBehaviour_closure: {
    "^": "Closure:1;this_0",
    call$1: function(drawable) {
      return C.JSArray_methods.contains$1(this.this_0.drawables_to_remove_, drawable);
    }
  },
  GameArea_updateBehaviour_closure0: {
    "^": "Closure:1;this_1",
    call$1: function(behaviour) {
      return C.JSArray_methods.contains$1(this.this_1.behaviours_to_remove_, behaviour);
    }
  },
  GameArea_initBehaviour_closure: {
    "^": "Closure:1;this_0,terrain_1,loader_2,state_3",
    call$1: function(sprites) {
      this.loader_2.AddToGameState$4(sprites, this.terrain_1, this.this_0, this.state_3);
    }
  }
}],
["game_loop_common", "package:game_loop/game_loop_common.dart", , B, {
  "^": "",
  GameLoop: {
    "^": "Object;",
    get$time: function() {
      return Date.now() / 1000;
    },
    processTimers$0: function() {
      var t1, _timersLength, t2, i;
      t1 = this._timers;
      _timersLength = t1.length;
      for (t2 = this.updateTimeStep, i = 0; i < _timersLength; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i]._update$1(t2);
      }
      for (i = t1.length - 1; i >= 0; --i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i].get$_isDead();
      }
    },
    onUpdate$1: function(arg0) {
      return this.onUpdate.call$1(arg0);
    }
  },
  DigitalButton: {
    "^": "Object;buttonId,framePressed?,frameReleased?,timePressed,timeReleased",
    get$down: function() {
      return this.framePressed > this.frameReleased;
    }
  },
  DigitalButtonEvent: {
    "^": "Object;down<,frame,buttonId,time<",
    toString$0: function(_) {
      return "Button: " + H.S(this.buttonId) + " DOWN: " + this.down + " [" + this.frame + "@" + H.S(this.time) + "]";
    }
  },
  DigitalInput: {
    "^": "Object;",
    digitalButtonEvent$1: function($event) {
      var button = this.buttons.$index(0, $event.buttonId);
      if (button == null)
        return;
      if ($event.down) {
        if (!button.get$down()) {
          button.set$framePressed($event.frame);
          button.timePressed = $event.time;
        }
      } else {
        button.set$frameReleased($event.frame);
        button.timeReleased = $event.time;
      }
    },
    isDown$1: function(buttonId) {
      var button = this.buttons.$index(0, buttonId);
      if (button == null)
        return false;
      return button.get$down();
    },
    DigitalInput$2: function(gameLoop, buttonIds) {
      var t1, t2, buttonId;
      for (t1 = new J.ArrayIterator(buttonIds, buttonIds.length, 0, null), t2 = this.buttons; t1.moveNext$0();) {
        buttonId = t1.__interceptors$_current;
        t2.$indexSet(0, buttonId, new B.DigitalButton(buttonId, 0, 0, 0, 0));
      }
    }
  },
  GameLoopState: {
    "^": "Object;"
  },
  GameLoopTimer: {
    "^": "Object;"
  }
}],
["game_loop_html", "package:game_loop/game_loop_html.dart", , G, {
  "^": "",
  GameLoopGamepad: {
    "^": "Object;gameLoop,buttons,sticks"
  },
  GameLoopHtml: {
    "^": "GameLoop;element,_frameCounter,_initialized,_interrupt,_previousFrameTime,_frameTime,_resizePending,_nextResize,GameLoopHtml_maxAccumulatedTime,_accumulatedTime,_gameTime,_renderInterpolationFactor,resizeLimit,processAllKeyboardEvents,_pointerLock,_keyboard,_mouse,_gamepad0,_lastMousePos,_touchSet,_rafId,_touchEvents,_keyboardEvents,_mouseEvents,onRender,onResize,onFullscreenChange,onPointerLockChange,onTouchStart,onTouchEnd,onKeyDown,_game_loop_html$_state,updateTimeStep,maxAccumulatedTime,_timers,onUpdate,_game_loop_common$_state",
    _processKeyboardEvents$0: function() {
      var t1, t2, keyboardEvent, t3, t4, buttonId;
      if (!this.processAllKeyboardEvents) {
        t1 = document.activeElement;
        t2 = document.body;
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = true;
      if (t1)
        for (t1 = this._keyboardEvents, t1 = new J.ArrayIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
          keyboardEvent = t1.__interceptors$_current;
          t2 = J.getInterceptor$x(keyboardEvent);
          t3 = t2.get$type(keyboardEvent);
          t4 = t2.get$timeStamp(keyboardEvent);
          if (typeof t4 !== "number")
            return t4.$div();
          buttonId = t2.get$keyCode(keyboardEvent);
          t2 = this._frameCounter;
          this._keyboard.digitalButtonEvent$1(new B.DigitalButtonEvent(t3 === "keydown", t2, buttonId, t4 / 1000));
        }
      C.JSArray_methods.set$length(this._keyboardEvents, 0);
    },
    _processMouseEvents$0: function() {
      var t1, docElem, box, t2, t3, t4, canvasX, canvasY, mouseEvent, t5, t6, t7, t8, time, mouseX, x, y, clampX, withinCanvas, t9, clampY, dx, dy, buttonId;
      t1 = this._mouse;
      t1._wheelDx = 0;
      t1._wheelDy = 0;
      t1._dx = 0;
      t1._dy = 0;
      docElem = document.documentElement;
      t1 = this.element;
      box = t1.getBoundingClientRect();
      t2 = J.getInterceptor$x(box);
      t3 = t2.get$left(box);
      t4 = C.JSNumber_methods.round$0(window.pageXOffset);
      if (typeof t3 !== "number")
        return t3.$add();
      docElem.toString;
      canvasX = C.JSNumber_methods.toInt$0(Math.floor(t3 + t4 - C.JSNumber_methods.round$0(docElem.clientLeft)));
      t2 = t2.get$top(box);
      t4 = C.JSNumber_methods.round$0(window.pageYOffset);
      if (typeof t2 !== "number")
        return t2.$add();
      canvasY = C.JSNumber_methods.toInt$0(Math.floor(t2 + t4 - C.JSNumber_methods.round$0(docElem.clientTop)));
      for (t2 = this._mouseEvents, t3 = new J.ArrayIterator(t2, t2.length, 0, null); t3.moveNext$0();) {
        mouseEvent = t3.__interceptors$_current;
        t4 = J.getInterceptor$x(mouseEvent);
        t5 = t4.get$type(mouseEvent);
        t6 = t4.get$type(mouseEvent);
        t7 = t4.get$type(mouseEvent);
        t8 = t4.get$timeStamp(mouseEvent);
        if (typeof t8 !== "number")
          return t8.$div();
        time = t8 / 1000;
        if (t5 === "mousemove") {
          mouseX = t4.get$page(mouseEvent).x;
          t5 = mouseEvent.pageX;
          t6 = mouseEvent.pageY;
          new P.Point(t5, t6).$builtinTypeInfo = [null];
          if (typeof mouseX !== "number")
            return mouseX.$sub();
          x = mouseX - canvasX;
          if (typeof t6 !== "number")
            return t6.$sub();
          y = t6 - canvasY;
          if (mouseX < canvasX) {
            clampX = 0;
            withinCanvas = false;
          } else {
            t5 = C.JSNumber_methods.round$0(t1.clientLeft);
            t7 = C.JSNumber_methods.round$0(t1.clientTop);
            t8 = C.JSNumber_methods.round$0(t1.clientWidth);
            t9 = C.JSNumber_methods.round$0(t1.clientHeight);
            if (t8 < 0)
              t8 = -t8 * 0;
            if (t9 < 0)
              t9 = -t9 * 0;
            new P.Rectangle(t5, t7, t8, t9).$builtinTypeInfo = [null];
            if (mouseX > canvasX + t8) {
              t5 = C.JSNumber_methods.round$0(t1.clientLeft);
              t7 = C.JSNumber_methods.round$0(t1.clientTop);
              t8 = C.JSNumber_methods.round$0(t1.clientWidth);
              t9 = C.JSNumber_methods.round$0(t1.clientHeight);
              clampX = t8 < 0 ? -t8 * 0 : t8;
              t8 = t9 < 0 ? -t9 * 0 : t9;
              new P.Rectangle(t5, t7, clampX, t8).$builtinTypeInfo = [null];
              withinCanvas = false;
            } else {
              clampX = x;
              withinCanvas = true;
            }
          }
          if (t6 < canvasY) {
            clampY = 0;
            withinCanvas = false;
          } else {
            t5 = C.JSNumber_methods.round$0(t1.clientLeft);
            t7 = C.JSNumber_methods.round$0(t1.clientTop);
            t8 = C.JSNumber_methods.round$0(t1.clientWidth);
            t9 = C.JSNumber_methods.round$0(t1.clientHeight);
            if (t8 < 0)
              t8 = -t8 * 0;
            if (t9 < 0)
              t9 = -t9 * 0;
            new P.Rectangle(t5, t7, t8, t9).$builtinTypeInfo = [null];
            if (t6 > canvasY + t9) {
              t5 = C.JSNumber_methods.round$0(t1.clientLeft);
              t6 = C.JSNumber_methods.round$0(t1.clientTop);
              t7 = C.JSNumber_methods.round$0(t1.clientWidth);
              t8 = C.JSNumber_methods.round$0(t1.clientHeight);
              if (t7 < 0)
                t7 = -t7 * 0;
              clampY = t8 < 0 ? -t8 * 0 : t8;
              new P.Rectangle(t5, t6, t7, clampY).$builtinTypeInfo = [null];
              withinCanvas = false;
            } else
              clampY = y;
          }
          t5 = this._pointerLock;
          t5.toString;
          t6 = document.pointerLockElement;
          t5 = t5.gameLoop.element;
          if (t6 == null ? t5 == null : t6 === t5) {
            dx = t4.get$movement(mouseEvent).x;
            t5 = mouseEvent.webkitMovementX;
            dy = mouseEvent.webkitMovementY;
            new P.Point(t5, dy).$builtinTypeInfo = [null];
          } else {
            t5 = t4.get$client(mouseEvent).x;
            t6 = this._lastMousePos.x;
            if (typeof t5 !== "number")
              return t5.$sub();
            if (typeof t6 !== "number")
              return H.iae(t6);
            dx = t5 - t6;
            t6 = mouseEvent.clientX;
            t5 = mouseEvent.clientY;
            new P.Point(t6, t5).$builtinTypeInfo = [null];
            t6 = this._lastMousePos.y;
            if (typeof t5 !== "number")
              return t5.$sub();
            if (typeof t6 !== "number")
              return H.iae(t6);
            dy = t5 - t6;
            t6 = new P.Point(mouseEvent.clientX, mouseEvent.clientY);
            t6.$builtinTypeInfo = [null];
            this._lastMousePos = t6;
          }
          t4 = new P.Point(t4.get$_clientX(mouseEvent), mouseEvent.clientY);
          t4.$builtinTypeInfo = [null];
          this._lastMousePos = t4;
          t4 = this._frameCounter;
          t5 = this._mouse;
          t5._x = x;
          t5._y = y;
          t5._time = time;
          t5._frame = t4;
          t4 = t5._dx;
          if (typeof dx !== "number")
            return H.iae(dx);
          t5._dx = t4 + dx;
          t4 = t5._dy;
          if (typeof dy !== "number")
            return H.iae(dy);
          t5._dy = t4 + dy;
          t5._clampX = clampX;
          t5._clampY = clampY;
          t5._withinCanvas = withinCanvas;
        } else if (t6 === "mousewheel") {
          H.interceptedTypeCast(mouseEvent, "$isWheelEvent");
          t4 = this._mouse;
          t5 = C.WheelEvent_methods.get$deltaX(mouseEvent);
          t6 = C.WheelEvent_methods.get$deltaY(mouseEvent);
          t7 = t4._wheelDx;
          if (typeof t5 !== "number")
            return H.iae(t5);
          t4._wheelDx = t7 + t5;
          t5 = t4._wheelDy;
          if (typeof t6 !== "number")
            return H.iae(t6);
          t4._wheelDy = t5 + t6;
        } else {
          buttonId = t4.get$button(mouseEvent);
          t4 = this._frameCounter;
          this._mouse.digitalButtonEvent$1(new B.DigitalButtonEvent(t7 === "mousedown", t4, buttonId, time));
        }
      }
      C.JSArray_methods.set$length(t2, 0);
    },
    _processTouchEvents$0: function() {
      var t1, t2, touchEvent;
      for (t1 = this._touchEvents, t2 = new J.ArrayIterator(t1, t1.length, 0, null); t2.moveNext$0();) {
        touchEvent = t2.__interceptors$_current;
        switch (J.get$type$x(touchEvent)) {
          case 3:
            this._touchSet._start$1(touchEvent.get$event());
            break;
          case 2:
            this._touchSet._end$1(touchEvent.get$event());
            break;
          case 1:
            this._touchSet._move$1(touchEvent.get$event());
            break;
          default:
            throw H.wrapException(P.StateError$("Invalid _GameLoopTouchEven type."));
        }
      }
      C.JSArray_methods.set$length(t1, 0);
    },
    _requestAnimationFrame$1: [function(_, _0) {
      var t1, t2;
      if (this._previousFrameTime == null) {
        t1 = Date.now() / 1000;
        this._frameTime = t1;
        this._previousFrameTime = t1;
        this._processKeyboardEvents$0();
        this._processMouseEvents$0();
        this._processTouchEvents$0();
        t1 = window;
        t2 = this.get$_requestAnimationFrame(this);
        C.Window_methods._ensureRequestAnimationFrame$0(t1);
        this._rafId = C.Window_methods._html$_requestAnimationFrame$1(t1, W._wrapZone(t2));
        return;
      }
      if (this._interrupt) {
        this._rafId = null;
        return;
      }
      t1 = window;
      t2 = this.get$_requestAnimationFrame(this);
      C.Window_methods._ensureRequestAnimationFrame$0(t1);
      this._rafId = C.Window_methods._html$_requestAnimationFrame$1(t1, W._wrapZone(t2));
      this._previousFrameTime = this._frameTime;
      t2 = Date.now() / 1000;
      this._frameTime = t2;
      t1 = this._previousFrameTime;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t1 = this._accumulatedTime += t2 - t1;
      t2 = this.GameLoopHtml_maxAccumulatedTime;
      if (t1 > t2) {
        this._accumulatedTime = t2;
        t1 = t2;
      }
      for (t2 = this.updateTimeStep; t1 >= t2;) {
        ++this._frameCounter;
        this._processKeyboardEvents$0();
        this._processMouseEvents$0();
        this._processTouchEvents$0();
        this.processTimers$0();
        this._gameTime += t2;
        if (this.onUpdate != null)
          this.onUpdate$1(this);
        t1 = this._accumulatedTime -= t2;
      }
      if (this._resizePending && this.onResize != null && this._nextResize <= this._frameTime) {
        this.onResize$1(0, this);
        this._nextResize = this._frameTime + this.resizeLimit;
        this._resizePending = false;
      }
      if (this.onRender != null) {
        this._renderInterpolationFactor = this._accumulatedTime / t2;
        this.onRender$1(this);
      }
    }, "call$1", "get$_requestAnimationFrame", 2, 0, 20],
    _fullscreenChange$1: [function(_) {
      if (this.onFullscreenChange == null)
        return;
      this.onFullscreenChange$1(0, this);
    }, "call$1", "get$_fullscreenChange", 2, 0, 21],
    _fullscreenError$1: [function(_) {
      if (this.onFullscreenChange == null)
        return;
      this.onFullscreenChange$1(0, this);
    }, "call$1", "get$_fullscreenError", 2, 0, 21],
    _touchStartEvent$1: [function($event) {
      this._touchEvents.push(new G._GameLoopTouchEvent($event, 3));
      J.preventDefault$0$x($event);
    }, "call$1", "get$_touchStartEvent", 2, 0, 22],
    _touchMoveEvent$1: [function($event) {
      this._touchEvents.push(new G._GameLoopTouchEvent($event, 1));
      J.preventDefault$0$x($event);
    }, "call$1", "get$_touchMoveEvent", 2, 0, 22],
    _touchEndEvent$1: [function($event) {
      this._touchEvents.push(new G._GameLoopTouchEvent($event, 2));
      J.preventDefault$0$x($event);
    }, "call$1", "get$_touchEndEvent", 2, 0, 22],
    _keyDown$1: [function($event) {
      if (this.onKeyDown != null)
        this.onKeyDown$1(0, $event);
      this._keyboardEvents.push($event);
    }, "call$1", "get$_keyDown", 2, 0, 23],
    _keyUp$1: [function($event) {
      this._keyboardEvents.push($event);
    }, "call$1", "get$_keyUp", 2, 0, 23],
    _mouseDown$1: [function($event) {
      this._mouseEvents.push($event);
    }, "call$1", "get$_mouseDown", 2, 0, 24],
    _mouseUp$1: [function($event) {
      this._mouseEvents.push($event);
    }, "call$1", "get$_mouseUp", 2, 0, 24],
    _mouseMove$1: [function($event) {
      this._mouseEvents.push($event);
    }, "call$1", "get$_mouseMove", 2, 0, 24],
    _mouseWheel$1: [function($event) {
      this._mouseEvents.push($event);
      J.preventDefault$0$x($event);
    }, "call$1", "get$_mouseWheel", 2, 0, 24],
    _resize$1: [function(_) {
      if (!this._resizePending)
        this._resizePending = true;
    }, "call$1", "get$_resize", 2, 0, 21],
    start$0: function(_) {
      var t1, t2, t3;
      if (!this._initialized) {
        t1 = C.EventStreamProvider_webkitfullscreenerror.forTarget$1(document);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(this.get$_fullscreenError()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
        t1 = C.EventStreamProvider_webkitfullscreenchange.forTarget$1(document);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(this.get$_fullscreenChange()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
        t1 = this.element;
        t1.toString;
        t2 = C.EventStreamProvider_touchstart.forElement$1(t1);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(this.get$_touchStartEvent()), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
        t2 = C.EventStreamProvider_touchend.forElement$1(t1);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(this.get$_touchEndEvent()), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
        t2 = C.EventStreamProvider_touchcancel.forElement$1(t1);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(this.get$_touchEndEvent()), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
        t2 = C.EventStreamProvider_touchmove.forElement$1(t1);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(this.get$_touchMoveEvent()), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
        t2 = C.EventStreamProvider_keydown.forTarget$1(window);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(this.get$_keyDown()), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
        t2 = C.EventStreamProvider_keyup.forTarget$1(window);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(this.get$_keyUp()), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
        t2 = C.EventStreamProvider_resize.forTarget$1(window);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(this.get$_resize()), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
        t2 = J.getInterceptor$x(t1);
        t3 = t2.get$onMouseMove(t1);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t3._target, t3._eventType, W._wrapZone(this.get$_mouseMove()), t3._useCapture), [H.getTypeArgumentByIndex(t3, 0)])._tryResume$0();
        t3 = t2.get$onMouseDown(t1);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t3._target, t3._eventType, W._wrapZone(this.get$_mouseDown()), t3._useCapture), [H.getTypeArgumentByIndex(t3, 0)])._tryResume$0();
        t3 = t2.get$onMouseUp(t1);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t3._target, t3._eventType, W._wrapZone(this.get$_mouseUp()), t3._useCapture), [H.getTypeArgumentByIndex(t3, 0)])._tryResume$0();
        t1 = t2.get$onMouseWheel(t1);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(this.get$_mouseWheel()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
        this._initialized = true;
      }
      this._interrupt = false;
      t1 = window;
      t2 = this.get$_requestAnimationFrame(this);
      C.Window_methods._ensureRequestAnimationFrame$0(t1);
      this._rafId = C.Window_methods._html$_requestAnimationFrame$1(t1, W._wrapZone(t2));
    },
    stop$0: function(_) {
      var t1, t2;
      t1 = this._rafId;
      if (t1 != null) {
        t2 = window;
        C.Window_methods._ensureRequestAnimationFrame$0(t2);
        t2.cancelAnimationFrame(t1);
        this._rafId = null;
      }
      this._interrupt = true;
    },
    GameLoopHtml$1: function(element) {
      var t1, t2;
      t1 = $.get$Keyboard__buttonIds();
      t2 = new G.Keyboard(this, P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, B.DigitalButton), null);
      t2.DigitalInput$2(this, t1);
      this._keyboard = t2;
      t2 = $.get$Mouse__buttonIds();
      t1 = new G.Mouse(0, 0, 0, 0, 0, 0, 0, 0, false, 0, 0, this, P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, B.DigitalButton), null);
      t1.DigitalInput$2(this, t2);
      this._mouse = t1;
      this._gamepad0 = new G.GameLoopGamepad(this, null, null);
      t1 = new G.PointerLock(this, true);
      t1.PointerLock$1(this);
      this._pointerLock = t1;
      this._touchSet = new G.GameLoopTouchSet(P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, G.GameLoopTouch), this);
    },
    onRender$1: function(arg0) {
      return this.onRender.call$1(arg0);
    },
    onResize$1: function($receiver, arg0) {
      return this.onResize.call$1(arg0);
    },
    onFullscreenChange$1: function($receiver, arg0) {
      return this.onFullscreenChange.call$1(arg0);
    },
    onPointerLockChange$1: function($receiver, arg0) {
      return this.onPointerLockChange.call$1(arg0);
    },
    onTouchStart$2: function($receiver, arg0, arg1) {
      return this.onTouchStart.call$2(arg0, arg1);
    },
    onTouchEnd$2: function($receiver, arg0, arg1) {
      return this.onTouchEnd.call$2(arg0, arg1);
    },
    onKeyDown$1: function($receiver, arg0) {
      return this.onKeyDown.call$1(arg0);
    }
  },
  GameLoopHtmlState: {
    "^": "GameLoopState;"
  },
  Keyboard: {
    "^": "DigitalInput;gameLoop,buttons,interceptor"
  },
  Mouse: {
    "^": "DigitalInput;_dx,_dy,_x,_y,_clampX,_clampY,_wheelDx,_wheelDy,_withinCanvas,_time,_frame,gameLoop,buttons,interceptor",
    get$x: function(_) {
      return this._x;
    },
    get$y: function(_) {
      return this._y;
    },
    get$time: function() {
      return this._time;
    }
  },
  PointerLock: {
    "^": "Object;gameLoop,lockOnClick",
    _onClick$1: [function($event) {
      if (this.lockOnClick)
        this.gameLoop.element.requestPointerLock();
    }, "call$1", "get$_onClick", 2, 0, 21],
    _onPointerLockChange$1: [function($event) {
      var t1 = this.gameLoop;
      if (t1.onPointerLockChange != null)
        t1.onPointerLockChange$1(0, t1);
    }, "call$1", "get$_onPointerLockChange", 2, 0, 21],
    PointerLock$1: function(gameLoop) {
      var t1 = J.get$onClick$x(this.gameLoop.element);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(this.get$_onClick()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = C.EventStreamProvider_pointerlockchange.forTarget$1(document);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(this.get$_onPointerLockChange()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    }
  },
  _GameLoopTouchEvent: {
    "^": "Object;event<,type>"
  },
  GameLoopTouchPosition: {
    "^": "Object;x>,y>,dx,dy,time<,frame"
  },
  GameLoopTouch: {
    "^": "Object;id,positions<"
  },
  GameLoopTouchSet: {
    "^": "Object;activeTouches,gameLoop",
    _addPosition$2: function(glTouch, touch) {
      var t1, t2, t3, t4;
      t1 = H.setRuntimeTypeInfo(new P.Point(C.JSNumber_methods.round$0(touch.pageX), C.JSNumber_methods.round$0(touch.pageY)), [null]);
      t2 = H.setRuntimeTypeInfo(new P.Point(C.JSNumber_methods.round$0(touch.pageX), C.JSNumber_methods.round$0(touch.pageY)), [null]);
      t3 = this.gameLoop;
      t4 = t3._gameTime;
      t3 = t3._frameCounter;
      glTouch.get$positions().push(new G.GameLoopTouchPosition(t1.x, t2.y, 0, 0, t4, t3));
    },
    _start$1: function($event) {
      J.forEach$1$ax(J.get$changedTouches$x($event), new G.GameLoopTouchSet__start_closure(this));
      this._verifyTouchList$1($event.touches);
    },
    _end$1: function($event) {
      J.forEach$1$ax(J.get$changedTouches$x($event), new G.GameLoopTouchSet__end_closure(this));
      this._verifyTouchList$1($event.touches);
    },
    _move$1: function($event) {
      J.forEach$1$ax(J.get$changedTouches$x($event), new G.GameLoopTouchSet__move_closure(this));
      this._verifyTouchList$1($event.touches);
    },
    _inTouchList$2: function(touches, identifier) {
      var t1, i, t2;
      for (t1 = touches.length, i = 0; i < t1; ++i) {
        t2 = touches[i].identifier;
        if (t2 == null ? identifier == null : t2 === identifier)
          return true;
      }
      return false;
    },
    _verifyTouchList$1: function(touches) {
      var t1, t2;
      t1 = touches.length;
      t2 = this.activeTouches;
      if (t1 !== t2.__js_helper$_length)
        P.print("" + t1 + " " + t2.__js_helper$_length);
      t2.forEach$1(0, new G.GameLoopTouchSet__verifyTouchList_closure(this, touches));
    }
  },
  GameLoopTouchSet__start_closure: {
    "^": "Closure:25;this_0",
    call$1: function(touch) {
      var glTouch, t1, t2;
      glTouch = new G.GameLoopTouch(J.get$identifier$x(touch), H.setRuntimeTypeInfo([], [G.GameLoopTouchPosition]));
      t1 = this.this_0;
      t2 = t1.activeTouches;
      if (t2.$index(0, touch.identifier) != null)
        return;
      t2.$indexSet(0, touch.identifier, glTouch);
      t1._addPosition$2(glTouch, touch);
      t1 = t1.gameLoop;
      if (t1.onTouchStart != null)
        t1.onTouchStart$2(0, t1, glTouch);
    }
  },
  GameLoopTouchSet__end_closure: {
    "^": "Closure:25;this_0",
    call$1: function(touch) {
      var t1, t2, glTouch;
      t1 = this.this_0;
      t2 = t1.activeTouches;
      glTouch = t2.$index(0, J.get$identifier$x(touch));
      if (glTouch == null)
        return;
      t2.remove$1(0, touch.identifier);
      t1._addPosition$2(glTouch, touch);
      t1 = t1.gameLoop;
      if (t1.onTouchEnd != null)
        t1.onTouchEnd$2(0, t1, glTouch);
    }
  },
  GameLoopTouchSet__move_closure: {
    "^": "Closure:25;this_0",
    call$1: function(touch) {
      var t1 = this.this_0;
      t1._addPosition$2(t1.activeTouches.$index(0, J.get$identifier$x(touch)), touch);
    }
  },
  GameLoopTouchSet__verifyTouchList_closure: {
    "^": "Closure:3;this_0,touches_1",
    call$2: function(identifier, touch) {
      if (!this.this_0._inTouchList$2(this.touches_1, identifier))
        P.print("Did not find " + H.S(identifier));
    }
  },
  SimpleHtmlState: {
    "^": "GameLoopHtmlState;",
    onFullScreenChange$1: [function(gameLoop) {
    }, "call$1", "get$onFullScreenChange", 2, 0, 26],
    onPointerLockChange$1: [function(_, gameLoop) {
    }, "call$1", "get$onPointerLockChange", 2, 0, 26],
    onResize$1: [function(_, gameLoop) {
    }, "call$1", "get$onResize", 2, 0, 26],
    onTouchEnd$2: [function(_, gameLoop, touch) {
    }, "call$2", "get$onTouchEnd", 4, 0, 27],
    onTouchStart$2: [function(_, gameLoop, touch) {
    }, "call$2", "get$onTouchStart", 4, 0, 27]
  }
}],
["game_state", "game_state.dart", , N, {
  "^": "",
  GameState: {
    "^": "SimpleHtmlState;renderer_,lights_controller_,drawable_factory_,areas_,visible_areas_,updated_areas_",
    loadArea$4: function($name, level_path, behaviour_path, loader) {
      var ret, toAdd;
      ret = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null])), [null]);
      toAdd = new V.GameArea(H.setRuntimeTypeInfo([], [Q.Drawable]), H.setRuntimeTypeInfo([], [D.Behaviour]), H.setRuntimeTypeInfo([], [Q.Drawable]), H.setRuntimeTypeInfo([], [D.Behaviour]), H.setRuntimeTypeInfo([], [Q.Drawable]), H.setRuntimeTypeInfo([], [D.Behaviour]), P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, B.Path), null, false, null);
      toAdd.LoadGameArea$4(level_path, behaviour_path, loader, this).then$1(new N.GameState_loadArea_closure(this, $name, ret, toAdd));
      this.areas_.$indexSet(0, $name, toAdd);
      return ret.future;
    },
    setVisible$2: function(areaName, visible) {
      var area, t1, already_visible, t2;
      area = this.areas_.$index(0, areaName);
      t1 = this.visible_areas_;
      already_visible = C.JSArray_methods.contains$1(t1, area);
      if (!(already_visible && !visible))
        t2 = !already_visible && visible;
      else
        t2 = true;
      if (t2) {
        C.JSArray_methods.remove$1(t1, area);
        if (visible)
          if (!C.JSArray_methods.contains$1(t1, area))
            t1.push(area);
      }
    },
    onRender$1: [function(gameLoop) {
      var list, t1;
      list = H.setRuntimeTypeInfo([], [[P.List, Q.Drawable]]);
      for (t1 = this.visible_areas_, t1 = new J.ArrayIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        list.push(t1.__interceptors$_current.get$drawables_());
      this.renderer_.render$1(list);
    }, "call$1", "get$onRender", 2, 0, 26],
    onUpdate$1: [function(gameLoop) {
      this.areas_.forEach$1(0, new N.GameState_onUpdate_closure());
    }, "call$1", "get$onUpdate", 2, 0, 26],
    onKeyDown$1: [function(_, $event) {
    }, "call$1", "get$onKeyDown", 2, 0, 23],
    getPointClicked$0: function() {
      var list, t1;
      list = H.setRuntimeTypeInfo([], [[P.List, Q.Drawable]]);
      for (t1 = this.visible_areas_, t1 = new J.ArrayIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        list.push(t1.__interceptors$_current.get$drawables_());
      t1 = this.renderer_;
      return t1.renderPicking$2(list, t1.mouse_pos_);
    },
    GameState$2: function(renderer_, drawable_factory_) {
      var lighting_property, t1, t2, t3;
      lighting_property = this.renderer_.light_shader_.getShaderProperty$1($.LightingShaderProperty_propName);
      this.lights_controller_ = lighting_property;
      t1 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t1.setValues$3(0.7, 0.7, 0.7);
      lighting_property.SetAmbientLight$1(new X.BaseLight(t1));
      t1 = this.lights_controller_;
      t2 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t2.setValues$3(0.5, -0.3, 1);
      t3 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t3.setValues$3(0.3, 0.3, 0.3);
      t1.SetDirectionalLight$1(new X.DirectionalLight(t2, t3));
    }
  },
  GameState_loadArea_closure: {
    "^": "Closure:0;this_0,name_1,ret_2,toAdd_3",
    call$1: function(ok) {
      this.this_0.areas_.$indexSet(0, this.name_1, this.toAdd_3);
      this.ret_2.complete$1(0, ok);
    }
  },
  GameState_onUpdate_closure: {
    "^": "Closure:3;",
    call$2: function(k, area) {
      area.updateBehaviour$0();
    }
  }
}],
["grass_behaviour", "behaviour/grass_behaviour.dart", , K, {
  "^": "",
  GrassBehaviour: {
    "^": "SpriteBehaviour;eaten_,cur_state_,anim_drawable_,z_accel_,height_,on_ground_,position_,area_,rotation_,offset_,drawable_",
    init$1: function(element) {
      this.super$SpriteBehaviour$init$1(element);
      this.super$SpriteBehaviour$update$0();
    },
    hit$1: function(behaviour) {
      var t1, t2, t3;
      if (!!behaviour.$isSheepBehaviour) {
        this.eaten_ = true;
        t1 = this.drawable_;
        t2 = t1.position_;
        t3 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t3.setValues$3(0, 0, -0.5);
        t1.position_ = t2.$add(0, t3);
      }
    },
    update$0: function() {
    }
  }
}],
["html_common", "dart:html_common", , P, {
  "^": "",
  Device_isOpera: function() {
    var t1 = $.Device__isOpera;
    if (t1 == null) {
      t1 = J.contains$2$asx(window.navigator.userAgent, "Opera", 0);
      $.Device__isOpera = t1;
    }
    return t1;
  },
  Device_cssPrefix: function() {
    var prefix, t1;
    prefix = $.Device__cachedCssPrefix;
    if (prefix != null)
      return prefix;
    t1 = $.Device__isFirefox;
    if (t1 == null) {
      t1 = J.contains$2$asx(window.navigator.userAgent, "Firefox", 0);
      $.Device__isFirefox = t1;
    }
    if (t1 === true)
      prefix = "-moz-";
    else {
      t1 = $.Device__isIE;
      if (t1 == null) {
        t1 = P.Device_isOpera() !== true && J.contains$2$asx(window.navigator.userAgent, "Trident/", 0);
        $.Device__isIE = t1;
      }
      if (t1 === true)
        prefix = "-ms-";
      else
        prefix = P.Device_isOpera() === true ? "-o-" : "-webkit-";
    }
    $.Device__cachedCssPrefix = prefix;
    return prefix;
  },
  CssClassSetImpl: {
    "^": "Object;",
    toString$0: function(_) {
      return this.readClasses$0().join$1(0, " ");
    },
    get$iterator: function(_) {
      var t1, t2;
      t1 = this.readClasses$0();
      t2 = new P.LinkedHashSetIterator(t1, t1._modifications, null, null);
      t2._cell = t1._first;
      return t2;
    },
    forEach$1: function(_, f) {
      this.readClasses$0().forEach$1(0, f);
    },
    map$1: function(_, f) {
      var t1 = this.readClasses$0();
      return H.setRuntimeTypeInfo(new H.EfficientLengthMappedIterable(t1, f), [H.getTypeArgumentByIndex(t1, 0), null]);
    },
    get$length: function(_) {
      return this.readClasses$0()._collection$_length;
    },
    contains$1: function(_, value) {
      return this.readClasses$0().contains$1(0, value);
    },
    lookup$1: function(value) {
      return this.readClasses$0().contains$1(0, value) ? value : null;
    },
    add$1: function(_, value) {
      return this.modify$1(new P.CssClassSetImpl_add_closure(value));
    },
    remove$1: function(_, value) {
      var s, result;
      s = this.readClasses$0();
      result = s.remove$1(0, value);
      this.writeClasses$1(s);
      return result;
    },
    get$first: function(_) {
      var t1 = this.readClasses$0();
      return t1.get$first(t1);
    },
    modify$1: function(f) {
      var s, ret;
      s = this.readClasses$0();
      ret = f.call$1(s);
      this.writeClasses$1(s);
      return ret;
    },
    $isEfficientLength: 1
  },
  CssClassSetImpl_add_closure: {
    "^": "Closure:1;value_0",
    call$1: function(s) {
      return s.add$1(0, this.value_0);
    }
  }
}],
["input", "input.dart", , K, {
  "^": "",
  KeyboardInput: {
    "^": "Object;keyboard_,mouse_",
    isDown$1: function(key) {
      var ret;
      if (key === 0)
        ret = this.keyboard_.isDown$1(32);
      else if (key === 1)
        ret = this.keyboard_.isDown$1(67);
      else
        ret = key === 2 ? this.mouse_.isDown$1(0) : null;
      return ret;
    }
  },
  TouchInput: {
    "^": "Object;canvas_,analog_control_base_,analog_control_,touch_movement_begin_,touch_movement_diff_,touch_movement_id_",
    StartHandler$1: [function($event) {
      var t1, t2, t3;
      t1 = J.getInterceptor$x($event);
      t1.preventDefault$0($event);
      if (this.touch_movement_id_ === -1) {
        t2 = this.analog_control_base_;
        J.set$visibility$x(t2.style, "visible");
        t3 = t2.style;
        t1 = J.get$first$ax(t1.get$changedTouches($event));
        t1 = H.setRuntimeTypeInfo(new P.Point(C.JSNumber_methods.round$0(t1.pageX), C.JSNumber_methods.round$0(t1.pageY)), [null]).x;
        if (typeof t1 !== "number")
          return t1.$sub();
        J.set$left$x(t3, C.JSNumber_methods.toString$0(t1 - 25) + "px");
        t2 = t2.style;
        t1 = J.get$first$ax($event.changedTouches);
        t1 = H.setRuntimeTypeInfo(new P.Point(C.JSNumber_methods.round$0(t1.pageX), C.JSNumber_methods.round$0(t1.pageY)), [null]).y;
        if (typeof t1 !== "number")
          return t1.$sub();
        J.set$top$x(t2, C.JSNumber_methods.toString$0(t1 - 25) + "px");
        t1 = J.get$first$ax($event.changedTouches);
        t1 = H.setRuntimeTypeInfo(new P.Point(C.JSNumber_methods.round$0(t1.pageX), C.JSNumber_methods.round$0(t1.pageY)), [null]).x;
        if (typeof t1 !== "number")
          return t1.$mul();
        t2 = J.get$first$ax($event.changedTouches);
        t2 = H.setRuntimeTypeInfo(new P.Point(C.JSNumber_methods.round$0(t2.pageX), C.JSNumber_methods.round$0(t2.pageY)), [null]).y;
        if (typeof t2 !== "number")
          return t2.$mul();
        t3 = new Float32Array(H._checkLength(2));
        t3[0] = t1 * 0.1;
        t3[1] = t2 * 0.1;
        this.touch_movement_begin_ = new T.Vector2(t3);
        this.touch_movement_diff_ = new T.Vector2(new Float32Array(H._checkLength(2)));
        this.touch_movement_id_ = J.get$first$ax($event.changedTouches).identifier;
      }
    }, "call$1", "get$StartHandler", 2, 0, 22],
    MoveHandler$1: [function($event) {
      var t1, t, t2, t3, t4, t5, t6;
      t1 = J.getInterceptor$x($event);
      t1.preventDefault$0($event);
      for (t1 = J.get$iterator$ax(t1.get$changedTouches($event)); t1.moveNext$0();) {
        t = t1._current;
        t2 = J.get$identifier$x(t);
        t3 = this.touch_movement_id_;
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = C.JSNumber_methods.round$0(t.pageX);
          t3 = C.JSNumber_methods.round$0(t.pageY);
          new P.Point(t2, t3).$builtinTypeInfo = [null];
          t3 = C.JSNumber_methods.round$0(t.pageX);
          t4 = C.JSNumber_methods.round$0(t.pageY);
          new P.Point(t3, t4).$builtinTypeInfo = [null];
          t3 = new Float32Array(2);
          t3[0] = t2 * 0.1;
          t3[1] = t4 * 0.1;
          t4 = t3[0];
          t2 = this.touch_movement_begin_.storage;
          t5 = t2[0];
          t3 = t3[1];
          t2 = t2[1];
          t6 = new Float32Array(2);
          t6[0] = t4 - t5;
          t6[1] = t3 - t2;
          this.touch_movement_diff_ = new T.Vector2(t6);
          J.set$left$x(this.analog_control_.style, C.JSInt_methods.toString$0(C.JSNumber_methods.toInt$0(Math.floor(t6[0])) + 17) + "px");
          J.set$top$x(this.analog_control_.style, C.JSInt_methods.toString$0(C.JSNumber_methods.toInt$0(Math.floor(this.touch_movement_diff_.storage[1])) + 17) + "px");
        }
      }
    }, "call$1", "get$MoveHandler", 2, 0, 22],
    EndHandler$1: [function($event) {
      var t1, t2, t3, t4;
      t1 = J.getInterceptor$x($event);
      t1.preventDefault$0($event);
      for (t1 = J.get$iterator$ax(t1.get$changedTouches($event)), t2 = this.analog_control_base_; t1.moveNext$0();) {
        t3 = J.get$identifier$x(t1._current);
        t4 = this.touch_movement_id_;
        if (t3 == null ? t4 == null : t3 === t4) {
          J.set$visibility$x(t2.style, "hidden");
          this.touch_movement_begin_ = new T.Vector2(new Float32Array(2));
          this.touch_movement_diff_ = new T.Vector2(new Float32Array(2));
          this.touch_movement_id_ = -1;
        }
      }
    }, "call$1", "get$EndHandler", 2, 0, 22],
    TouchInput$2: function(canvas_, analog_control_base_) {
      var t1;
      this.analog_control_ = this.analog_control_base_.querySelector("#analog_control");
      t1 = this.canvas_;
      t1.toString;
      t1 = C.EventStreamProvider_touchstart.forElement$1(t1);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(this.get$StartHandler()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = this.canvas_;
      t1.toString;
      t1 = C.EventStreamProvider_touchmove.forElement$1(t1);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(this.get$MoveHandler()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = this.canvas_;
      t1.toString;
      t1 = C.EventStreamProvider_touchend.forElement$1(t1);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(this.get$EndHandler()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    },
    static: {TouchInput$: function(canvas_, analog_control_base_) {
        var t1 = new K.TouchInput(canvas_, analog_control_base_, null, new T.Vector2(new Float32Array(H._checkLength(2))), new T.Vector2(new Float32Array(H._checkLength(2))), -1);
        t1.TouchInput$2(canvas_, analog_control_base_);
        return t1;
      }}
  },
  CombinedInput: {
    "^": "Object;touch_input_,key_input_",
    getAxis$1: function(axis) {
      var t1, t2, ret;
      t1 = this.touch_input_;
      t2 = axis === 0;
      if (t2)
        ret = t1.touch_movement_diff_.storage[1];
      else
        ret = axis === 1 ? t1.touch_movement_diff_.storage[0] : null;
      if (ret === 0) {
        t1 = this.key_input_;
        if (axis === 1) {
          t1 = t1.keyboard_;
          if (t1.isDown$1(38))
            ret = 1;
          else
            ret = t1.isDown$1(40) ? -1 : 0;
          if (t1.isDown$1(37) || t1.isDown$1(39))
            ret *= 0.55;
        } else if (t2) {
          t1 = t1.keyboard_;
          if (t1.isDown$1(39))
            ret = 1;
          else
            ret = t1.isDown$1(37) ? -1 : 0;
          if (t1.isDown$1(38) || t1.isDown$1(40))
            ret *= 0.4;
        } else
          ret = 0;
      }
      return ret;
    }
  }
}],
["level_data", "level_data.dart", , K, {
  "^": "",
  PortalDescription: {
    "^": "Object;map_name_<,points_,map_hide_<,map_show_"
  },
  ModelDescription: {
    "^": "Object;path_<,rotation_,height_"
  },
  ModelInstance: {
    "^": "Object;description_<,position_<"
  },
  BehaviourDescription: {
    "^": "Object;position_<,model_path_<,behaviour_type_,name_,properties_"
  },
  LevelData: {
    "^": "Object;terrain_list_,models_,model_descriptions_,paths_,heights_,offset_<,behaviour_descriptions_,portals_,requested_models_,models_geometry_",
    AddToGameState$3: function(area, state, loader) {
      var completer, t1, behaviour_t, t2, height, terrain_geom, buffers, t3, t4, t5, t6, ret, portal, toAdd, pos, importer, path;
      area.offset_ = this.offset_;
      completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null])), [null]);
      t1 = this.offset_;
      behaviour_t = new V.TerrainBehaviour(this.heights_, P.LinkedHashMap_LinkedHashMap(null, null, null, T.Vector2, E.Tile3dBehaviour), H.setRuntimeTypeInfo([], [T.Vector3]), t1, H.setRuntimeTypeInfo([], [D.Portal]), null);
      area.terrain_ = behaviour_t;
      for (t1 = this.terrain_list_, t1 = new J.ArrayIterator(t1, t1.length, 0, null), t2 = loader.drawable_factory_, height = 0; t1.moveNext$0();) {
        terrain_geom = t1.__interceptors$_current.calculateBaseGeometry$1(height);
        height += 0.005;
        buffers = new Q.BaseDrawableBuffers(null, null, null, null, null, null, null);
        t2.initGeometry$2(terrain_geom, buffers);
        t2.initTexture$2(terrain_geom, buffers);
        if (terrain_geom.colors_ != null) {
          t3 = J.createBuffer$0$x(t2.renderer_.gl_);
          buffers.color_buffer_ = t3;
          J.bindBuffer$2$x(t2.renderer_.gl_, 34962, t3);
          J.bufferDataTyped$3$x(t2.renderer_.gl_, 34962, new Float32Array(H._ensureNativeList(terrain_geom.colors_)), 35044);
        }
        t3 = [];
        t3.$builtinTypeInfo = [Q.BaseDrawableBuffers];
        t4 = new Float32Array(3);
        t4[0] = 0;
        t4[1] = 0;
        t4[2] = 0;
        t5 = new Float32Array(4);
        t5[0] = 0;
        t5[1] = 0;
        t5[2] = 0;
        t5[3] = 1;
        t6 = new Float32Array(3);
        t6[0] = 1;
        t6[1] = 1;
        t6[2] = 1;
        ret = new Q.BaseDrawable(t3, null, new T.Vector3(t4), new T.Quaternion(t5), 1, new T.Vector3(t6), null, null, false);
        t3.push(buffers);
        ret.current_buffer_ = buffers;
        t3 = t2.renderer_;
        ret.shader_ = t3.light_shader_;
        ret.pick_shader_ = t3.color_shader_;
        area.addElement$2(ret, behaviour_t);
        t3 = new Float32Array(4);
        t3[3] = 1;
        ret.rotation_ = ret.rotation_.$mul(0, new T.Quaternion(t3));
        ret.position_ = this.offset_;
      }
      area.paths_.addAll$1(0, this.paths_);
      for (t1 = this.portals_, t1 = new J.ArrayIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        portal = t1.__interceptors$_current;
        toAdd = new D.Portal(portal.get$map_name_(), null, null, state);
        toAdd.areas_hide_ = portal.get$map_hide_();
        toAdd.areas_show_ = portal.map_show_;
        for (t2 = portal.points_, t2 = new J.ArrayIterator(t2, t2.length, 0, null); t2.moveNext$0();) {
          pos = t2.__interceptors$_current;
          t3 = J.getInterceptor$x(pos);
          t4 = t3.get$x(pos);
          t5 = this.offset_.storage[0];
          if (typeof t4 !== "number")
            return t4.$add();
          t3.set$x(pos, t4 + t5);
          t5 = t3.get$y(pos);
          t4 = this.offset_.storage[1];
          if (typeof t5 !== "number")
            return t5.$add();
          t3.set$y(pos, t5 + t4);
        }
        behaviour_t.addPortal$2(toAdd, portal.points_);
      }
      importer = new M.ModelImporter();
      for (t1 = this.model_descriptions_, t1 = new J.ArrayIterator(t1, t1.length, 0, null), t2 = this.requested_models_, t3 = this.models_geometry_; t1.moveNext$0();)
        for (t4 = J.split$1$s(t1.__interceptors$_current.get$path_(), ";"), t4 = new J.ArrayIterator(t4, t4.length, 0, null); t4.moveNext$0();) {
          path = t4.__interceptors$_current;
          if (!t3.containsKey$1(path) && !C.JSArray_methods.contains$1(t2, path)) {
            t2.push(path);
            importer.RequestFile$1(path).then$1(new K.LevelData_AddToGameState_closure(this, area, loader, completer, behaviour_t, path));
          } else if (t2.length === 0)
            this.processFinished$4(area, completer, loader, behaviour_t);
        }
      return completer.future;
    },
    checkFinished$6: function(area, model, path, completer, loader, behaviour_t) {
      if (path != null) {
        C.JSArray_methods.remove$1(this.requested_models_, path);
        this.models_geometry_.$indexSet(0, path, J.$index$asx(model, 0));
      }
      if (this.requested_models_.length === 0)
        this.processFinished$4(area, completer, loader, behaviour_t);
    },
    processFinished$4: function(area, completer, loader, behaviour_t) {
      var t1, t2, t3, info, t4, t5, t6, t7, toAdd, t8, sprite_importer, desc, drawable_spec, paths, i, behaviour_spec, data;
      t1 = this.models_geometry_;
      loader.models_geometry_.addAll$1(0, t1);
      for (t2 = this.models_, t2 = new J.ArrayIterator(t2, t2.length, 0, null), t3 = loader.drawable_factory_; t2.moveNext$0();) {
        info = t2.__interceptors$_current;
        t4 = info.get$position_();
        t4 = t4.get$x(t4);
        t5 = this.offset_.storage[0];
        t6 = info.get$position_();
        t6 = t6.get$y(t6);
        t7 = this.offset_.storage[1];
        toAdd = t3.createTexturedDrawable$1(t1.$index(0, info.get$description_().path_));
        t8 = new Float32Array(2);
        t8[0] = t4 + t5;
        t8[1] = t6 + t7;
        t7 = info.description_.height_;
        new Float32Array(2);
        area.addElement$2(toAdd, new E.Tile3dBehaviour(t7, new T.Vector2(t8), area, null, new T.Vector3(new Float32Array(3)), null));
      }
      sprite_importer = new R.SpriteImporter(loader, this.offset_);
      for (t1 = this.behaviour_descriptions_, t1 = new J.ArrayIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        desc = t1.__interceptors$_current;
        drawable_spec = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
        if (J.contains$1$asx(desc.get$model_path_(), ";") === true) {
          drawable_spec.$indexSet(0, "type", "animation");
          paths = J.split$1$s(desc.model_path_, ";");
          for (i = 0; i < paths.length; ++i) {
            t2 = "path" + i;
            if (i >= paths.length)
              return H.ioore(paths, i);
            drawable_spec.$indexSet(0, t2, paths[i]);
          }
        } else {
          if (J.endsWith$1$s(desc.model_path_, ".model"))
            drawable_spec.$indexSet(0, "type", "model");
          else
            drawable_spec.$indexSet(0, "type", "quad");
          drawable_spec.$indexSet(0, "path", desc.model_path_);
        }
        behaviour_spec = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
        behaviour_spec.$indexSet(0, "name", desc.name_);
        behaviour_spec.$indexSet(0, "type", desc.behaviour_type_);
        behaviour_spec.$indexSet(0, "posx", desc.position_.storage[0] + this.offset_.storage[0]);
        behaviour_spec.$indexSet(0, "posy", desc.position_.storage[1] + this.offset_.storage[1]);
        behaviour_spec.$indexSet(0, "properties", desc.properties_);
        t2 = [];
        t2.$builtinTypeInfo = [S.BaseGeometry];
        data = new R.SpriteData(t2, null, null);
        sprite_importer.processDrawable$2(drawable_spec, data);
        sprite_importer.processBehaviour$2(behaviour_spec, data);
        data.AddToGameState$4(loader, area.terrain_, area, null);
      }
      completer.complete$1(0, behaviour_t);
    }
  },
  LevelData_AddToGameState_closure: {
    "^": "Closure:28;this_0,area_1,loader_2,completer_3,behaviour_t_4,path_5",
    call$1: function(model) {
      return this.this_0.checkFinished$6(this.area_1, model, this.path_5, this.completer_3, this.loader_2, this.behaviour_t_4);
    }
  }
}],
["model_importer", "model_importer.dart", , M, {
  "^": "",
  ModelImporter: {
    "^": "AsyncImporter;",
    processFile$1: function(path) {
      var ret, jsonData, t1, materials, t2, mesh, t3, texture, positions;
      ret = H.setRuntimeTypeInfo([], [S.BaseGeometry]);
      jsonData = C.JsonCodec_null_null.decode$1(path);
      t1 = J.getInterceptor$asx(jsonData);
      materials = t1.$index(jsonData, "materials");
      for (t1 = J.get$iterator$ax(t1.$index(jsonData, "meshes")), t2 = J.getInterceptor$asx(materials); t1.moveNext$0();) {
        mesh = t1.get$current();
        t3 = J.getInterceptor$asx(mesh);
        texture = t2.$index(materials, t3.$index(mesh, "material_index"));
        positions = J.$index$asx(t3.$index(mesh, "vertices"), 0);
        ret.push(new S.TexturedGeometry(J.$index$asx(t3.$index(mesh, "vertices"), 1), texture, positions, null, J.$index$asx(t3.$index(mesh, "vertices"), 2), t3.$index(mesh, "indices")));
      }
      return ret;
    }
  }
}],
["path", "path.dart", , B, {
  "^": "",
  Path: {
    "^": "Object;name,points>"
  }
}],
["path_follower", "behaviour/path_follower.dart", , F, {
  "^": "",
  MapPathFollower: {
    "^": "Object;path_<,cur_path_point_,callback_,vel_,acceptable_distance_",
    callback_$0: function() {
      return this.callback_.call$0();
    }
  }
}],
["pc_behaviour", "behaviour/pc_behaviour.dart", , F, {
  "^": "",
  PCNormalState: {
    "^": "WalkingBehaviourState;moved_,dir_,max_vel_,element_",
    hit$1: function(sprite) {
      var element, t1;
      element = this.element_;
      t1 = element.get$dead_state_();
      element.cur_state_.toString;
      element.cur_state_ = t1;
      t1.begin$0();
    },
    update$0: function() {
      var element, t1, t2, t3, t4, t5, t6, absolute;
      element = this.element_;
      t1 = element.get$input_();
      if (t1.key_input_.isDown$1(2) === true) {
        if (!this.moved_) {
          t1 = element.area_.get$terrain_();
          t2 = element.state_;
          t3 = t2.getPointClicked$0();
          t1 = t1.getSize$0().storage;
          t4 = t1[0];
          t3 = t3.storage;
          t5 = t3[0];
          t1 = t1[1];
          t3 = t3[1];
          t6 = new Float32Array(H._checkLength(2));
          absolute = new T.Vector2(t6);
          t6[0] = t4 * t5;
          t6[1] = t1 * t3;
          t3 = element.area_;
          t2 = t2.drawable_factory_;
          t1 = $.get$quad_vertices();
          t6 = $.get$quad_indices();
          t6 = t2.createTexturedDrawable$1(new S.TexturedGeometry($.get$quad_coords(), "images/grass.png", t1, null, null, t6));
          t1 = element.area_;
          new Float32Array(H._checkLength(2));
          t2 = new K.GrassBehaviour(false, null, null, -0.1, 0, true, absolute, t1, null, new T.Vector3(new Float32Array(H._checkLength(3))), null);
          t2.SpriteBehaviour$2(absolute, t1);
          t3.addElement$2(t6, t2);
          this.moved_ = true;
        }
      } else
        this.moved_ = false;
      t1 = element.input_;
      if (t1.key_input_.isDown$1(1) === true && element.on_ground_)
        element.z_accel_ = 0.15;
      t1 = element.input_;
      if (t1.key_input_.isDown$1(0) === true) {
        t1 = element.calling_state_;
        t1.dir_ = this.dir_;
        element.cur_state_.toString;
        element.cur_state_ = t1;
        t1.begin$0();
      } else if (element.input_.getAxis$1(0) !== 0 || element.input_.getAxis$1(1) !== 0) {
        t1 = element.input_.getAxis$1(0);
        t2 = element.input_.getAxis$1(1);
        t3 = new Float32Array(H._checkLength(2));
        t3[0] = t1;
        t3[1] = t2;
        this.walkDir$1(new T.Vector2(t3));
      } else
        switch (this.dir_) {
          case C.Directions_UP:
            element.anim_drawable_.SetSequence$1("stand_t");
            break;
          case C.Directions_LEFT:
            element.anim_drawable_.SetSequence$1("stand_l");
            break;
          case C.Directions_DOWN:
            element.anim_drawable_.SetSequence$1("stand_b");
            break;
          case C.Directions_RIGHT:
            element.anim_drawable_.SetSequence$1("stand_r");
            break;
        }
      t1 = element.camera_;
      t2 = t1.pos_.storage;
      t3 = element.position_.$negate(0).storage;
      t2[0] = t3[0];
      t2[1] = t3[1];
      t3 = t1.cam_mat_;
      t3.setIdentity$0();
      t4 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t4.setValues$3(-1, 0, 0);
      t3.rotate$2(0, t4, 0.7853981633974483);
      t4 = t2[0];
      t1 = t1.offset_.storage;
      t3.translate$3(0, t4 + t1[0], t2[1] + t1[1], t1[2]);
    }
  },
  PCCallingState: {
    "^": "WalkingBehaviourState;picked_,dir_,max_vel_,element_",
    begin$0: function() {
      this.picked_ = false;
      var this_element = this.element_;
      switch (this.dir_) {
        case C.Directions_UP:
          this_element.anim_drawable_.SetSequence$1("stab_t");
          break;
        case C.Directions_LEFT:
          this_element.anim_drawable_.SetSequence$1("stab_l");
          break;
        case C.Directions_DOWN:
          this_element.anim_drawable_.SetSequence$1("stab_b");
          break;
        case C.Directions_RIGHT:
          this_element.anim_drawable_.SetSequence$1("stab_r");
          break;
      }
    },
    hit$1: function(sprite) {
      var element, t1;
      element = this.element_;
      t1 = element.get$dead_state_();
      element.cur_state_.toString;
      element.cur_state_ = t1;
      t1.begin$0();
    },
    update$0: function() {
      var this_element, t1, behaviour, t2, t3, t4, t5, t6;
      this_element = this.element_;
      if (this.picked_ !== true)
        for (t1 = this_element.area_.get$behaviours_(), t1 = new J.ArrayIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
          behaviour = t1.__interceptors$_current;
          if (behaviour instanceof O.BaseSheepBehaviour) {
            t2 = J.getInterceptor(behaviour.cur_state_);
            if (!t2.$isSheepDeadState)
              if (!t2.$isSheepFollowerState) {
                t2 = behaviour.position_;
                t3 = behaviour.offset_.storage;
                t4 = t3[0];
                t3 = t3[1];
                t5 = new Float32Array(2);
                t5[0] = t4;
                t5[1] = t3;
                t2 = t2.storage;
                t3 = t2[0];
                t4 = t5[0];
                t2 = t2[1];
                t5 = t5[1];
                t6 = new Float32Array(2);
                t6[0] = t3 + t4;
                t6[1] = t2 + t5;
                t5 = this_element.position_.$add(0, this_element.offset_.get$xy());
                t2 = new Float32Array(2);
                t2[1] = t6[1];
                t2[0] = t6[0];
                t5 = new T.Vector2(t2).sub$1(t5).get$length2() < 1;
                t2 = t5;
              } else
                t2 = false;
            else
              t2 = false;
            if (t2) {
              t1 = this.element_;
              t2 = behaviour.cur_state_;
              if (t2 != null)
                t2.hit$1(t1);
              this.picked_ = true;
              break;
            }
          }
        }
      if (this_element.anim_drawable_.current_sequence_ == null) {
        t1 = this_element.get$normal_state_();
        this_element.cur_state_.toString;
        this_element.cur_state_ = t1;
        t1.begin$0();
      }
    }
  },
  PCDeadState: {
    "^": "BehaviourState;element_",
    begin$0: function() {
      this.element_.anim_drawable_.SetSequence$2("die", 1);
    },
    hit$1: function(sprite) {
    },
    update$0: function() {
    }
  },
  PCBehaviour: {
    "^": "SpriteBehaviour;attacking_,attack_pressed,input_<,camera_,dead_,state_,follower_@,normal_state_<,calling_state_,dead_state_<,cur_state_,anim_drawable_,z_accel_,height_,on_ground_,position_,area_,rotation_,offset_,drawable_",
    getFollower$0: function() {
      return this.follower_;
    },
    setFollower$1: function(follower) {
      this.follower_ = follower;
    },
    PCBehaviour$5: function(position, area, input_, camera_, state_) {
      var t1 = new F.PCNormalState(false, C.Directions_UP, 0.05, this);
      this.normal_state_ = t1;
      this.calling_state_ = new F.PCCallingState(null, C.Directions_UP, 0, this);
      this.dead_state_ = new F.PCDeadState(this);
      this.cur_state_ = t1;
    }
  }
}],
["portal", "portal.dart", , D, {
  "^": "",
  Portal: {
    "^": "Object;map_name_<,areas_hide_,areas_show_,state_",
    transport$2: function(terrain, element) {
      var t1, area, t2;
      t1 = this.state_;
      area = t1.areas_.$index(0, this.map_name_);
      if (area != null) {
        element.area_ = area;
        t1.setVisible$2(this.map_name_, true);
      }
      for (t2 = this.areas_hide_, t2 = new J.ArrayIterator(t2, t2.length, 0, null); t2.moveNext$0();)
        t1.setVisible$2(t2.__interceptors$_current, false);
      for (t2 = this.areas_show_, t2 = new J.ArrayIterator(t2, t2.length, 0, null); t2.moveNext$0();)
        t1.setVisible$2(t2.__interceptors$_current, true);
    }
  }
}],
["scene_lights", "scene_lights.dart", , X, {
  "^": "",
  BaseLight: {
    "^": "Object;color_"
  },
  DirectionalLight: {
    "^": "BaseLight;dir_,color_"
  }
}],
["shader_elements", "shader_elements.dart", , T, {
  "^": "",
  Vector3Uniform: {
    "^": "Object;u_location_,gl_,data_,updated_",
    update$0: function() {
      var t1, t2, t3;
      if (!this.updated_) {
        t1 = this.gl_;
        t2 = this.u_location_;
        t3 = this.data_.storage;
        J.uniform3f$4$x(t1, t2, t3[0], t3[1], t3[2]);
        this.updated_ = true;
      }
    },
    Vector3Uniform$4: function(gl_, shader_program, $name, data_) {
      this.u_location_ = J.getUniformLocation$2$x(this.gl_, shader_program, $name);
      if (this.data_ == null)
        this.data_ = new T.Vector3(new Float32Array(H._checkLength(3)));
    },
    static: {Vector3Uniform$: function(gl_, shader_program, $name, data_) {
        var t1 = new T.Vector3Uniform(null, gl_, data_, false);
        t1.Vector3Uniform$4(gl_, shader_program, $name, data_);
        return t1;
      }}
  },
  Vector2Uniform: {
    "^": "Object;u_location_,gl_,data_,updated_",
    update$0: function() {
      var t1, t2, t3;
      if (!this.updated_) {
        this.updated_ = true;
        t1 = this.gl_;
        t2 = this.u_location_;
        t3 = this.data_.storage;
        J.uniform2f$3$x(t1, t2, t3[0], t3[1]);
      }
    },
    Vector2Uniform$4: function(gl_, shader_program, $name, data_) {
      this.u_location_ = J.getUniformLocation$2$x(this.gl_, shader_program, $name);
      if (this.data_ == null)
        this.data_ = new T.Vector2(new Float32Array(H._checkLength(2)));
    },
    static: {Vector2Uniform$: function(gl_, shader_program, $name, data_) {
        var t1 = new T.Vector2Uniform(null, gl_, data_, false);
        t1.Vector2Uniform$4(gl_, shader_program, $name, data_);
        return t1;
      }}
  },
  Matrix3Uniform: {
    "^": "Object;u_location_,gl_,data_,updated_",
    update$0: function() {
      if (!this.updated_) {
        this.updated_ = true;
        J.uniformMatrix3fv$3$x(this.gl_, this.u_location_, false, this.data_);
      }
    },
    Matrix3Uniform$4: function(gl_, shader_program, $name, initial) {
      var t1;
      this.u_location_ = J.getUniformLocation$2$x(this.gl_, shader_program, $name);
      t1 = new T.Matrix3(new Float32Array(H._checkLength(9)));
      t1.setIdentity$0();
      this.updated_ = false;
      t1.copyIntoArray$1(this.data_);
    }
  },
  Matrix4Uniform: {
    "^": "Object;u_location_,gl_,data_,updated_",
    update$0: function() {
      if (!this.updated_) {
        this.updated_ = true;
        this.gl_.uniformMatrix4fv(this.u_location_, false, this.data_);
      }
    },
    Matrix4Uniform$4: function(gl_, shader_program, $name, initial) {
      var t1;
      this.u_location_ = this.gl_.getUniformLocation(shader_program, $name);
      t1 = new T.Matrix4(new Float32Array(H._checkLength(16)));
      t1.setIdentity$0();
      this.updated_ = false;
      t1.copyIntoArray$1(this.data_);
    },
    static: {Matrix4Uniform$: function(gl_, shader_program, $name, initial) {
        var t1 = new T.Matrix4Uniform(null, gl_, new Float32Array(H._checkLength(16)), false);
        t1.Matrix4Uniform$4(gl_, shader_program, $name, initial);
        return t1;
      }}
  }
}],
["sheep_behaviour", "behaviour/sheep_behaviour.dart", , O, {
  "^": "",
  SheepNormalState: {
    "^": "WalkingBehaviourState;element_:SheepNormalState_element_<,rng,wait_time_,random_position_,initial_position_,walk_initial_position_,dir_,max_vel_,element_",
    hit$1: function(sprite) {
      var t1, t2, toFollow;
      if (!!sprite.$isEnemyBehaviour) {
        t1 = this.SheepNormalState_element_;
        t2 = new O.SheepDeadState(t1);
        t1.cur_state_.toString;
        t1.cur_state_ = t2;
        t2.begin$0();
      } else {
        toFollow = !!sprite.$isPCBehaviour ? this.SheepNormalState_element_.checkWillFollow$1(sprite) ? sprite : null : null;
        while (true) {
          t1 = toFollow != null;
          if (!(t1 && toFollow.getFollower$0() != null))
            break;
          toFollow = toFollow.getFollower$0();
        }
        if (t1) {
          toFollow.setFollower$1(this.SheepNormalState_element_);
          t1 = this.SheepNormalState_element_;
          t2 = new Float32Array(H._checkLength(2));
          t2[0] = 0;
          t2[1] = 0;
          t2 = new O.SheepFollowerState(toFollow, new T.Vector2(t2), C.Directions_UP, 0.05, t1);
          t2.element_ = t1;
          t1.cur_state_.toString;
          t1.cur_state_ = t2;
          t2.begin$0();
        }
      }
    },
    update$0: function() {
      var updated, t1, behaviour, t2, t3, t4, t5, t6, dist, closest_grass, min_distance, diff;
      t1 = this.SheepNormalState_element_.area_.get$behaviours_();
      t1 = new J.ArrayIterator(t1, t1.length, 0, null);
      while (true) {
        if (!t1.moveNext$0()) {
          updated = false;
          break;
        }
        behaviour = t1.__interceptors$_current;
        if (behaviour instanceof K.GrassBehaviour && !behaviour.eaten_) {
          t2 = this.SheepNormalState_element_;
          t3 = t2.position_;
          t2 = t2.offset_.storage;
          t4 = t2[0];
          t2 = t2[1];
          t5 = new Float32Array(2);
          t5[0] = t4;
          t5[1] = t2;
          t3 = t3.storage;
          t2 = t3[0];
          t4 = t5[0];
          t3 = t3[1];
          t5 = t5[1];
          t6 = new Float32Array(2);
          t6[0] = t2 + t4;
          t6[1] = t3 + t5;
          t5 = behaviour.get$position_().$add(0, behaviour.get$offset_().get$xy());
          t2 = new Float32Array(2);
          t2[1] = t6[1];
          t2[0] = t6[0];
          dist = new T.Vector2(t2).sub$1(t5).get$length2();
          closest_grass = behaviour;
          min_distance = dist;
        } else {
          min_distance = null;
          closest_grass = null;
        }
        if (closest_grass != null) {
          if (typeof min_distance !== "number")
            return min_distance.$lt();
          if (min_distance < 0.05) {
            closest_grass.hit$1(this.SheepNormalState_element_);
            updated = true;
            break;
          } else if (min_distance < 1) {
            this.walkDir$1(closest_grass.get$position_().$sub(0, this.SheepNormalState_element_.position_).normalize$0());
            updated = true;
            break;
          }
        }
      }
      if (!updated) {
        t1 = this.random_position_;
        if (t1 == null) {
          t1 = this.wait_time_;
          if (t1 === 300) {
            t1 = this.rng;
            t2 = t1.nextDouble$0();
            t3 = t1.nextDouble$0();
            t4 = new Float32Array(H._checkLength(2));
            t5 = new T.Vector2(t4);
            t4[0] = t2 / 2;
            t4[1] = t3 / 2;
            this.random_position_ = t5;
            this.random_position_ = this.initial_position_.$add(0, t5);
            this.walk_initial_position_ = this.SheepNormalState_element_.position_;
            this.wait_time_ = t1.nextInt$1(150);
          } else
            this.wait_time_ = t1 + 1;
        } else {
          t1 = this.SheepNormalState_element_.position_.$sub(0, t1).storage;
          if (Math.abs(t1[0]) < 0.001 && Math.abs(t1[1]) < 0.001)
            this.random_position_ = null;
          else {
            diff = this.random_position_.$sub(0, this.walk_initial_position_).$div(0, 500);
            t1 = this.SheepNormalState_element_;
            t1.move$1(t1.position_.$add(0, diff));
          }
        }
      }
    },
    SheepNormalState$1: function(element) {
      this.SheepNormalState_element_ = element;
      this.initial_position_ = element.position_;
      this.wait_time_ = this.rng.nextInt$1(300);
    },
    static: {SheepNormalState$: function(element) {
        var t1 = new Float32Array(H._checkLength(2));
        t1[0] = 0;
        t1[1] = 0;
        t1 = new O.SheepNormalState(null, C.C__JSRandom, null, null, null, new T.Vector2(t1), C.Directions_UP, 0.01, element);
        t1.SheepNormalState$1(element);
        return t1;
      }}
  },
  SheepFollowerState: {
    "^": "WalkingBehaviourState;follow_,vel_,dir_,max_vel_,element_",
    hit$1: function(sprite) {
      var element, t1, t2;
      if (!!sprite.$isEnemyBehaviour) {
        element = this.element_;
        this.follow_.setFollower$1(null);
        if (element.get$follower_() != null)
          element.get$follower_().stopFollowing$0();
        t1 = this.element_;
        t2 = new O.SheepDeadState(t1);
        t1.cur_state_.toString;
        t1.cur_state_ = t2;
        t2.begin$0();
      }
    },
    update$0: function() {
      var distance, element, t1, slowness, steering, t2;
      distance = this.follow_.squareDistance$1(this.element_);
      if (distance > 0.8)
        if (this.follow_.squareDistance$1(this.element_) > 10) {
          this.follow_.setFollower$1(null);
          element = this.element_;
          if (element.get$follower_() != null)
            element.get$follower_().stopFollowing$0();
          element.set$follower_(null);
          t1 = O.SheepNormalState$(element);
          element.cur_state_.toString;
          element.cur_state_ = t1;
          t1.begin$0();
        } else {
          slowness = (distance - 0.8) / 1.5;
          if (slowness > 1)
            slowness = 1;
          t1 = this.max_vel_;
          steering = this.follow_.position_.$sub(0, this.element_.position_).normalize$0().$mul(0, t1).$mul(0, slowness).$sub(0, this.vel_);
          t2 = this.vel_.$add(0, steering.$mul(0, 0.2));
          this.vel_ = t2;
          if (t2.get$length(t2) > t1)
            this.vel_ = this.vel_.normalize$0().$mul(0, t1);
          t1 = this.element_;
          t1.move$1(t1.position_.$add(0, this.vel_));
        }
    }
  },
  SheepDeadState: {
    "^": "BehaviourState;element_",
    begin$0: function() {
    },
    hit$1: function(sprite) {
    },
    update$0: function() {
    }
  },
  BaseSheepBehaviour: {
    "^": "SpriteBehaviour;follower_@",
    getFollower$0: function() {
      return this.follower_;
    },
    stopFollowing$0: function() {
      if (this.cur_state_ instanceof O.SheepFollowerState) {
        var t1 = O.SheepNormalState$(this);
        this.cur_state_.toString;
        this.cur_state_ = t1;
        t1.begin$0();
        t1 = this.follower_;
        if (t1 != null) {
          t1.stopFollowing$0();
          this.follower_ = null;
        }
      }
    },
    setFollower$1: function(follower) {
      this.follower_ = follower;
    }
  },
  SheepBehaviour: {
    "^": "BaseSheepBehaviour;follower_,cur_state_,anim_drawable_,z_accel_,height_,on_ground_,position_,area_,rotation_,offset_,drawable_",
    checkWillFollow$1: function(pc) {
      return true;
    }
  },
  GoldSheepBehaviour: {
    "^": "BaseSheepBehaviour;follower_,cur_state_,anim_drawable_,z_accel_,height_,on_ground_,position_,area_,rotation_,offset_,drawable_",
    checkWillFollow$1: function(pc) {
      var tmp_follower, num_sheep;
      for (tmp_follower = pc, num_sheep = 0; tmp_follower = tmp_follower.getFollower$0(), tmp_follower != null;)
        ++num_sheep;
      return num_sheep >= 2;
    }
  }
}],
["sign_behaviour", "behaviour/sign_behaviour.dart", , O, {
  "^": "",
  SignBehaviour: {
    "^": "Tile3dBehaviour;text_output_,text_,set_,height_,position_,area_,rotation_,offset_,drawable_",
    update$0: function() {
      var t1, t2, t3, t4, behaviour, t5, t6, t7, t8, t9;
      for (t1 = this.area_.get$behaviours_(), t1 = new J.ArrayIterator(t1, t1.length, 0, null), t2 = this.text_output_, t3 = this.text_, t4 = t2.div_; t1.moveNext$0();) {
        behaviour = t1.__interceptors$_current;
        if (behaviour instanceof F.PCBehaviour)
          if (this.set_) {
            t5 = behaviour.position_;
            t6 = behaviour.offset_.storage;
            t7 = t6[0];
            t6 = t6[1];
            t8 = new Float32Array(2);
            t8[0] = t7;
            t8[1] = t6;
            t5 = t5.storage;
            t6 = t5[0];
            t7 = t8[0];
            t5 = t5[1];
            t8 = t8[1];
            t9 = new Float32Array(2);
            t9[0] = t6 + t7;
            t9[1] = t5 + t8;
            t8 = this.position_.$add(0, this.offset_.get$xy());
            t5 = new Float32Array(2);
            t5[1] = t9[1];
            t5[0] = t9[0];
            if (new T.Vector2(t5).sub$1(t8).get$length2() > 1) {
              J.set$visibility$x(t4.style, "hidden");
              t2.text_div_.textContent = "";
              this.set_ = false;
            }
          } else {
            t5 = behaviour.position_;
            t6 = behaviour.offset_.storage;
            t7 = t6[0];
            t6 = t6[1];
            t8 = new Float32Array(2);
            t8[0] = t7;
            t8[1] = t6;
            t5 = t5.storage;
            t6 = t5[0];
            t7 = t8[0];
            t5 = t5[1];
            t8 = t8[1];
            t9 = new Float32Array(2);
            t9[0] = t6 + t7;
            t9[1] = t5 + t8;
            t8 = this.position_.$add(0, this.offset_.get$xy());
            t5 = new Float32Array(2);
            t5[1] = t9[1];
            t5[0] = t9[0];
            if (new T.Vector2(t5).sub$1(t8).get$length2() < 1) {
              t2.text_div_.textContent = t3;
              J.set$visibility$x(t4.style, "visible");
              this.set_ = true;
            }
          }
      }
    }
  }
}],
["sprite_importer", "sprite_importer.dart", , R, {
  "^": "",
  SpriteData: {
    "^": "Object;geom_,anim_,behaviour_",
    AddToGameState$4: function(loader, terrain, area, state) {
      var t1, drawable, t2, t3, buffers, t4, t5, t6, ret;
      t1 = this.geom_;
      if (t1.length > 1)
        drawable = loader.drawable_factory_.createAnimatedDrawable$1(t1);
      else {
        t2 = loader.drawable_factory_;
        if (this.anim_ != null) {
          t1 = C.JSArray_methods.get$first(t1);
          t3 = this.anim_;
          buffers = new Q.BaseDrawableBuffers(null, null, null, null, null, null, null);
          t2.initGeometry$2(t1, buffers);
          t2.initTexture$2(t1, buffers);
          t1 = H.setRuntimeTypeInfo([], [Q.BaseDrawableBuffers]);
          t4 = new T.Vector3(new Float32Array(H._checkLength(3)));
          t4.setValues$3(0, 0, 0);
          t5 = T.Quaternion$(0, 0, 0, 1);
          t6 = new T.Vector3(new Float32Array(H._checkLength(3)));
          t6.setValues$3(1, 1, 1);
          ret = new Q.AnimatedSprite(null, null, null, null, null, null, null, 0, t1, null, t4, t5, 1, t6, null, null, false);
          t1.push(buffers);
          ret.current_buffer_ = buffers;
          ret.sequences_ = t3.sequences_;
          ret.num_images_side_ = t3.num_images_side_;
          ret.AnimatedSprite_shader_ = t2.renderer_.atlas_shader_;
          drawable = ret;
        } else
          drawable = t2.createTexturedDrawable$1(C.JSArray_methods.get$first(t1));
      }
      if (this.behaviour_ == null)
        P.print("Behaviour is null!");
      area.addElement$2(drawable, this.behaviour_.getBehaviour$3(area, loader, state));
    }
  },
  EnemyBehaviourDefinition: {
    "^": "Object;path_name_",
    getBehaviour$3: function(area, loader, state) {
      var t1, t2, t3, t4, t5;
      t1 = area.paths_.$index(0, this.path_name_);
      t2 = J.getInterceptor$x(t1);
      t3 = J.floorToDouble$0$n(J.get$x$x(J.$index$asx(t2.get$points(t1), 0)));
      t2 = J.floorToDouble$0$n(J.get$y$x(J.$index$asx(t2.get$points(t1), 0)));
      t4 = new Float32Array(H._checkLength(2));
      t5 = new T.Vector2(t4);
      t4[0] = t3;
      t4[1] = t2;
      new Float32Array(H._checkLength(2));
      t2 = new Y.EnemyBehaviour(false, null, null, null, null, -0.1, 0, true, t5, area, null, new T.Vector3(new Float32Array(H._checkLength(3))), null);
      t2.SpriteBehaviour$2(t5, area);
      t2.EnemyBehaviour$2(area, t1);
      return t2;
    }
  },
  PCBehaviourDefinition: {
    "^": "Object;position_<",
    getBehaviour$3: function(area, loader, state) {
      var t1, t2, t3, t4;
      t1 = this.position_;
      t2 = loader.input_;
      t3 = loader.cur_cam_;
      new Float32Array(H._checkLength(2));
      t4 = new F.PCBehaviour(false, false, t2, t3, false, state, null, null, null, null, null, null, -0.1, 0, true, t1, area, null, new T.Vector3(new Float32Array(H._checkLength(3))), null);
      t4.SpriteBehaviour$2(t1, area);
      t4.PCBehaviour$5(t1, area, t2, t3, state);
      return t4;
    }
  },
  SignBehaviourDefinition: {
    "^": "Object;text_,position_<",
    getBehaviour$3: function(area, loader, state) {
      var t1 = this.position_;
      new Float32Array(H._checkLength(2));
      return new O.SignBehaviour(loader.text_output_, this.text_, false, 1, t1, area, null, new T.Vector3(new Float32Array(H._checkLength(3))), null);
    }
  },
  SheepBehaviourDefinition: {
    "^": "Object;position_<",
    getBehaviour$3: function(area, loader, state) {
      var t1, t2;
      t1 = this.position_;
      new Float32Array(H._checkLength(2));
      t2 = new O.SheepBehaviour(null, null, null, -0.1, 0, true, t1, area, null, new T.Vector3(new Float32Array(H._checkLength(3))), null);
      t2.SpriteBehaviour$2(t1, area);
      t2.cur_state_ = O.SheepNormalState$(t2);
      return t2;
    }
  },
  GoldSheepBehaviourDefinition: {
    "^": "Object;position_<",
    getBehaviour$3: function(area, loader, state) {
      var t1, t2;
      t1 = this.position_;
      new Float32Array(H._checkLength(2));
      t2 = new O.GoldSheepBehaviour(null, null, null, -0.1, 0, true, t1, area, null, new T.Vector3(new Float32Array(H._checkLength(3))), null);
      t2.SpriteBehaviour$2(t1, area);
      t2.cur_state_ = O.SheepNormalState$(t2);
      return t2;
    }
  },
  ButtonBehaviourDefinition: {
    "^": "Object;position_<,object_",
    getBehaviour$3: function(area, loader, state) {
      var t1 = this.position_;
      new Float32Array(H._checkLength(2));
      return new Z.ButtonBehaviour(null, this.object_, null, 0.1, t1, area, null, new T.Vector3(new Float32Array(H._checkLength(3))), null);
    }
  },
  DoorBehaviourDefinition: {
    "^": "Object;position_<,name_",
    getBehaviour$3: function(area, loader, state) {
      var t1, t2;
      t1 = this.position_;
      t2 = this.name_;
      new Float32Array(H._checkLength(2));
      return new X.DoorBehaviour(t2, null, false, 1, t1, area, null, new T.Vector3(new Float32Array(H._checkLength(3))), null);
    }
  },
  SpriteLoader: {
    "^": "Object;drawable_factory_,input_,cur_cam_,text_output_,models_geometry_",
    AddToGameState$4: function(sprites_data, terrain, area, state) {
      var t1;
      for (t1 = J.get$iterator$ax(sprites_data); t1.moveNext$0();)
        t1.get$current().AddToGameState$4(this, terrain, area, state);
    }
  },
  SpriteImporter: {
    "^": "AsyncImporter;loader_,offset_<",
    processDrawable$2: function(drawable_spec, res) {
      var t1, t2, t3, sequence, $name, speed, seq, i;
      t1 = J.getInterceptor$asx(drawable_spec);
      if (J.$eq(t1.$index(drawable_spec, "type"), "quad")) {
        t2 = $.get$quad_vertices();
        t3 = $.get$quad_indices();
        res.geom_.push(new S.TexturedGeometry($.get$quad_coords(), t1.$index(drawable_spec, "path"), t2, null, null, t3));
        if (drawable_spec.containsKey$1("sequences") === true) {
          t2 = new L.AnimationData(null, null);
          res.anim_ = t2;
          t2.num_images_side_ = t1.$index(drawable_spec, "num_images_side");
          res.anim_.sequences_ = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, L.AnimationSequence);
          for (t1 = J.get$iterator$ax(t1.$index(drawable_spec, "sequences")); t1.moveNext$0();) {
            sequence = t1.get$current();
            t2 = J.getInterceptor$asx(sequence);
            $name = t2.$index(sequence, "name");
            speed = t2.$index(sequence, "time");
            seq = t2.$index(sequence, "sequence");
            res.anim_.sequences_.$indexSet(0, $name, new L.AnimationSequence(seq, speed));
          }
        }
      } else if (J.$eq(t1.$index(drawable_spec, "type"), "model"))
        res.geom_.push(this.loader_.models_geometry_.$index(0, t1.$index(drawable_spec, "path")));
      else if (J.$eq(t1.$index(drawable_spec, "type"), "animation"))
        for (t2 = res.geom_, t3 = this.loader_.models_geometry_, i = 0; drawable_spec.containsKey$1("path" + i) === true;) {
          t2.push(t3.$index(0, t1.$index(drawable_spec, "path" + i)));
          ++i;
        }
    },
    processBehaviour$2: function(behaviour_spec, res) {
      var t1, t2, t3, t4, t5, object;
      t1 = J.getInterceptor$asx(behaviour_spec);
      switch (t1.$index(behaviour_spec, "type")) {
        case "EnemyBehaviour":
          res.behaviour_ = new R.EnemyBehaviourDefinition(t1.$index(behaviour_spec, "path"));
          break;
        case "PCBehaviour":
          t2 = this.offset_.storage;
          t3 = t2[0];
          t2 = t2[1];
          t4 = new Float32Array(H._checkLength(2));
          t4[0] = t3;
          t4[1] = t2;
          t2 = t1.$index(behaviour_spec, "posx");
          t1 = t1.$index(behaviour_spec, "posy");
          t3 = new Float32Array(H._checkLength(2));
          t3[0] = t2;
          t3[1] = t1;
          res.behaviour_ = new R.PCBehaviourDefinition(new T.Vector2(t4).$add(0, new T.Vector2(t3)));
          break;
        case "SignBehaviour":
          t2 = t1.$index(behaviour_spec, "text");
          t3 = this.offset_.storage;
          t4 = t3[0];
          t3 = t3[1];
          t5 = new Float32Array(H._checkLength(2));
          t5[0] = t4;
          t5[1] = t3;
          t3 = t1.$index(behaviour_spec, "posx");
          t1 = t1.$index(behaviour_spec, "posy");
          t4 = new Float32Array(H._checkLength(2));
          t4[0] = t3;
          t4[1] = t1;
          res.behaviour_ = new R.SignBehaviourDefinition(t2, new T.Vector2(t5).$add(0, new T.Vector2(t4)));
          break;
        case "SheepBehaviour":
          t2 = this.offset_.storage;
          t3 = t2[0];
          t2 = t2[1];
          t4 = new Float32Array(H._checkLength(2));
          t4[0] = t3;
          t4[1] = t2;
          t2 = t1.$index(behaviour_spec, "posx");
          t1 = t1.$index(behaviour_spec, "posy");
          t3 = new Float32Array(H._checkLength(2));
          t3[0] = t2;
          t3[1] = t1;
          res.behaviour_ = new R.SheepBehaviourDefinition(new T.Vector2(t4).$add(0, new T.Vector2(t3)));
          break;
        case "GoldSheepBehaviour":
        case "CoolSheepBehaviour":
          t2 = this.offset_.storage;
          t3 = t2[0];
          t2 = t2[1];
          t4 = new Float32Array(H._checkLength(2));
          t4[0] = t3;
          t4[1] = t2;
          t2 = t1.$index(behaviour_spec, "posx");
          t1 = t1.$index(behaviour_spec, "posy");
          t3 = new Float32Array(H._checkLength(2));
          t3[0] = t2;
          t3[1] = t1;
          res.behaviour_ = new R.GoldSheepBehaviourDefinition(new T.Vector2(t4).$add(0, new T.Vector2(t3)));
          break;
        case "ButtonBehaviour":
          object = t1.$index(behaviour_spec, "properties") != null ? J.$index$asx(t1.$index(behaviour_spec, "properties"), "object") : null;
          t2 = this.offset_.storage;
          t3 = t2[0];
          t2 = t2[1];
          t4 = new Float32Array(H._checkLength(2));
          t4[0] = t3;
          t4[1] = t2;
          t2 = t1.$index(behaviour_spec, "posx");
          t1 = t1.$index(behaviour_spec, "posy");
          t3 = new Float32Array(H._checkLength(2));
          t3[0] = t2;
          t3[1] = t1;
          res.behaviour_ = new R.ButtonBehaviourDefinition(new T.Vector2(t4).$add(0, new T.Vector2(t3)), object);
          break;
        case "DoorBehaviour":
          t2 = this.offset_.storage;
          t3 = t2[0];
          t2 = t2[1];
          t4 = new Float32Array(H._checkLength(2));
          t4[0] = t3;
          t4[1] = t2;
          t2 = t1.$index(behaviour_spec, "posx");
          t3 = t1.$index(behaviour_spec, "posy");
          t5 = new Float32Array(H._checkLength(2));
          t5[0] = t2;
          t5[1] = t3;
          res.behaviour_ = new R.DoorBehaviourDefinition(new T.Vector2(t4).$add(0, new T.Vector2(t5)), t1.$index(behaviour_spec, "name"));
          break;
        default:
          P.print(C.JSString_methods.$add("Behaviour type ", t1.$index(behaviour_spec, "type")) + " not found");
      }
    },
    _extend$2: function(extended, base) {
      J.forEach$1$ax(base, new R.SpriteImporter__extend_closure(this, extended, base));
    },
    processFile$1: function(data) {
      var ret = H.setRuntimeTypeInfo([], [R.SpriteData]);
      J.forEach$1$ax(C.JsonCodec_null_null.decode$1(data), new R.SpriteImporter_processFile_closure(this, ret, P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, P.Map)));
      return ret;
    }
  },
  SpriteImporter__extend_closure: {
    "^": "Closure:3;this_0,extended_1,base_2",
    call$2: function(key, value) {
      var t1, t2, t3;
      t1 = this.extended_1;
      if (t1.containsKey$1(key) === true) {
        t2 = this.base_2;
        t3 = J.getInterceptor$asx(t2);
        if (!!J.getInterceptor(t3.$index(t2, key)).$isMap)
          this.this_0._extend$2(t1.$index(0, key), t3.$index(t2, key));
      } else
        t1.$indexSet(0, key, value);
    }
  },
  SpriteImporter_processFile_closure: {
    "^": "Closure:3;this_0,ret_1,prototypes_2",
    call$2: function(key, value) {
      var t1, current;
      t1 = this.prototypes_2;
      t1.$indexSet(0, key, value);
      if (value.containsKey$1("parent") === true && t1.containsKey$1(value.$index(0, "parent")))
        this.this_0._extend$2(value, t1.$index(0, value.$index(0, "parent")));
      current = new R.SpriteData(H.setRuntimeTypeInfo([], [S.BaseGeometry]), null, null);
      t1 = this.this_0;
      t1.processDrawable$2(value.$index(0, "drawable"), current);
      t1.processBehaviour$2(value.$index(0, "behaviour"), current);
      this.ret_1.push(current);
    }
  }
}],
["square_terrain", "square_terrain.dart", , Q, {
  "^": "",
  SquareTerrain: {
    "^": "Object;heights_,textures_,size_,image_,num_images_,map_scale_",
    calculateBaseGeometry$1: function(height) {
      var t1, t2, t3, ret, num_images_root, t4, t5, i, i0, t6, j, t7, num_texture, num_texture_y, t8, va, t9, t10, t11, t12, vb, vc, vd, p1, p2, _x, _y, _z, ox, oy, oz, normal, ia, ib, ic, id;
      t1 = H.setRuntimeTypeInfo([], [P.$double]);
      t2 = H.setRuntimeTypeInfo([], [P.$double]);
      t3 = H.setRuntimeTypeInfo([], [P.$int]);
      ret = new S.TexturedGeometry(H.setRuntimeTypeInfo([], [P.$double]), this.image_, t1, null, t2, t3);
      ret.colors_ = H.setRuntimeTypeInfo([], [P.$double]);
      num_images_root = C.JSNumber_methods.toInt$0(Math.floor(Math.sqrt(H.checkNum(this.num_images_))));
      t2 = 1 / num_images_root - 0.001953125;
      t1 = new Float32Array(H._checkLength(2));
      t1[0] = t2;
      t1[1] = t2;
      for (t2 = this.heights_, t4 = this.textures_, t5 = this.map_scale_, i = 0; i < this.size_.storage[0]; i = i0)
        for (i0 = i + 1, t6 = i - 1, j = 0; j < this.size_.storage[1]; ++j) {
          if (i >= t4.length)
            return H.ioore(t4, i);
          t7 = t4[i];
          if (j >= t7.length)
            return H.ioore(t7, j);
          num_texture = t7[j];
          if (i >= t2.length)
            return H.ioore(t2, i);
          if (J.$eq(J.$index$asx(t2[i], j), -1) || J.$le$n(num_texture, 0))
            continue;
          t7 = J.getInterceptor$n(num_texture);
          num_texture_y = J.floor$0$n(t7.$div(num_texture, num_images_root));
          t8 = new Float32Array(2);
          t8[0] = J.$add$ns(J.$sub$n(t7.$div(num_texture, num_images_root), num_texture_y), 0.0009765625);
          t8[1] = num_texture_y / num_images_root + 0.0009765625;
          va = S.Vertex$zero();
          t7 = va.position_.storage;
          t7[0] = i;
          t9 = va.color_;
          t10 = t7[0];
          t11 = this.size_.storage;
          t9 = t9.storage;
          t9[0] = t10 / t11[0];
          t10 = j - 1;
          t7[1] = t11[1] - t10;
          t12 = va.text_coord_.storage;
          t12[0] = t8[0];
          t12[1] = t8[1];
          t9[0] = t7[0] / t11[0];
          t9[1] = t7[1] / t11[1];
          vb = S.Vertex$zero();
          t11 = vb.position_.storage;
          t11[0] = i;
          t7 = this.size_.storage;
          t11[1] = t7[1] - j;
          t9 = vb.text_coord_.storage;
          t9[0] = t8[0];
          t9[1] = t8[1] + t1[1];
          t9 = vb.color_.storage;
          t9[0] = t11[0] / t7[0];
          t9[1] = t11[1] / t7[1];
          vc = S.Vertex$zero();
          t7 = vc.position_.storage;
          t7[0] = i0;
          t11 = this.size_.storage;
          t7[1] = t11[1] - t10;
          t9 = vc.text_coord_.storage;
          t9[0] = t8[0] + t1[0];
          t9[1] = t8[1];
          t9 = vc.color_.storage;
          t9[0] = t7[0] / t11[0];
          t9[1] = t7[1] / t11[1];
          vd = S.Vertex$zero();
          t11 = vd.position_.storage;
          t11[0] = i0;
          t7 = this.size_.storage;
          t11[1] = t7[1] - j;
          t9 = vd.text_coord_.storage;
          t9[0] = t8[0] + t1[0];
          t9[1] = t8[1] + t1[1];
          t8 = vd.color_.storage;
          t8[0] = t11[0] / t7[0];
          t8[1] = t11[1] / t7[1];
          if (i >= t2.length)
            return H.ioore(t2, i);
          if (J.$ge$n(J.$index$asx(t2[i], j), 0)) {
            t7 = va.position_;
            if (i >= t2.length)
              return H.ioore(t2, i);
            t7.storage[2] = J.$add$ns(J.$div$n(J.$index$asx(t2[i], j), t5), height);
            t7 = vb.position_;
            if (i >= t2.length)
              return H.ioore(t2, i);
            t7.storage[2] = J.$add$ns(J.$div$n(J.$index$asx(t2[i], j), t5), height);
            t7 = vc.position_;
            if (i >= t2.length)
              return H.ioore(t2, i);
            t7.storage[2] = J.$add$ns(J.$div$n(J.$index$asx(t2[i], j), t5), height);
            t7 = vd.position_;
            if (i >= t2.length)
              return H.ioore(t2, i);
            t7.storage[2] = J.$add$ns(J.$div$n(J.$index$asx(t2[i], j), t5), height);
          } else {
            if (i >= t2.length)
              return H.ioore(t2, i);
            if (J.$eq(J.$index$asx(t2[i], j), -2)) {
              t7 = va.position_;
              if (t6 < 0 || t6 >= t2.length)
                return H.ioore(t2, t6);
              t7.storage[2] = J.$add$ns(J.$div$n(J.$index$asx(t2[t6], j), t5), height);
              t7 = vb.position_;
              if (t6 >= t2.length)
                return H.ioore(t2, t6);
              t7.storage[2] = J.$add$ns(J.$div$n(J.$index$asx(t2[t6], j), t5), height);
              t7 = vc.position_;
              if (i0 >= t2.length)
                return H.ioore(t2, i0);
              t7.storage[2] = J.$add$ns(J.$div$n(J.$index$asx(t2[i0], j), t5), height);
              t7 = vd.position_;
              if (i0 >= t2.length)
                return H.ioore(t2, i0);
              t7.storage[2] = J.$add$ns(J.$div$n(J.$index$asx(t2[i0], j), t5), height);
            } else {
              if (i >= t2.length)
                return H.ioore(t2, i);
              if (J.$eq(J.$index$asx(t2[i], j), -3)) {
                t7 = va.position_;
                if (i >= t2.length)
                  return H.ioore(t2, i);
                t7.storage[2] = J.$add$ns(J.$div$n(J.$index$asx(t2[i], t10), t5), height);
                t7 = vb.position_;
                if (i >= t2.length)
                  return H.ioore(t2, i);
                t8 = j + 1;
                t7.storage[2] = J.$add$ns(J.$div$n(J.$index$asx(t2[i], t8), t5), height);
                t7 = vc.position_;
                if (i >= t2.length)
                  return H.ioore(t2, i);
                t7.storage[2] = J.$add$ns(J.$div$n(J.$index$asx(t2[i], t10), t5), height);
                t10 = vd.position_;
                if (i >= t2.length)
                  return H.ioore(t2, i);
                t10.storage[2] = J.$add$ns(J.$div$n(J.$index$asx(t2[i], t8), t5), height);
              } else {
                if (i >= t2.length)
                  return H.ioore(t2, i);
                if (J.$lt$n(J.$index$asx(t2[i], j), -3)) {
                  t7 = va.position_;
                  if (t6 < 0 || t6 >= t2.length)
                    return H.ioore(t2, t6);
                  t7.storage[2] = J.$add$ns(J.$div$n(J.$index$asx(t2[t6], t10), t5), height);
                  t7 = vb.position_;
                  if (t6 >= t2.length)
                    return H.ioore(t2, t6);
                  t8 = j + 1;
                  t7.storage[2] = J.$add$ns(J.$div$n(J.$index$asx(t2[t6], t8), t5), height);
                  t7 = vc.position_;
                  if (i0 >= t2.length)
                    return H.ioore(t2, i0);
                  t7.storage[2] = J.$add$ns(J.$div$n(J.$index$asx(t2[i0], t10), t5), height);
                  t10 = vd.position_;
                  if (i0 >= t2.length)
                    return H.ioore(t2, i0);
                  t10.storage[2] = J.$add$ns(J.$div$n(J.$index$asx(t2[i0], t8), t5), height);
                }
              }
            }
          }
          p1 = va.position_.$sub(0, vb.position_);
          p2 = va.position_.$sub(0, vc.position_);
          t7 = p1.storage;
          _x = t7[0];
          _y = t7[1];
          _z = t7[2];
          t7 = p2.storage;
          ox = t7[0];
          oy = t7[1];
          oz = t7[2];
          t7 = new Float32Array(3);
          normal = new T.Vector3(t7);
          t7[0] = _y * oz - _z * oy;
          t7[1] = _z * ox - _x * oz;
          t7[2] = _x * oy - _y * ox;
          vd.orientation_ = normal;
          vc.orientation_ = normal;
          vb.orientation_ = normal;
          va.orientation_ = normal;
          ia = ret.AddVertex$1(va);
          ib = ret.AddVertex$1(vb);
          ic = ret.AddVertex$1(vc);
          id = ret.AddVertex$1(vd);
          t3.push(ia);
          t3.push(id);
          t3.push(ib);
          t3.push(ia);
          t3.push(ic);
          t3.push(id);
        }
      return ret;
    }
  }
}],
["terrain_behaviour", "behaviour/terrain_behaviour.dart", , V, {
  "^": "",
  TerrainBehaviour: {
    "^": "Behaviour;heights_,obstacles_,portal_positions_,offset_<,portals_,drawable_",
    init$1: function(drawable) {
      var t1, t2, t3;
      t1 = this.heights_;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t1 = J.$mul$ns(J.get$length$asx(t1[0]), 0.1);
      t3 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t3.setValues$3(t2, t1, 0);
      drawable.size_ = t3;
    },
    update$0: function() {
    },
    addPortal$2: function(portal, positions) {
      var t1, t2, t3, pos, t4, t5, t6, t7;
      t1 = this.portals_;
      t1.push(portal);
      for (t2 = new J.ArrayIterator(positions, positions.length, 0, null), t3 = this.portal_positions_; t2.moveNext$0();) {
        pos = t2.__interceptors$_current;
        t4 = J.getInterceptor$x(pos);
        t5 = t4.get$x(pos);
        t4 = t4.get$y(pos);
        t6 = t1.length;
        t7 = new Float32Array(3);
        t7[0] = t5;
        t7[1] = t4;
        t7[2] = t6 - 1;
        t3.push(new T.Vector3(t7));
      }
    },
    getPortal$1: function(position) {
      var t1, x, y, ret, portal, t2;
      t1 = position.storage;
      x = C.JSNumber_methods.toInt$0(Math.floor(t1[0]));
      y = C.JSNumber_methods.toInt$0(Math.floor(t1[1]));
      t1 = this.portal_positions_;
      t1 = new J.ArrayIterator(t1, t1.length, 0, null);
      while (true) {
        if (!t1.moveNext$0()) {
          ret = null;
          break;
        }
        portal = t1.__interceptors$_current;
        t2 = J.getInterceptor$x(portal);
        if (t2.get$x(portal) === x && t2.get$y(portal) === y) {
          t1 = this.portals_;
          t2 = J.floor$0$n(t2.get$z(portal));
          if (t2 < 0 || t2 >= t1.length)
            return H.ioore(t1, t2);
          ret = t1[t2];
          break;
        }
      }
      return ret;
    },
    getHeight$1: function(position) {
      var t1, t2, x, t3, y, t4, height, d_x, d_y, a, c, b, d;
      t1 = {};
      t2 = position.storage;
      x = C.JSNumber_methods.toInt$0(Math.floor(t2[0])) - C.JSNumber_methods.toInt$0(Math.floor(this.offset_.storage[0]));
      t3 = this.heights_;
      if (0 >= t3.length)
        return H.ioore(t3, 0);
      y = J.$sub$n(J.get$length$asx(t3[0]), C.JSNumber_methods.toInt$0(Math.floor(t2[1])) - C.JSNumber_methods.toInt$0(Math.floor(this.offset_.storage[1])));
      if (x > 1) {
        t4 = J.getInterceptor$n(y);
        t4 = t4.$gt(y, 0) && t3.length > x + 1 && J.$gt$n(J.get$length$asx(t3[0]), t4.$add(y, 1));
      } else
        t4 = false;
      if (t4) {
        t1.obstacle_height_0 = 0;
        this.obstacles_.forEach$1(0, new V.TerrainBehaviour_getHeight_closure(t1, x, y));
        if (x < 0 || x >= t3.length)
          return H.ioore(t3, x);
        height = J.$mul$ns(J.$index$asx(t3[x], y), 1);
        d_x = t2[0] - x;
        if (0 >= t3.length)
          return H.ioore(t3, 0);
        t4 = J.getInterceptor$n(y);
        d_y = t4.$sub(y, J.$sub$n(J.get$length$asx(t3[0]), t2[1]));
        if (J.$lt$n(height, 0)) {
          if (x >= t3.length)
            return H.ioore(t3, x);
          if (J.$eq(J.$index$asx(t3[x], y), -2)) {
            t2 = x - 1;
            if (t2 < 0 || t2 >= t3.length)
              return H.ioore(t3, t2);
            a = J.$index$asx(t3[t2], y);
            t2 = x + 1;
            if (t2 >= t3.length)
              return H.ioore(t3, t2);
            height = J.$add$ns(J.$mul$ns(J.$index$asx(t3[t2], y), d_x), J.$mul$ns(a, 1 - d_x));
          } else {
            if (x >= t3.length)
              return H.ioore(t3, x);
            if (J.$eq(J.$index$asx(t3[x], y), -3)) {
              if (x >= t3.length)
                return H.ioore(t3, x);
              a = J.$index$asx(t3[x], t4.$sub(y, 1));
              if (x >= t3.length)
                return H.ioore(t3, x);
              c = J.$index$asx(t3[x], t4.$add(y, 1));
              t2 = J.$mul$ns(a, d_y);
              if (typeof d_y !== "number")
                return H.iae(d_y);
              height = J.$add$ns(t2, J.$mul$ns(c, 1 - d_y));
            } else {
              if (x >= t3.length)
                return H.ioore(t3, x);
              if (J.$eq(J.$index$asx(t3[x], y), -4)) {
                t2 = x + 1;
                if (t2 >= t3.length)
                  return H.ioore(t3, t2);
                b = J.$index$asx(t3[t2], t4.$sub(y, 1));
                t2 = x - 1;
                if (t2 < 0 || t2 >= t3.length)
                  return H.ioore(t3, t2);
                c = J.$index$asx(t3[t2], t4.$add(y, 1));
                if (typeof d_y !== "number")
                  return H.iae(d_y);
                t2 = J.getInterceptor$ns(b);
                t3 = J.getInterceptor$ns(c);
                height = d_x > d_y ? J.$add$ns(t2.$mul(b, d_y), t3.$mul(c, 1 - d_y)) : J.$add$ns(t2.$mul(b, d_x), t3.$mul(c, 1 - d_x));
              } else {
                if (x >= t3.length)
                  return H.ioore(t3, x);
                if (J.$eq(J.$index$asx(t3[x], y), -5)) {
                  t2 = x - 1;
                  if (t2 < 0 || t2 >= t3.length)
                    return H.ioore(t3, t2);
                  a = J.$index$asx(t3[t2], t4.$sub(y, 1));
                  t2 = x + 1;
                  if (t2 >= t3.length)
                    return H.ioore(t3, t2);
                  d = J.$index$asx(t3[t2], t4.$add(y, 1));
                  t2 = 1 - d_x;
                  if (typeof d_y !== "number")
                    return H.iae(d_y);
                  t3 = J.getInterceptor$ns(a);
                  t4 = J.getInterceptor$ns(d);
                  height = t2 > d_y ? J.$add$ns(t3.$mul(a, d_y), t4.$mul(d, 1 - d_y)) : J.$add$ns(t4.$mul(d, d_x), t3.$mul(a, t2));
                }
              }
            }
          }
        }
        height = J.$add$ns(J.$add$ns(J.$div$n(height, 5), this.offset_.storage[2]), t1.obstacle_height_0);
      } else
        height = null;
      return height;
    },
    getSize$0: function() {
      var t1, t2, t3;
      t1 = this.heights_;
      t2 = t1.length;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t1 = J.$mul$ns(J.get$length$asx(t1[0]), 1);
      t3 = new Float32Array(H._checkLength(2));
      t3[0] = t2;
      t3[1] = t1;
      return new T.Vector2(t3);
    }
  },
  TerrainBehaviour_getHeight_closure: {
    "^": "Closure:3;box_0,x_1,y_2",
    call$2: function(pos, obstacle) {
      var t1, t2;
      t1 = J.getInterceptor$x(pos);
      if (t1.get$x(pos) === this.x_1) {
        t1 = t1.get$y(pos);
        t2 = this.y_2;
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
      if (t1)
        this.box_0.obstacle_height_0 = obstacle.getHeight$0();
    }
  }
}],
["terrain_element_behaviour", "behaviour/terrain_element_behaviour.dart", , E, {
  "^": "",
  TerrainElementBehaviour: {
    "^": "Behaviour;position_<,offset_<",
    squareDistance$1: function(sprite) {
      var t1, t2, t3, t4;
      t1 = this.position_;
      t2 = this.offset_.storage;
      t3 = t2[0];
      t2 = t2[1];
      t4 = new Float32Array(H._checkLength(2));
      t4[0] = t3;
      t4[1] = t2;
      t4 = t1.$add(0, new T.Vector2(t4));
      t1 = sprite.get$position_().$add(0, sprite.get$offset_().get$xy());
      t2 = new T.Vector2(new Float32Array(H._checkLength(2)));
      t2.setFrom$1(t4);
      return t2.sub$1(t1).get$length2();
    },
    init$1: ["super$TerrainElementBehaviour$init$1", function(drawable) {
      var height, t1, t2, t3, t4, t5, t6, t7;
      this.super$Behaviour$init$1(drawable);
      height = this.area_.get$terrain_().getHeight$1(this.position_);
      if (height == null)
        height = 0;
      t1 = this.drawable_;
      t2 = this.position_.storage;
      t3 = t2[0];
      t4 = this.offset_.storage;
      t5 = t4[0];
      t2 = t2[1];
      t6 = t4[1];
      t4 = J.$add$ns(height, t4[2]);
      t7 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t7.setValues$3(t3 + t5, t2 + t6, t4);
      t1.position_ = t7;
    }]
  },
  Tile3dBehaviour: {
    "^": "TerrainElementBehaviour;height_,position_,area_,rotation_,offset_,drawable_",
    init$1: ["super$Tile3dBehaviour$init$1", function(drawable) {
      var t1, t2, t3, t4, t5, y;
      this.super$TerrainElementBehaviour$init$1(drawable);
      drawable.scale_ = 0.3333333333333333;
      t1 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t1.setValues$3(0.5, 0.5, 0);
      drawable.position_ = drawable.position_.$add(0, t1);
      t1 = this.area_.get$terrain_();
      t2 = this.position_;
      t3 = new Float32Array(H._checkLength(2));
      t3[0] = 0.5;
      t3[1] = 0.5;
      t3 = t2.$add(0, new T.Vector2(t3));
      t1.toString;
      t3 = t3.storage;
      t2 = C.JSNumber_methods.toInt$0(Math.floor(t3[0]));
      t4 = C.JSNumber_methods.toInt$0(Math.floor(t1.offset_.storage[0]));
      t5 = t1.heights_;
      if (0 >= t5.length)
        return H.ioore(t5, 0);
      y = J.$sub$n(J.get$length$asx(t5[0]), C.JSNumber_methods.toInt$0(Math.floor(t3[1])) - C.JSNumber_methods.toInt$0(Math.floor(t1.offset_.storage[1])));
      t1 = t1.obstacles_;
      t3 = J.$mul$ns(y, 1);
      t5 = new Float32Array(H._checkLength(2));
      t5[0] = t2 - t4;
      t5[1] = t3;
      t1.$indexSet(0, new T.Vector2(t5), this);
    }],
    getHeight$0: function() {
      return this.height_;
    },
    update$0: function() {
    }
  },
  BehaviourState: {
    "^": "Object;element_<",
    begin$0: function() {
    }
  },
  WalkingBehaviourState: {
    "^": "BehaviourState;",
    addPos$1: function(movement) {
      var t1, t2, t3, t4;
      if (this.get$element_().move$1(this.get$element_().position_.$add(0, movement)))
        ;
      else {
        t1 = this.get$element_();
        t2 = this.get$element_().position_;
        t3 = movement.get$x(movement);
        t4 = new Float32Array(H._checkLength(2));
        t4[0] = t3;
        t4[1] = 0;
        if (t1.move$1(t2.$add(0, new T.Vector2(t4))))
          ;
        else {
          t1 = this.get$element_();
          t2 = this.get$element_().position_;
          t3 = movement.get$y(movement);
          t4 = new Float32Array(H._checkLength(2));
          t4[0] = 0;
          t4[1] = t3;
          t1.move$1(t2.$add(0, new T.Vector2(t4)));
        }
      }
    },
    walkDir$1: function(dir) {
      var t1, t2, angle;
      this.addPos$1(dir.normalized$0().$mul(0, this.max_vel_));
      t1 = dir.get$y(dir);
      t2 = dir.get$x(dir);
      angle = Math.atan2(t1, t2) - 0.7853981633974483;
      if (angle < 0)
        angle += 6.283185307179586;
      if (angle < 1.5707963267948966)
        this.look$1(C.Directions_UP);
      else if (angle < 3.141592653589793)
        this.look$1(C.Directions_LEFT);
      else if (angle < 4.71238898038469)
        this.look$1(C.Directions_DOWN);
      else
        this.look$1(C.Directions_RIGHT);
    },
    look$1: function(dir) {
      this.dir_ = dir;
      if (this.get$element_().drawable_ instanceof Q.AnimatedSprite)
        switch (dir) {
          case C.Directions_UP:
            this.get$element_().anim_drawable_.SetSequence$1("walk_t");
            break;
          case C.Directions_DOWN:
            this.get$element_().anim_drawable_.SetSequence$1("walk_b");
            break;
          case C.Directions_LEFT:
            this.get$element_().anim_drawable_.SetSequence$1("walk_l");
            break;
          case C.Directions_RIGHT:
            this.get$element_().anim_drawable_.SetSequence$1("walk_r");
            break;
        }
    }
  },
  SpriteBehaviour: {
    "^": "TerrainElementBehaviour;",
    move$1: function(pos) {
      var height, t1, p, t2, t3, t4, t5, t6, t7, ret;
      height = this.area_.get$terrain_().getHeight$1(pos);
      this.on_ground_ = false;
      if (height != null) {
        t1 = J.$add$ns(this.height_, 0.5);
        if (typeof height !== "number")
          return height.$lt();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = height < t1;
      } else
        t1 = false;
      if (t1) {
        p = this.area_.get$terrain_().getPortal$1(pos);
        if (p != null)
          p.transport$2(this.area_.get$terrain_(), this);
        this.position_ = pos;
        t1 = this.rotation_;
        if (t1 != null)
          this.drawable_.rotation_ = t1;
        t1 = this.height_;
        if (t1 == null) {
          this.height_ = height;
          t1 = height;
        } else {
          if (typeof t1 !== "number")
            return t1.$le();
          if (typeof height !== "number")
            return H.iae(height);
          if (t1 <= height) {
            this.on_ground_ = true;
            this.height_ = height;
            t1 = height;
          }
        }
        t2 = this.drawable_;
        t3 = pos.storage;
        t4 = t3[0];
        t5 = this.offset_.storage;
        t6 = t5[0];
        t3 = t3[1];
        t7 = t5[1];
        t5 = J.$add$ns(t1, t5[2]);
        t1 = new T.Vector3(new Float32Array(H._checkLength(3)));
        t1.setValues$3(t4 + t6, t3 + t7, t5);
        t2.position_ = t1;
        ret = true;
      } else
        ret = false;
      return ret;
    },
    init$1: ["super$SpriteBehaviour$init$1", function(drawable) {
      var t1;
      this.super$TerrainElementBehaviour$init$1(drawable);
      t1 = this.drawable_;
      t1.transparent_ = true;
      if (!!drawable.$isAnimatedSprite)
        this.anim_drawable_ = drawable;
      t1.scale_ = 0.5;
    }],
    hit$1: function(sprite) {
      var t1 = this.cur_state_;
      if (t1 != null)
        t1.hit$1(sprite);
    },
    update$0: ["super$SpriteBehaviour$update$0", function() {
      var t1, t2;
      t1 = this.height_;
      if (t1 == null)
        P.print("Updating SpriteBehaviour with incorrect initialisation");
      else {
        t2 = this.z_accel_ -= 0.01;
        if (t2 < -0.1) {
          this.z_accel_ = -0.1;
          t2 = -0.1;
        }
        this.height_ = J.$add$ns(t1, t2);
        this.move$1(this.position_);
        t1 = this.cur_state_;
        if (t1 != null)
          t1.update$0();
      }
    }],
    SpriteBehaviour$2: function(pos, area) {
      var rot, t1;
      this.height_ = area.get$terrain_().getHeight$1(pos);
      rot = T.Quaternion$identity();
      t1 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t1.setValues$3(1, 0, 0);
      rot.setAxisAngle$2(t1, -1.7453292519943295);
      this.rotation_ = rot;
      t1 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t1.setValues$3(-0.5, 0, 1);
      this.offset_ = t1;
    }
  }
}],
["texture", "texture.dart", , Z, {
  "^": "",
  Texture: {
    "^": "Object;path,gl_,texture_,loaded_",
    makeCurrent$0: function() {
      if (this.loaded_)
        J.bindTexture$2$x(this.gl_, 3553, this.texture_);
    },
    Texture$2: function(image_name, gl_) {
      var image, t1, t2;
      this.texture_ = J.createTexture$0$x(this.gl_);
      image = W._ElementFactoryProvider_createElement_tag("img", null);
      t1 = J.getInterceptor$x(image);
      t2 = t1.get$onLoad(image);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new Z.Texture_closure(this, image)), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
      t1.set$src(image, image_name);
    },
    static: {Texture$: function(image_name, gl_) {
        var t1 = new Z.Texture(null, gl_, null, false);
        t1.Texture$2(image_name, gl_);
        return t1;
      }}
  },
  Texture_closure: {
    "^": "Closure:1;this_0,image_1",
    call$1: function(e) {
      var t1, t2;
      t1 = this.this_0;
      t2 = t1.texture_;
      J.bindTexture$2$x(t1.gl_, 3553, t2);
      J.texImage2DImage$6$x(t1.gl_, 3553, 0, 6408, 6408, 5121, this.image_1);
      J.texParameteri$3$x(t1.gl_, 3553, 10240, 9728);
      J.texParameteri$3$x(t1.gl_, 3553, 10241, 9728);
      J.bindTexture$2$x(t1.gl_, 3553, null);
      t1.loaded_ = true;
    }
  }
}],
["vector_math", "package:vector_math/vector_math.dart", , T, {
  "^": "",
  makePerspectiveMatrix: function(fovYRadians, aspectRatio, zNear, zFar) {
    var height, width, left, bottom, t1, two_near, right_minus_left, top_minus_bottom, far_minus_near;
    height = Math.tan(H.checkNum(fovYRadians * 0.5)) * zNear;
    width = height * aspectRatio;
    left = -width;
    bottom = -height;
    t1 = new Float32Array(H._checkLength(16));
    two_near = 2 * zNear;
    right_minus_left = width - left;
    top_minus_bottom = height - bottom;
    far_minus_near = zFar - zNear;
    t1[0] = 0;
    t1[1] = 0;
    t1[2] = 0;
    t1[3] = 0;
    t1[4] = 0;
    t1[5] = 0;
    t1[6] = 0;
    t1[7] = 0;
    t1[8] = 0;
    t1[9] = 0;
    t1[10] = 0;
    t1[11] = 0;
    t1[12] = 0;
    t1[13] = 0;
    t1[14] = 0;
    t1[15] = 0;
    t1[0] = two_near / right_minus_left;
    t1[5] = two_near / top_minus_bottom;
    t1[8] = (width + left) / right_minus_left;
    t1[9] = (height + bottom) / top_minus_bottom;
    t1[10] = -(zFar + zNear) / far_minus_near;
    t1[11] = -1;
    t1[14] = -(two_near * zFar) / far_minus_near;
    return new T.Matrix4(t1);
  },
  Matrix3: {
    "^": "Object;storage<",
    setValues$9: function(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {
      var t1 = this.storage;
      t1[8] = arg8;
      t1[7] = arg7;
      t1[6] = arg6;
      t1[5] = arg5;
      t1[4] = arg4;
      t1[3] = arg3;
      t1[2] = arg2;
      t1[1] = arg1;
      t1[0] = arg0;
      return this;
    },
    toString$0: function(_) {
      return "[0] " + this.getRow$1(0).toString$0(0) + "\n[1] " + this.getRow$1(1).toString$0(0) + "\n[2] " + this.getRow$1(2).toString$0(0) + "\n";
    },
    get$dimension: function() {
      return 3;
    },
    $index: function(_, i) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 9)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, v) {
      var t1 = this.storage;
      if (i >= 9)
        return H.ioore(t1, i);
      t1[i] = v;
    },
    setRow$2: function(row, arg) {
      var t1, t2, t3, t4;
      t1 = this.storage;
      t2 = arg.storage;
      t3 = t2[0];
      if (row >= 9)
        return H.ioore(t1, row);
      t1[row] = t3;
      t3 = 3 + row;
      t4 = t2[1];
      if (t3 >= 9)
        return H.ioore(t1, t3);
      t1[t3] = t4;
      t4 = 6 + row;
      t2 = t2[2];
      if (t4 >= 9)
        return H.ioore(t1, t4);
      t1[t4] = t2;
    },
    getRow$1: function(row) {
      var t1, t2, t3;
      t1 = new Float32Array(H._checkLength(3));
      t2 = this.storage;
      if (row >= 9)
        return H.ioore(t2, row);
      t1[0] = t2[row];
      t3 = 3 + row;
      if (t3 >= 9)
        return H.ioore(t2, t3);
      t1[1] = t2[t3];
      t3 = 6 + row;
      if (t3 >= 9)
        return H.ioore(t2, t3);
      t1[2] = t2[t3];
      return new T.Vector3(t1);
    },
    $mul: function(_, arg) {
      var t1, t2, t3, t4, t5, t6, t7, t8;
      if (typeof arg === "number") {
        t1 = new Float32Array(H._checkLength(9));
        t2 = this.storage;
        t1[8] = t2[8] * arg;
        t1[7] = t2[7] * arg;
        t1[6] = t2[6] * arg;
        t1[5] = t2[5] * arg;
        t1[4] = t2[4] * arg;
        t1[3] = t2[3] * arg;
        t1[2] = t2[2] * arg;
        t1[1] = t2[1] * arg;
        t1[0] = t2[0] * arg;
        return new T.Matrix3(t1);
      }
      if (arg instanceof T.Vector3) {
        t1 = new Float32Array(H._checkLength(3));
        t2 = this.storage;
        t3 = t2[2];
        t4 = arg.storage;
        t1[2] = t3 * t4[0] + t2[5] * t4[1] + t2[8] * t4[2];
        t1[1] = t2[1] * t4[0] + t2[4] * t4[1] + t2[7] * t4[2];
        t1[0] = t2[0] * t4[0] + t2[3] * t4[1] + t2[6] * t4[2];
        return new T.Vector3(t1);
      }
      if (3 === arg.get$dimension()) {
        t1 = new Float32Array(H._checkLength(9));
        t2 = this.storage;
        t3 = t2[0];
        t4 = arg.get$storage();
        if (0 >= t4.length)
          return H.ioore(t4, 0);
        t4 = t4[0];
        t5 = t2[3];
        t6 = arg.get$storage();
        if (1 >= t6.length)
          return H.ioore(t6, 1);
        t6 = t6[1];
        t7 = t2[6];
        t8 = arg.get$storage();
        if (2 >= t8.length)
          return H.ioore(t8, 2);
        t1[0] = t3 * t4 + t5 * t6 + t7 * t8[2];
        t8 = t2[0];
        t7 = arg.get$storage();
        if (3 >= t7.length)
          return H.ioore(t7, 3);
        t7 = t7[3];
        t6 = t2[3];
        t5 = arg.get$storage();
        if (4 >= t5.length)
          return H.ioore(t5, 4);
        t5 = t5[4];
        t4 = t2[6];
        t3 = arg.get$storage();
        if (5 >= t3.length)
          return H.ioore(t3, 5);
        t1[3] = t8 * t7 + t6 * t5 + t4 * t3[5];
        t3 = t2[0];
        t4 = arg.get$storage();
        if (6 >= t4.length)
          return H.ioore(t4, 6);
        t4 = t4[6];
        t5 = t2[3];
        t6 = arg.get$storage();
        if (7 >= t6.length)
          return H.ioore(t6, 7);
        t6 = t6[7];
        t7 = t2[6];
        t8 = arg.get$storage();
        if (8 >= t8.length)
          return H.ioore(t8, 8);
        t1[6] = t3 * t4 + t5 * t6 + t7 * t8[8];
        t8 = t2[1];
        t7 = arg.get$storage();
        if (0 >= t7.length)
          return H.ioore(t7, 0);
        t7 = t7[0];
        t6 = t2[4];
        t5 = arg.get$storage();
        if (1 >= t5.length)
          return H.ioore(t5, 1);
        t5 = t5[1];
        t4 = t2[7];
        t3 = arg.get$storage();
        if (2 >= t3.length)
          return H.ioore(t3, 2);
        t1[1] = t8 * t7 + t6 * t5 + t4 * t3[2];
        t3 = t2[1];
        t4 = arg.get$storage();
        if (3 >= t4.length)
          return H.ioore(t4, 3);
        t4 = t4[3];
        t5 = t2[4];
        t6 = arg.get$storage();
        if (4 >= t6.length)
          return H.ioore(t6, 4);
        t6 = t6[4];
        t7 = t2[7];
        t8 = arg.get$storage();
        if (5 >= t8.length)
          return H.ioore(t8, 5);
        t1[4] = t3 * t4 + t5 * t6 + t7 * t8[5];
        t8 = t2[1];
        t7 = arg.get$storage();
        if (6 >= t7.length)
          return H.ioore(t7, 6);
        t7 = t7[6];
        t6 = t2[4];
        t5 = arg.get$storage();
        if (7 >= t5.length)
          return H.ioore(t5, 7);
        t5 = t5[7];
        t4 = t2[7];
        t3 = arg.get$storage();
        if (8 >= t3.length)
          return H.ioore(t3, 8);
        t1[7] = t8 * t7 + t6 * t5 + t4 * t3[8];
        t3 = t2[2];
        t4 = arg.get$storage();
        if (0 >= t4.length)
          return H.ioore(t4, 0);
        t4 = t4[0];
        t5 = t2[5];
        t6 = arg.get$storage();
        if (1 >= t6.length)
          return H.ioore(t6, 1);
        t6 = t6[1];
        t7 = t2[8];
        t8 = arg.get$storage();
        if (2 >= t8.length)
          return H.ioore(t8, 2);
        t1[2] = t3 * t4 + t5 * t6 + t7 * t8[2];
        t8 = t2[2];
        t7 = arg.get$storage();
        if (3 >= t7.length)
          return H.ioore(t7, 3);
        t7 = t7[3];
        t6 = t2[5];
        t5 = arg.get$storage();
        if (4 >= t5.length)
          return H.ioore(t5, 4);
        t5 = t5[4];
        t4 = t2[8];
        t3 = arg.get$storage();
        if (5 >= t3.length)
          return H.ioore(t3, 5);
        t1[5] = t8 * t7 + t6 * t5 + t4 * t3[5];
        t3 = t2[2];
        t4 = arg.get$storage();
        if (6 >= t4.length)
          return H.ioore(t4, 6);
        t4 = t4[6];
        t5 = t2[5];
        t6 = arg.get$storage();
        if (7 >= t6.length)
          return H.ioore(t6, 7);
        t6 = t6[7];
        t2 = t2[8];
        t7 = arg.get$storage();
        if (8 >= t7.length)
          return H.ioore(t7, 8);
        t1[8] = t3 * t4 + t5 * t6 + t2 * t7[8];
        return new T.Matrix3(t1);
      }
      throw H.wrapException(P.ArgumentError$(arg));
    },
    $add: function(_, arg) {
      var t1, t2, t3, t4;
      t1 = new Float32Array(H._checkLength(9));
      t2 = this.storage;
      t3 = t2[0];
      t4 = arg.get$storage();
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t1[0] = t3 + t4[0];
      t4 = t2[1];
      t3 = arg.get$storage();
      if (1 >= t3.length)
        return H.ioore(t3, 1);
      t1[1] = t4 + t3[1];
      t3 = t2[2];
      t4 = arg.get$storage();
      if (2 >= t4.length)
        return H.ioore(t4, 2);
      t1[2] = t3 + t4[2];
      t4 = t2[3];
      t3 = arg.get$storage();
      if (3 >= t3.length)
        return H.ioore(t3, 3);
      t1[3] = t4 + t3[3];
      t3 = t2[4];
      t4 = arg.get$storage();
      if (4 >= t4.length)
        return H.ioore(t4, 4);
      t1[4] = t3 + t4[4];
      t4 = t2[5];
      t3 = arg.get$storage();
      if (5 >= t3.length)
        return H.ioore(t3, 5);
      t1[5] = t4 + t3[5];
      t3 = t2[6];
      t4 = arg.get$storage();
      if (6 >= t4.length)
        return H.ioore(t4, 6);
      t1[6] = t3 + t4[6];
      t4 = t2[7];
      t3 = arg.get$storage();
      if (7 >= t3.length)
        return H.ioore(t3, 7);
      t1[7] = t4 + t3[7];
      t2 = t2[8];
      t3 = arg.get$storage();
      if (8 >= t3.length)
        return H.ioore(t3, 8);
      t1[8] = t2 + t3[8];
      return new T.Matrix3(t1);
    },
    $sub: function(_, arg) {
      var t1, t2, t3, t4;
      t1 = new Float32Array(H._checkLength(9));
      t2 = this.storage;
      t3 = t2[0];
      t4 = arg.get$storage();
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t1[0] = t3 - t4[0];
      t4 = t2[1];
      t3 = arg.get$storage();
      if (1 >= t3.length)
        return H.ioore(t3, 1);
      t1[1] = t4 - t3[1];
      t3 = t2[2];
      t4 = arg.get$storage();
      if (2 >= t4.length)
        return H.ioore(t4, 2);
      t1[2] = t3 - t4[2];
      t4 = t2[3];
      t3 = arg.get$storage();
      if (3 >= t3.length)
        return H.ioore(t3, 3);
      t1[3] = t4 - t3[3];
      t3 = t2[4];
      t4 = arg.get$storage();
      if (4 >= t4.length)
        return H.ioore(t4, 4);
      t1[4] = t3 - t4[4];
      t4 = t2[5];
      t3 = arg.get$storage();
      if (5 >= t3.length)
        return H.ioore(t3, 5);
      t1[5] = t4 - t3[5];
      t3 = t2[6];
      t4 = arg.get$storage();
      if (6 >= t4.length)
        return H.ioore(t4, 6);
      t1[6] = t3 - t4[6];
      t4 = t2[7];
      t3 = arg.get$storage();
      if (7 >= t3.length)
        return H.ioore(t3, 7);
      t1[7] = t4 - t3[7];
      t2 = t2[8];
      t3 = arg.get$storage();
      if (8 >= t3.length)
        return H.ioore(t3, 8);
      t1[8] = t2 - t3[8];
      return new T.Matrix3(t1);
    },
    setIdentity$0: function() {
      var t1 = this.storage;
      t1[0] = 1;
      t1[1] = 0;
      t1[2] = 0;
      t1[3] = 0;
      t1[4] = 1;
      t1[5] = 0;
      t1[6] = 0;
      t1[7] = 0;
      t1[8] = 1;
      return this;
    },
    invert$0: function() {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, det, invDet;
      t1 = this.storage;
      t2 = t1[0];
      t3 = t1[4];
      t4 = t1[8];
      t5 = t1[5];
      t6 = t1[7];
      t7 = t3 * t4 - t5 * t6;
      t8 = t1[1];
      t9 = t1[3];
      t10 = t9 * t4;
      t11 = t1[6];
      t12 = t5 * t11;
      t13 = t1[2];
      t14 = t9 * t6 - t3 * t11;
      det = t2 * t7 - t8 * (t10 - t12) + t13 * t14;
      if (det === 0)
        return 0;
      invDet = 1 / det;
      t1[0] = invDet * t7;
      t1[1] = invDet * (t13 * t6 - t8 * t4);
      t1[2] = invDet * (t8 * t5 - t13 * t3);
      t1[3] = invDet * (t12 - t10);
      t1[4] = invDet * (t2 * t4 - t13 * t11);
      t1[5] = invDet * (t13 * t9 - t2 * t5);
      t1[6] = invDet * t14;
      t1[7] = invDet * (t8 * t11 - t2 * t6);
      t1[8] = invDet * (t2 * t3 - t8 * t9);
      return det;
    },
    add$1: function(_, o) {
      var t1 = this.storage;
      t1[0] = C.JSNumber_methods.$add(t1[0], o.get$storage().$index(0, 0));
      t1[1] = C.JSNumber_methods.$add(t1[1], o.get$storage().$index(0, 1));
      t1[2] = C.JSNumber_methods.$add(t1[2], o.get$storage().$index(0, 2));
      t1[3] = C.JSNumber_methods.$add(t1[3], o.get$storage().$index(0, 3));
      t1[4] = C.JSNumber_methods.$add(t1[4], o.get$storage().$index(0, 4));
      t1[5] = C.JSNumber_methods.$add(t1[5], o.get$storage().$index(0, 5));
      t1[6] = C.JSNumber_methods.$add(t1[6], o.get$storage().$index(0, 6));
      t1[7] = C.JSNumber_methods.$add(t1[7], o.get$storage().$index(0, 7));
      t1[8] = C.JSNumber_methods.$add(t1[8], o.get$storage().$index(0, 8));
      return this;
    },
    copyIntoArray$2: function(array, offset) {
      var t1, t2, t3;
      t1 = offset + 8;
      t2 = this.storage;
      t3 = t2[8];
      if (t1 >= 9)
        return H.ioore(array, t1);
      array[t1] = t3;
      t3 = offset + 7;
      t1 = t2[7];
      if (t3 >= 9)
        return H.ioore(array, t3);
      array[t3] = t1;
      t1 = offset + 6;
      t3 = t2[6];
      if (t1 >= 9)
        return H.ioore(array, t1);
      array[t1] = t3;
      t3 = offset + 5;
      t1 = t2[5];
      if (t3 >= 9)
        return H.ioore(array, t3);
      array[t3] = t1;
      t1 = offset + 4;
      t3 = t2[4];
      if (t1 >= 9)
        return H.ioore(array, t1);
      array[t1] = t3;
      t3 = offset + 3;
      t1 = t2[3];
      if (t3 >= 9)
        return H.ioore(array, t3);
      array[t3] = t1;
      t1 = offset + 2;
      t3 = t2[2];
      if (t1 >= 9)
        return H.ioore(array, t1);
      array[t1] = t3;
      t3 = offset + 1;
      t1 = t2[1];
      if (t3 >= 9)
        return H.ioore(array, t3);
      array[t3] = t1;
      t2 = t2[0];
      if (offset >= 9)
        return H.ioore(array, offset);
      array[offset] = t2;
    },
    copyIntoArray$1: function(array) {
      return this.copyIntoArray$2(array, 0);
    }
  },
  Matrix4: {
    "^": "Object;storage<",
    toString$0: function(_) {
      return "[0] " + this.getRow$1(0).toString$0(0) + "\n[1] " + this.getRow$1(1).toString$0(0) + "\n[2] " + this.getRow$1(2).toString$0(0) + "\n[3] " + this.getRow$1(3).toString$0(0) + "\n";
    },
    get$dimension: function() {
      return 4;
    },
    $index: function(_, i) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 16)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, v) {
      var t1 = this.storage;
      if (i >= 16)
        return H.ioore(t1, i);
      t1[i] = v;
    },
    getRow$1: function(row) {
      var t1, t2, t3;
      t1 = new Float32Array(H._checkLength(4));
      t2 = this.storage;
      if (row >= 16)
        return H.ioore(t2, row);
      t1[0] = t2[row];
      t3 = 4 + row;
      if (t3 >= 16)
        return H.ioore(t2, t3);
      t1[1] = t2[t3];
      t3 = 8 + row;
      if (t3 >= 16)
        return H.ioore(t2, t3);
      t1[2] = t2[t3];
      t3 = 12 + row;
      if (t3 >= 16)
        return H.ioore(t2, t3);
      t1[3] = t2[t3];
      return new T.Vector4(t1);
    },
    $mul: function(_, arg) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
      if (typeof arg === "number") {
        t1 = new Float32Array(H._checkLength(16));
        t2 = this.storage;
        t1[15] = t2[15] * arg;
        t1[14] = t2[14] * arg;
        t1[13] = t2[13] * arg;
        t1[12] = t2[12] * arg;
        t1[11] = t2[11] * arg;
        t1[10] = t2[10] * arg;
        t1[9] = t2[9] * arg;
        t1[8] = t2[8] * arg;
        t1[7] = t2[7] * arg;
        t1[6] = t2[6] * arg;
        t1[5] = t2[5] * arg;
        t1[4] = t2[4] * arg;
        t1[3] = t2[3] * arg;
        t1[2] = t2[2] * arg;
        t1[1] = t2[1] * arg;
        t1[0] = t2[0] * arg;
        return new T.Matrix4(t1);
      }
      t1 = J.getInterceptor(arg);
      if (!!t1.$isVector4) {
        t1 = new Float32Array(H._checkLength(4));
        t2 = this.storage;
        t3 = t2[3];
        t4 = arg.storage;
        t1[3] = t3 * t4[0] + t2[7] * t4[1] + t2[11] * t4[2] + t2[15] * t4[3];
        t1[2] = t2[2] * t4[0] + t2[6] * t4[1] + t2[10] * t4[2] + t2[14] * t4[3];
        t1[1] = t2[1] * t4[0] + t2[5] * t4[1] + t2[9] * t4[2] + t2[13] * t4[3];
        t1[0] = t2[0] * t4[0] + t2[4] * t4[1] + t2[8] * t4[2] + t2[12] * t4[3];
        return new T.Vector4(t1);
      }
      if (!!t1.$isVector3) {
        t1 = new Float32Array(H._checkLength(3));
        t2 = this.storage;
        t3 = t2[0];
        t4 = arg.storage;
        t1[0] = t3 * t4[0] + t2[4] * t4[1] + t2[8] * t4[2] + t2[12];
        t1[1] = t2[1] * t4[0] + t2[5] * t4[1] + t2[9] * t4[2] + t2[13];
        t1[2] = t2[2] * t4[0] + t2[6] * t4[1] + t2[10] * t4[2] + t2[14];
        return new T.Vector3(t1);
      }
      if (4 === arg.get$dimension()) {
        t1 = new Float32Array(H._checkLength(16));
        t2 = this.storage;
        t3 = t2[0];
        t4 = arg.get$storage();
        if (0 >= t4.length)
          return H.ioore(t4, 0);
        t4 = t4[0];
        t5 = t2[4];
        t6 = arg.get$storage();
        if (1 >= t6.length)
          return H.ioore(t6, 1);
        t6 = t6[1];
        t7 = t2[8];
        t8 = arg.get$storage();
        if (2 >= t8.length)
          return H.ioore(t8, 2);
        t8 = t8[2];
        t9 = t2[12];
        t10 = arg.get$storage();
        if (3 >= t10.length)
          return H.ioore(t10, 3);
        t1[0] = t3 * t4 + t5 * t6 + t7 * t8 + t9 * t10[3];
        t10 = t2[0];
        t9 = arg.get$storage();
        if (4 >= t9.length)
          return H.ioore(t9, 4);
        t9 = t9[4];
        t8 = t2[4];
        t7 = arg.get$storage();
        if (5 >= t7.length)
          return H.ioore(t7, 5);
        t7 = t7[5];
        t6 = t2[8];
        t5 = arg.get$storage();
        if (6 >= t5.length)
          return H.ioore(t5, 6);
        t5 = t5[6];
        t4 = t2[12];
        t3 = arg.get$storage();
        if (7 >= t3.length)
          return H.ioore(t3, 7);
        t1[4] = t10 * t9 + t8 * t7 + t6 * t5 + t4 * t3[7];
        t3 = t2[0];
        t4 = arg.get$storage();
        if (8 >= t4.length)
          return H.ioore(t4, 8);
        t4 = t4[8];
        t5 = t2[4];
        t6 = arg.get$storage();
        if (9 >= t6.length)
          return H.ioore(t6, 9);
        t6 = t6[9];
        t7 = t2[8];
        t8 = arg.get$storage();
        if (10 >= t8.length)
          return H.ioore(t8, 10);
        t8 = t8[10];
        t9 = t2[12];
        t10 = arg.get$storage();
        if (11 >= t10.length)
          return H.ioore(t10, 11);
        t1[8] = t3 * t4 + t5 * t6 + t7 * t8 + t9 * t10[11];
        t10 = t2[0];
        t9 = arg.get$storage();
        if (12 >= t9.length)
          return H.ioore(t9, 12);
        t9 = t9[12];
        t8 = t2[4];
        t7 = arg.get$storage();
        if (13 >= t7.length)
          return H.ioore(t7, 13);
        t7 = t7[13];
        t6 = t2[8];
        t5 = arg.get$storage();
        if (14 >= t5.length)
          return H.ioore(t5, 14);
        t5 = t5[14];
        t4 = t2[12];
        t3 = arg.get$storage();
        if (15 >= t3.length)
          return H.ioore(t3, 15);
        t1[12] = t10 * t9 + t8 * t7 + t6 * t5 + t4 * t3[15];
        t3 = t2[1];
        t4 = arg.get$storage();
        if (0 >= t4.length)
          return H.ioore(t4, 0);
        t4 = t4[0];
        t5 = t2[5];
        t6 = arg.get$storage();
        if (1 >= t6.length)
          return H.ioore(t6, 1);
        t6 = t6[1];
        t7 = t2[9];
        t8 = arg.get$storage();
        if (2 >= t8.length)
          return H.ioore(t8, 2);
        t8 = t8[2];
        t9 = t2[13];
        t10 = arg.get$storage();
        if (3 >= t10.length)
          return H.ioore(t10, 3);
        t1[1] = t3 * t4 + t5 * t6 + t7 * t8 + t9 * t10[3];
        t10 = t2[1];
        t9 = arg.get$storage();
        if (4 >= t9.length)
          return H.ioore(t9, 4);
        t9 = t9[4];
        t8 = t2[5];
        t7 = arg.get$storage();
        if (5 >= t7.length)
          return H.ioore(t7, 5);
        t7 = t7[5];
        t6 = t2[9];
        t5 = arg.get$storage();
        if (6 >= t5.length)
          return H.ioore(t5, 6);
        t5 = t5[6];
        t4 = t2[13];
        t3 = arg.get$storage();
        if (7 >= t3.length)
          return H.ioore(t3, 7);
        t1[5] = t10 * t9 + t8 * t7 + t6 * t5 + t4 * t3[7];
        t3 = t2[1];
        t4 = arg.get$storage();
        if (8 >= t4.length)
          return H.ioore(t4, 8);
        t4 = t4[8];
        t5 = t2[5];
        t6 = arg.get$storage();
        if (9 >= t6.length)
          return H.ioore(t6, 9);
        t6 = t6[9];
        t7 = t2[9];
        t8 = arg.get$storage();
        if (10 >= t8.length)
          return H.ioore(t8, 10);
        t8 = t8[10];
        t9 = t2[13];
        t10 = arg.get$storage();
        if (11 >= t10.length)
          return H.ioore(t10, 11);
        t1[9] = t3 * t4 + t5 * t6 + t7 * t8 + t9 * t10[11];
        t10 = t2[1];
        t9 = arg.get$storage();
        if (12 >= t9.length)
          return H.ioore(t9, 12);
        t9 = t9[12];
        t8 = t2[5];
        t7 = arg.get$storage();
        if (13 >= t7.length)
          return H.ioore(t7, 13);
        t7 = t7[13];
        t6 = t2[9];
        t5 = arg.get$storage();
        if (14 >= t5.length)
          return H.ioore(t5, 14);
        t5 = t5[14];
        t4 = t2[13];
        t3 = arg.get$storage();
        if (15 >= t3.length)
          return H.ioore(t3, 15);
        t1[13] = t10 * t9 + t8 * t7 + t6 * t5 + t4 * t3[15];
        t3 = t2[2];
        t4 = arg.get$storage();
        if (0 >= t4.length)
          return H.ioore(t4, 0);
        t4 = t4[0];
        t5 = t2[6];
        t6 = arg.get$storage();
        if (1 >= t6.length)
          return H.ioore(t6, 1);
        t6 = t6[1];
        t7 = t2[10];
        t8 = arg.get$storage();
        if (2 >= t8.length)
          return H.ioore(t8, 2);
        t8 = t8[2];
        t9 = t2[14];
        t10 = arg.get$storage();
        if (3 >= t10.length)
          return H.ioore(t10, 3);
        t1[2] = t3 * t4 + t5 * t6 + t7 * t8 + t9 * t10[3];
        t10 = t2[2];
        t9 = arg.get$storage();
        if (4 >= t9.length)
          return H.ioore(t9, 4);
        t9 = t9[4];
        t8 = t2[6];
        t7 = arg.get$storage();
        if (5 >= t7.length)
          return H.ioore(t7, 5);
        t7 = t7[5];
        t6 = t2[10];
        t5 = arg.get$storage();
        if (6 >= t5.length)
          return H.ioore(t5, 6);
        t5 = t5[6];
        t4 = t2[14];
        t3 = arg.get$storage();
        if (7 >= t3.length)
          return H.ioore(t3, 7);
        t1[6] = t10 * t9 + t8 * t7 + t6 * t5 + t4 * t3[7];
        t3 = t2[2];
        t4 = arg.get$storage();
        if (8 >= t4.length)
          return H.ioore(t4, 8);
        t4 = t4[8];
        t5 = t2[6];
        t6 = arg.get$storage();
        if (9 >= t6.length)
          return H.ioore(t6, 9);
        t6 = t6[9];
        t7 = t2[10];
        t8 = arg.get$storage();
        if (10 >= t8.length)
          return H.ioore(t8, 10);
        t8 = t8[10];
        t9 = t2[14];
        t10 = arg.get$storage();
        if (11 >= t10.length)
          return H.ioore(t10, 11);
        t1[10] = t3 * t4 + t5 * t6 + t7 * t8 + t9 * t10[11];
        t10 = t2[2];
        t9 = arg.get$storage();
        if (12 >= t9.length)
          return H.ioore(t9, 12);
        t9 = t9[12];
        t8 = t2[6];
        t7 = arg.get$storage();
        if (13 >= t7.length)
          return H.ioore(t7, 13);
        t7 = t7[13];
        t6 = t2[10];
        t5 = arg.get$storage();
        if (14 >= t5.length)
          return H.ioore(t5, 14);
        t5 = t5[14];
        t4 = t2[14];
        t3 = arg.get$storage();
        if (15 >= t3.length)
          return H.ioore(t3, 15);
        t1[14] = t10 * t9 + t8 * t7 + t6 * t5 + t4 * t3[15];
        t3 = t2[3];
        t4 = arg.get$storage();
        if (0 >= t4.length)
          return H.ioore(t4, 0);
        t4 = t4[0];
        t5 = t2[7];
        t6 = arg.get$storage();
        if (1 >= t6.length)
          return H.ioore(t6, 1);
        t6 = t6[1];
        t7 = t2[11];
        t8 = arg.get$storage();
        if (2 >= t8.length)
          return H.ioore(t8, 2);
        t8 = t8[2];
        t9 = t2[15];
        t10 = arg.get$storage();
        if (3 >= t10.length)
          return H.ioore(t10, 3);
        t1[3] = t3 * t4 + t5 * t6 + t7 * t8 + t9 * t10[3];
        t10 = t2[3];
        t9 = arg.get$storage();
        if (4 >= t9.length)
          return H.ioore(t9, 4);
        t9 = t9[4];
        t8 = t2[7];
        t7 = arg.get$storage();
        if (5 >= t7.length)
          return H.ioore(t7, 5);
        t7 = t7[5];
        t6 = t2[11];
        t5 = arg.get$storage();
        if (6 >= t5.length)
          return H.ioore(t5, 6);
        t5 = t5[6];
        t4 = t2[15];
        t3 = arg.get$storage();
        if (7 >= t3.length)
          return H.ioore(t3, 7);
        t1[7] = t10 * t9 + t8 * t7 + t6 * t5 + t4 * t3[7];
        t3 = t2[3];
        t4 = arg.get$storage();
        if (8 >= t4.length)
          return H.ioore(t4, 8);
        t4 = t4[8];
        t5 = t2[7];
        t6 = arg.get$storage();
        if (9 >= t6.length)
          return H.ioore(t6, 9);
        t6 = t6[9];
        t7 = t2[11];
        t8 = arg.get$storage();
        if (10 >= t8.length)
          return H.ioore(t8, 10);
        t8 = t8[10];
        t9 = t2[15];
        t10 = arg.get$storage();
        if (11 >= t10.length)
          return H.ioore(t10, 11);
        t1[11] = t3 * t4 + t5 * t6 + t7 * t8 + t9 * t10[11];
        t10 = t2[3];
        t9 = arg.get$storage();
        if (12 >= t9.length)
          return H.ioore(t9, 12);
        t9 = t9[12];
        t8 = t2[7];
        t7 = arg.get$storage();
        if (13 >= t7.length)
          return H.ioore(t7, 13);
        t7 = t7[13];
        t6 = t2[11];
        t5 = arg.get$storage();
        if (14 >= t5.length)
          return H.ioore(t5, 14);
        t5 = t5[14];
        t2 = t2[15];
        t4 = arg.get$storage();
        if (15 >= t4.length)
          return H.ioore(t4, 15);
        t1[15] = t10 * t9 + t8 * t7 + t6 * t5 + t2 * t4[15];
        return new T.Matrix4(t1);
      }
      throw H.wrapException(P.ArgumentError$(arg));
    },
    $add: function(_, arg) {
      var t1, t2, t3, t4;
      t1 = new Float32Array(H._checkLength(16));
      t2 = this.storage;
      t3 = t2[0];
      t4 = arg.get$storage();
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t1[0] = t3 + t4[0];
      t4 = t2[1];
      t3 = arg.get$storage();
      if (1 >= t3.length)
        return H.ioore(t3, 1);
      t1[1] = t4 + t3[1];
      t3 = t2[2];
      t4 = arg.get$storage();
      if (2 >= t4.length)
        return H.ioore(t4, 2);
      t1[2] = t3 + t4[2];
      t4 = t2[3];
      t3 = arg.get$storage();
      if (3 >= t3.length)
        return H.ioore(t3, 3);
      t1[3] = t4 + t3[3];
      t3 = t2[4];
      t4 = arg.get$storage();
      if (4 >= t4.length)
        return H.ioore(t4, 4);
      t1[4] = t3 + t4[4];
      t4 = t2[5];
      t3 = arg.get$storage();
      if (5 >= t3.length)
        return H.ioore(t3, 5);
      t1[5] = t4 + t3[5];
      t3 = t2[6];
      t4 = arg.get$storage();
      if (6 >= t4.length)
        return H.ioore(t4, 6);
      t1[6] = t3 + t4[6];
      t4 = t2[7];
      t3 = arg.get$storage();
      if (7 >= t3.length)
        return H.ioore(t3, 7);
      t1[7] = t4 + t3[7];
      t3 = t2[8];
      t4 = arg.get$storage();
      if (8 >= t4.length)
        return H.ioore(t4, 8);
      t1[8] = t3 + t4[8];
      t4 = t2[9];
      t3 = arg.get$storage();
      if (9 >= t3.length)
        return H.ioore(t3, 9);
      t1[9] = t4 + t3[9];
      t3 = t2[10];
      t4 = arg.get$storage();
      if (10 >= t4.length)
        return H.ioore(t4, 10);
      t1[10] = t3 + t4[10];
      t4 = t2[11];
      t3 = arg.get$storage();
      if (11 >= t3.length)
        return H.ioore(t3, 11);
      t1[11] = t4 + t3[11];
      t3 = t2[12];
      t4 = arg.get$storage();
      if (12 >= t4.length)
        return H.ioore(t4, 12);
      t1[12] = t3 + t4[12];
      t4 = t2[13];
      t3 = arg.get$storage();
      if (13 >= t3.length)
        return H.ioore(t3, 13);
      t1[13] = t4 + t3[13];
      t3 = t2[14];
      t4 = arg.get$storage();
      if (14 >= t4.length)
        return H.ioore(t4, 14);
      t1[14] = t3 + t4[14];
      t2 = t2[15];
      t4 = arg.get$storage();
      if (15 >= t4.length)
        return H.ioore(t4, 15);
      t1[15] = t2 + t4[15];
      return new T.Matrix4(t1);
    },
    $sub: function(_, arg) {
      var t1, t2, t3, t4;
      t1 = new Float32Array(H._checkLength(16));
      t2 = this.storage;
      t3 = t2[0];
      t4 = arg.get$storage();
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t1[0] = t3 - t4[0];
      t4 = t2[1];
      t3 = arg.get$storage();
      if (1 >= t3.length)
        return H.ioore(t3, 1);
      t1[1] = t4 - t3[1];
      t3 = t2[2];
      t4 = arg.get$storage();
      if (2 >= t4.length)
        return H.ioore(t4, 2);
      t1[2] = t3 - t4[2];
      t4 = t2[3];
      t3 = arg.get$storage();
      if (3 >= t3.length)
        return H.ioore(t3, 3);
      t1[3] = t4 - t3[3];
      t3 = t2[4];
      t4 = arg.get$storage();
      if (4 >= t4.length)
        return H.ioore(t4, 4);
      t1[4] = t3 - t4[4];
      t4 = t2[5];
      t3 = arg.get$storage();
      if (5 >= t3.length)
        return H.ioore(t3, 5);
      t1[5] = t4 - t3[5];
      t3 = t2[6];
      t4 = arg.get$storage();
      if (6 >= t4.length)
        return H.ioore(t4, 6);
      t1[6] = t3 - t4[6];
      t4 = t2[7];
      t3 = arg.get$storage();
      if (7 >= t3.length)
        return H.ioore(t3, 7);
      t1[7] = t4 - t3[7];
      t3 = t2[8];
      t4 = arg.get$storage();
      if (8 >= t4.length)
        return H.ioore(t4, 8);
      t1[8] = t3 - t4[8];
      t4 = t2[9];
      t3 = arg.get$storage();
      if (9 >= t3.length)
        return H.ioore(t3, 9);
      t1[9] = t4 - t3[9];
      t3 = t2[10];
      t4 = arg.get$storage();
      if (10 >= t4.length)
        return H.ioore(t4, 10);
      t1[10] = t3 - t4[10];
      t4 = t2[11];
      t3 = arg.get$storage();
      if (11 >= t3.length)
        return H.ioore(t3, 11);
      t1[11] = t4 - t3[11];
      t3 = t2[12];
      t4 = arg.get$storage();
      if (12 >= t4.length)
        return H.ioore(t4, 12);
      t1[12] = t3 - t4[12];
      t4 = t2[13];
      t3 = arg.get$storage();
      if (13 >= t3.length)
        return H.ioore(t3, 13);
      t1[13] = t4 - t3[13];
      t3 = t2[14];
      t4 = arg.get$storage();
      if (14 >= t4.length)
        return H.ioore(t4, 14);
      t1[14] = t3 - t4[14];
      t2 = t2[15];
      t4 = arg.get$storage();
      if (15 >= t4.length)
        return H.ioore(t4, 15);
      t1[15] = t2 - t4[15];
      return new T.Matrix4(t1);
    },
    translate$3: function(_, x, y, z) {
      var t1, tx, ty, tz, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17;
      t1 = J.getInterceptor(x);
      if (!!t1.$isVector3 || false) {
        tx = t1.get$x(x);
        ty = t1.get$y(x);
        tz = t1.get$z(x);
      } else {
        tz = z;
        ty = y;
        tx = x;
      }
      t1 = this.storage;
      t2 = t1[0];
      if (typeof tx !== "number")
        return H.iae(tx);
      t3 = t1[4];
      t4 = t1[8];
      t5 = t1[12];
      t6 = t1[1];
      t7 = t1[5];
      t8 = t1[9];
      t9 = t1[13];
      t10 = t1[2];
      t11 = t1[6];
      t12 = t1[10];
      t13 = t1[14];
      t14 = t1[3];
      t15 = t1[7];
      t16 = t1[11];
      t17 = t1[15];
      t1[12] = t2 * tx + t3 * ty + t4 * tz + t5;
      t1[13] = t6 * tx + t7 * ty + t8 * tz + t9;
      t1[14] = t10 * tx + t11 * ty + t12 * tz + t13;
      t1[15] = t14 * tx + t15 * ty + t16 * tz + t17;
      return this;
    },
    translate$1: function($receiver, x) {
      return this.translate$3($receiver, x, 0, 0);
    },
    rotate$2: function(_, axis, angle) {
      var len, t1, x, y, z, c, s, $C, m11, m12, t2, m13, m21, m22, m23, m31, m32, m33, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13;
      len = axis.get$length(axis);
      t1 = axis.storage;
      x = t1[0] / len;
      y = t1[1] / len;
      z = t1[2] / len;
      c = Math.cos(H.checkNum(angle));
      s = Math.sin(H.checkNum(angle));
      $C = 1 - c;
      m11 = x * x * $C + c;
      t1 = z * s;
      m12 = x * y * $C - t1;
      t2 = y * s;
      m13 = x * z * $C + t2;
      m21 = y * x * $C + t1;
      m22 = y * y * $C + c;
      t1 = x * s;
      m23 = y * z * $C - t1;
      m31 = z * x * $C - t2;
      m32 = z * y * $C + t1;
      m33 = z * z * $C + c;
      t1 = this.storage;
      t2 = t1[0];
      t3 = t1[4];
      t4 = t1[8];
      t5 = t1[1];
      t6 = t1[5];
      t7 = t1[9];
      t8 = t1[2];
      t9 = t1[6];
      t10 = t1[10];
      t11 = t1[3];
      t12 = t1[7];
      t13 = t1[11];
      t1[0] = t2 * m11 + t3 * m21 + t4 * m31;
      t1[1] = t5 * m11 + t6 * m21 + t7 * m31;
      t1[2] = t8 * m11 + t9 * m21 + t10 * m31;
      t1[3] = t11 * m11 + t12 * m21 + t13 * m31;
      t1[4] = t2 * m12 + t3 * m22 + t4 * m32;
      t1[5] = t5 * m12 + t6 * m22 + t7 * m32;
      t1[6] = t8 * m12 + t9 * m22 + t10 * m32;
      t1[7] = t11 * m12 + t12 * m22 + t13 * m32;
      t1[8] = t2 * m13 + t3 * m23 + t4 * m33;
      t1[9] = t5 * m13 + t6 * m23 + t7 * m33;
      t1[10] = t8 * m13 + t9 * m23 + t10 * m33;
      t1[11] = t11 * m13 + t12 * m23 + t13 * m33;
      return this;
    },
    setIdentity$0: function() {
      var t1 = this.storage;
      t1[0] = 1;
      t1[1] = 0;
      t1[2] = 0;
      t1[3] = 0;
      t1[4] = 0;
      t1[5] = 1;
      t1[6] = 0;
      t1[7] = 0;
      t1[8] = 0;
      t1[9] = 0;
      t1[10] = 1;
      t1[11] = 0;
      t1[12] = 0;
      t1[13] = 0;
      t1[14] = 0;
      t1[15] = 1;
      return this;
    },
    add$1: function(_, o) {
      var t1 = this.storage;
      t1[0] = C.JSNumber_methods.$add(t1[0], o.get$storage().$index(0, 0));
      t1[1] = C.JSNumber_methods.$add(t1[1], o.get$storage().$index(0, 1));
      t1[2] = C.JSNumber_methods.$add(t1[2], o.get$storage().$index(0, 2));
      t1[3] = C.JSNumber_methods.$add(t1[3], o.get$storage().$index(0, 3));
      t1[4] = C.JSNumber_methods.$add(t1[4], o.get$storage().$index(0, 4));
      t1[5] = C.JSNumber_methods.$add(t1[5], o.get$storage().$index(0, 5));
      t1[6] = C.JSNumber_methods.$add(t1[6], o.get$storage().$index(0, 6));
      t1[7] = C.JSNumber_methods.$add(t1[7], o.get$storage().$index(0, 7));
      t1[8] = C.JSNumber_methods.$add(t1[8], o.get$storage().$index(0, 8));
      t1[9] = C.JSNumber_methods.$add(t1[9], o.get$storage().$index(0, 9));
      t1[10] = C.JSNumber_methods.$add(t1[10], o.get$storage().$index(0, 10));
      t1[11] = C.JSNumber_methods.$add(t1[11], o.get$storage().$index(0, 11));
      t1[12] = C.JSNumber_methods.$add(t1[12], o.get$storage().$index(0, 12));
      t1[13] = C.JSNumber_methods.$add(t1[13], o.get$storage().$index(0, 13));
      t1[14] = C.JSNumber_methods.$add(t1[14], o.get$storage().$index(0, 14));
      t1[15] = C.JSNumber_methods.$add(t1[15], o.get$storage().$index(0, 15));
      return this;
    },
    copyIntoArray$2: function(array, offset) {
      var t1, t2, t3;
      t1 = offset + 15;
      t2 = this.storage;
      t3 = t2[15];
      if (t1 >= 16)
        return H.ioore(array, t1);
      array[t1] = t3;
      t3 = offset + 14;
      t1 = t2[14];
      if (t3 >= 16)
        return H.ioore(array, t3);
      array[t3] = t1;
      t1 = offset + 13;
      t3 = t2[13];
      if (t1 >= 16)
        return H.ioore(array, t1);
      array[t1] = t3;
      t3 = offset + 12;
      t1 = t2[12];
      if (t3 >= 16)
        return H.ioore(array, t3);
      array[t3] = t1;
      t1 = offset + 11;
      t3 = t2[11];
      if (t1 >= 16)
        return H.ioore(array, t1);
      array[t1] = t3;
      t3 = offset + 10;
      t1 = t2[10];
      if (t3 >= 16)
        return H.ioore(array, t3);
      array[t3] = t1;
      t1 = offset + 9;
      t3 = t2[9];
      if (t1 >= 16)
        return H.ioore(array, t1);
      array[t1] = t3;
      t3 = offset + 8;
      t1 = t2[8];
      if (t3 >= 16)
        return H.ioore(array, t3);
      array[t3] = t1;
      t1 = offset + 7;
      t3 = t2[7];
      if (t1 >= 16)
        return H.ioore(array, t1);
      array[t1] = t3;
      t3 = offset + 6;
      t1 = t2[6];
      if (t3 >= 16)
        return H.ioore(array, t3);
      array[t3] = t1;
      t1 = offset + 5;
      t3 = t2[5];
      if (t1 >= 16)
        return H.ioore(array, t1);
      array[t1] = t3;
      t3 = offset + 4;
      t1 = t2[4];
      if (t3 >= 16)
        return H.ioore(array, t3);
      array[t3] = t1;
      t1 = offset + 3;
      t3 = t2[3];
      if (t1 >= 16)
        return H.ioore(array, t1);
      array[t1] = t3;
      t3 = offset + 2;
      t1 = t2[2];
      if (t3 >= 16)
        return H.ioore(array, t3);
      array[t3] = t1;
      t1 = offset + 1;
      t3 = t2[1];
      if (t1 >= 16)
        return H.ioore(array, t1);
      array[t1] = t3;
      t2 = t2[0];
      if (offset >= 16)
        return H.ioore(array, offset);
      array[offset] = t2;
    },
    copyIntoArray$1: function(array) {
      return this.copyIntoArray$2(array, 0);
    }
  },
  Quaternion: {
    "^": "Object;storage<",
    get$x: function(_) {
      return this.storage[0];
    },
    get$y: function(_) {
      return this.storage[1];
    },
    get$z: function(_) {
      return this.storage[2];
    },
    set$x: function(_, x) {
      this.storage[0] = x;
    },
    set$y: function(_, y) {
      this.storage[1] = y;
    },
    setAxisAngle$2: function(axis, radians) {
      var len, t1, halfSin, t2, t3;
      len = axis.get$length(axis);
      if (len === 0)
        return;
      t1 = radians * 0.5;
      halfSin = Math.sin(H.checkNum(t1)) / len;
      t2 = this.storage;
      t3 = axis.storage;
      t2[0] = t3[0] * halfSin;
      t2[1] = t3[1] * halfSin;
      t2[2] = t3[2] * halfSin;
      t2[3] = Math.cos(H.checkNum(t1));
    },
    normalize$0: function() {
      var l, t1;
      l = Math.sqrt(H.checkNum(this.get$length2()));
      if (l === 0)
        return this;
      l = 1 / l;
      t1 = this.storage;
      t1[3] = t1[3] * l;
      t1[2] = t1[2] * l;
      t1[1] = t1[1] * l;
      t1[0] = t1[0] * l;
      return this;
    },
    get$length2: function() {
      var t1, _x, _y, _z, _w;
      t1 = this.storage;
      _x = t1[0];
      _y = t1[1];
      _z = t1[2];
      _w = t1[3];
      return _x * _x + _y * _y + _z * _z + _w * _w;
    },
    get$length: function(_) {
      return Math.sqrt(H.checkNum(this.get$length2()));
    },
    $mul: function(_, other) {
      var t1, _w, _z, _y, _x, ow, oz, oy, ox;
      t1 = this.storage;
      _w = t1[3];
      _z = t1[2];
      _y = t1[1];
      _x = t1[0];
      t1 = other.get$storage();
      if (3 >= t1.length)
        return H.ioore(t1, 3);
      ow = t1[3];
      t1 = other.get$storage();
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      oz = t1[2];
      t1 = other.get$storage();
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      oy = t1[1];
      t1 = other.get$storage();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      ox = t1[0];
      return T.Quaternion$(_w * ox + _x * ow + _y * oz - _z * oy, _w * oy + _y * ow + _z * ox - _x * oz, _w * oz + _z * ow + _x * oy - _y * ox, _w * ow - _x * ox - _y * oy - _z * oz);
    },
    $add: function(_, other) {
      var t1, t2, t3, t4, t5, t6, t7, t8;
      t1 = this.storage;
      t2 = t1[0];
      t3 = other.get$storage();
      if (0 >= t3.length)
        return H.ioore(t3, 0);
      t3 = t3[0];
      t4 = t1[1];
      t5 = other.get$storage();
      if (1 >= t5.length)
        return H.ioore(t5, 1);
      t5 = t5[1];
      t6 = t1[2];
      t7 = other.get$storage();
      if (2 >= t7.length)
        return H.ioore(t7, 2);
      t7 = t7[2];
      t1 = t1[3];
      t8 = other.get$storage();
      if (3 >= t8.length)
        return H.ioore(t8, 3);
      return T.Quaternion$(t2 + t3, t4 + t5, t6 + t7, t1 + t8[3]);
    },
    $sub: function(_, other) {
      var t1, t2, t3, t4, t5, t6, t7, t8;
      t1 = this.storage;
      t2 = t1[0];
      t3 = other.get$storage();
      if (0 >= t3.length)
        return H.ioore(t3, 0);
      t3 = t3[0];
      t4 = t1[1];
      t5 = other.get$storage();
      if (1 >= t5.length)
        return H.ioore(t5, 1);
      t5 = t5[1];
      t6 = t1[2];
      t7 = other.get$storage();
      if (2 >= t7.length)
        return H.ioore(t7, 2);
      t7 = t7[2];
      t1 = t1[3];
      t8 = other.get$storage();
      if (3 >= t8.length)
        return H.ioore(t8, 3);
      return T.Quaternion$(t2 - t3, t4 - t5, t6 - t7, t1 - t8[3]);
    },
    $index: function(_, i) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 4)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, arg) {
      var t1 = this.storage;
      if (i >= 4)
        return H.ioore(t1, i);
      t1[i] = arg;
    },
    toString$0: function(_) {
      var t1 = this.storage;
      return H.S(t1[0]) + ", " + H.S(t1[1]) + ", " + H.S(t1[2]) + " @ " + H.S(t1[3]);
    },
    Quaternion$identity$0: function() {
      this.storage[3] = 1;
    },
    Quaternion$4: function(x, y, z, w) {
      var t1 = this.storage;
      t1[0] = x;
      t1[1] = y;
      t1[2] = z;
      t1[3] = w;
    },
    static: {Quaternion$: function(x, y, z, w) {
        var t1 = new T.Quaternion(new Float32Array(H._checkLength(4)));
        t1.Quaternion$4(x, y, z, w);
        return t1;
      }, Quaternion$identity: function() {
        var t1 = new T.Quaternion(new Float32Array(H._checkLength(4)));
        t1.Quaternion$identity$0();
        return t1;
      }}
  },
  Vector2: {
    "^": "Object;storage<",
    setFrom$1: function(other) {
      var t1, t2;
      t1 = this.storage;
      t2 = other.storage;
      t1[1] = t2[1];
      t1[0] = t2[0];
      return this;
    },
    toString$0: function(_) {
      var t1 = this.storage;
      return "[" + H.S(t1[0]) + "," + H.S(t1[1]) + "]";
    },
    $negate: function(_) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = t1[0];
      t1 = t1[1];
      t3 = new Float32Array(H._checkLength(2));
      t3[0] = -t2;
      t3[1] = -t1;
      return new T.Vector2(t3);
    },
    $sub: function(_, other) {
      var t1, t2, t3, t4, t5;
      t1 = this.storage;
      t2 = t1[0];
      t3 = other.get$storage();
      if (0 >= t3.length)
        return H.ioore(t3, 0);
      t3 = t3[0];
      t1 = t1[1];
      t4 = other.get$storage();
      if (1 >= t4.length)
        return H.ioore(t4, 1);
      t4 = t4[1];
      t5 = new Float32Array(H._checkLength(2));
      t5[0] = t2 - t3;
      t5[1] = t1 - t4;
      return new T.Vector2(t5);
    },
    $add: function(_, other) {
      var t1, t2, t3, t4, t5;
      t1 = this.storage;
      t2 = t1[0];
      t3 = other.get$storage();
      if (0 >= t3.length)
        return H.ioore(t3, 0);
      t3 = t3[0];
      t1 = t1[1];
      t4 = other.get$storage();
      if (1 >= t4.length)
        return H.ioore(t4, 1);
      t4 = t4[1];
      t5 = new Float32Array(H._checkLength(2));
      t5[0] = t2 + t3;
      t5[1] = t1 + t4;
      return new T.Vector2(t5);
    },
    $div: function(_, scale) {
      var o, t1, t2, t3;
      if (typeof scale !== "number")
        return H.iae(scale);
      o = 1 / scale;
      t1 = this.storage;
      t2 = t1[0];
      t1 = t1[1];
      t3 = new Float32Array(H._checkLength(2));
      t3[0] = t2 * o;
      t3[1] = t1 * o;
      return new T.Vector2(t3);
    },
    $mul: function(_, scale) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = t1[0];
      if (typeof scale !== "number")
        return H.iae(scale);
      t1 = t1[1];
      t3 = new Float32Array(H._checkLength(2));
      t3[0] = t2 * scale;
      t3[1] = t1 * scale;
      return new T.Vector2(t3);
    },
    $index: function(_, i) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 2)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, v) {
      var t1 = this.storage;
      if (i >= 2)
        return H.ioore(t1, i);
      t1[i] = v;
    },
    get$length: function(_) {
      var t1, t2;
      t1 = this.storage;
      t2 = t1[0];
      t1 = t1[1];
      return Math.sqrt(H.checkNum(t2 * t2 + t1 * t1));
    },
    get$length2: function() {
      var t1, t2;
      t1 = this.storage;
      t2 = t1[0];
      t1 = t1[1];
      return t2 * t2 + t1 * t1;
    },
    normalize$0: function() {
      var l, t1;
      l = this.get$length(this);
      if (l === 0)
        return this;
      l = 1 / l;
      t1 = this.storage;
      t1[0] = t1[0] * l;
      t1[1] = t1[1] * l;
      return this;
    },
    normalized$0: function() {
      var t1 = new T.Vector2(new Float32Array(H._checkLength(2)));
      t1.setFrom$1(this);
      return t1.normalize$0();
    },
    add$1: function(_, arg) {
      var t1 = this.storage;
      t1[0] = C.JSNumber_methods.$add(t1[0], arg.get$storage().$index(0, 0));
      t1[1] = C.JSNumber_methods.$add(t1[1], arg.get$storage().$index(0, 1));
      return this;
    },
    sub$1: function(arg) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = t1[0];
      t3 = arg.get$storage();
      if (0 >= t3.length)
        return H.ioore(t3, 0);
      t1[0] = t2 - t3[0];
      t3 = t1[1];
      t2 = arg.get$storage();
      if (1 >= t2.length)
        return H.ioore(t2, 1);
      t1[1] = t3 - t2[1];
      return this;
    },
    set$x: function(_, arg) {
      this.storage[0] = arg;
      return arg;
    },
    set$y: function(_, arg) {
      this.storage[1] = arg;
      return arg;
    },
    get$x: function(_) {
      return this.storage[0];
    },
    get$y: function(_) {
      return this.storage[1];
    }
  },
  Vector3: {
    "^": "Object;storage<",
    setValues$3: function(x_, y_, z_) {
      var t1 = this.storage;
      t1[0] = x_;
      t1[1] = y_;
      t1[2] = z_;
      return this;
    },
    setFrom$1: function(other) {
      var t1, t2;
      t1 = this.storage;
      t2 = other.storage;
      t1[0] = t2[0];
      t1[1] = t2[1];
      t1[2] = t2[2];
      return this;
    },
    toString$0: function(_) {
      var t1 = this.storage;
      return "[" + H.S(t1[0]) + "," + H.S(t1[1]) + "," + H.S(t1[2]) + "]";
    },
    $sub: function(_, other) {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = this.storage;
      t2 = t1[0];
      t3 = other.get$storage();
      if (0 >= t3.length)
        return H.ioore(t3, 0);
      t3 = t3[0];
      t4 = t1[1];
      t5 = other.get$storage();
      if (1 >= t5.length)
        return H.ioore(t5, 1);
      t5 = t5[1];
      t1 = t1[2];
      t6 = other.get$storage();
      if (2 >= t6.length)
        return H.ioore(t6, 2);
      t6 = t6[2];
      t7 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t7.setValues$3(t2 - t3, t4 - t5, t1 - t6);
      return t7;
    },
    $add: function(_, other) {
      var t1, t2, t3, t4, t5, t6, t7;
      t1 = this.storage;
      t2 = t1[0];
      t3 = other.get$storage();
      if (0 >= t3.length)
        return H.ioore(t3, 0);
      t3 = t3[0];
      t4 = t1[1];
      t5 = other.get$storage();
      if (1 >= t5.length)
        return H.ioore(t5, 1);
      t5 = t5[1];
      t1 = t1[2];
      t6 = other.get$storage();
      if (2 >= t6.length)
        return H.ioore(t6, 2);
      t6 = t6[2];
      t7 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t7.setValues$3(t2 + t3, t4 + t5, t1 + t6);
      return t7;
    },
    $div: function(_, scale) {
      var o, t1, t2, t3, t4;
      if (typeof scale !== "number")
        return H.iae(scale);
      o = 1 / scale;
      t1 = this.storage;
      t2 = t1[0];
      t3 = t1[1];
      t1 = t1[2];
      t4 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t4.setValues$3(t2 * o, t3 * o, t1 * o);
      return t4;
    },
    $mul: function(_, scale) {
      var t1, t2, t3, t4;
      t1 = this.storage;
      t2 = t1[0];
      if (typeof scale !== "number")
        return H.iae(scale);
      t3 = t1[1];
      t1 = t1[2];
      t4 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t4.setValues$3(t2 * scale, t3 * scale, t1 * scale);
      return t4;
    },
    $index: function(_, i) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 3)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, v) {
      var t1 = this.storage;
      if (i >= 3)
        return H.ioore(t1, i);
      t1[i] = v;
    },
    get$length: function(_) {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = t1[0];
      t3 = t1[1];
      t1 = t1[2];
      return Math.sqrt(H.checkNum(t2 * t2 + t3 * t3 + t1 * t1));
    },
    get$length2: function() {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = t1[0];
      t3 = t1[1];
      t1 = t1[2];
      return t2 * t2 + t3 * t3 + t1 * t1;
    },
    normalize$0: function() {
      var l, t1;
      l = this.get$length(this);
      if (l === 0)
        return this;
      l = 1 / l;
      t1 = this.storage;
      t1[0] = t1[0] * l;
      t1[1] = t1[1] * l;
      t1[2] = t1[2] * l;
      return this;
    },
    normalized$0: function() {
      var t1 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t1.setFrom$1(this);
      return t1.normalize$0();
    },
    add$1: function(_, arg) {
      var t1 = this.storage;
      t1[0] = C.JSNumber_methods.$add(t1[0], arg.get$storage().$index(0, 0));
      t1[1] = C.JSNumber_methods.$add(t1[1], arg.get$storage().$index(0, 1));
      t1[2] = C.JSNumber_methods.$add(t1[2], arg.get$storage().$index(0, 2));
      return this;
    },
    set$x: function(_, arg) {
      this.storage[0] = arg;
      return arg;
    },
    set$y: function(_, arg) {
      this.storage[1] = arg;
      return arg;
    },
    get$xy: function() {
      var t1, t2, t3;
      t1 = this.storage;
      t2 = t1[0];
      t1 = t1[1];
      t3 = new Float32Array(H._checkLength(2));
      t3[0] = t2;
      t3[1] = t1;
      return new T.Vector2(t3);
    },
    get$x: function(_) {
      return this.storage[0];
    },
    get$y: function(_) {
      return this.storage[1];
    },
    get$z: function(_) {
      return this.storage[2];
    }
  },
  Vector4: {
    "^": "Object;storage<",
    setValues$4: function(x_, y_, z_, w_) {
      var t1 = this.storage;
      t1[3] = w_;
      t1[2] = z_;
      t1[1] = y_;
      t1[0] = x_;
      return this;
    },
    toString$0: function(_) {
      var t1 = this.storage;
      return H.S(t1[0]) + "," + H.S(t1[1]) + "," + H.S(t1[2]) + "," + H.S(t1[3]);
    },
    $sub: function(_, other) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9;
      t1 = this.storage;
      t2 = t1[0];
      t3 = other.get$storage();
      if (0 >= t3.length)
        return H.ioore(t3, 0);
      t3 = t3[0];
      t4 = t1[1];
      t5 = other.get$storage();
      if (1 >= t5.length)
        return H.ioore(t5, 1);
      t5 = t5[1];
      t6 = t1[2];
      t7 = other.get$storage();
      if (2 >= t7.length)
        return H.ioore(t7, 2);
      t7 = t7[2];
      t1 = t1[3];
      t8 = other.get$storage();
      if (3 >= t8.length)
        return H.ioore(t8, 3);
      t8 = t8[3];
      t9 = new T.Vector4(new Float32Array(H._checkLength(4)));
      t9.setValues$4(t2 - t3, t4 - t5, t6 - t7, t1 - t8);
      return t9;
    },
    $add: function(_, other) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9;
      t1 = this.storage;
      t2 = t1[0];
      t3 = other.get$storage();
      if (0 >= t3.length)
        return H.ioore(t3, 0);
      t3 = t3[0];
      t4 = t1[1];
      t5 = other.get$storage();
      if (1 >= t5.length)
        return H.ioore(t5, 1);
      t5 = t5[1];
      t6 = t1[2];
      t7 = other.get$storage();
      if (2 >= t7.length)
        return H.ioore(t7, 2);
      t7 = t7[2];
      t1 = t1[3];
      t8 = other.get$storage();
      if (3 >= t8.length)
        return H.ioore(t8, 3);
      t8 = t8[3];
      t9 = new T.Vector4(new Float32Array(H._checkLength(4)));
      t9.setValues$4(t2 + t3, t4 + t5, t6 + t7, t1 + t8);
      return t9;
    },
    $div: function(_, scale) {
      var o, t1, t2, t3, t4, t5;
      if (typeof scale !== "number")
        return H.iae(scale);
      o = 1 / scale;
      t1 = this.storage;
      t2 = t1[0];
      t3 = t1[1];
      t4 = t1[2];
      t1 = t1[3];
      t5 = new T.Vector4(new Float32Array(H._checkLength(4)));
      t5.setValues$4(t2 * o, t3 * o, t4 * o, t1 * o);
      return t5;
    },
    $mul: function(_, scale) {
      var t1, t2, t3, t4, t5;
      t1 = this.storage;
      t2 = t1[0];
      if (typeof scale !== "number")
        return H.iae(scale);
      t3 = t1[1];
      t4 = t1[2];
      t1 = t1[3];
      t5 = new T.Vector4(new Float32Array(H._checkLength(4)));
      t5.setValues$4(t2 * scale, t3 * scale, t4 * scale, t1 * scale);
      return t5;
    },
    $index: function(_, i) {
      var t1 = this.storage;
      if (i >>> 0 !== i || i >= 4)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, v) {
      var t1 = this.storage;
      if (i >= 4)
        return H.ioore(t1, i);
      t1[i] = v;
    },
    get$length: function(_) {
      var t1, t2, t3, t4;
      t1 = this.storage;
      t2 = t1[0];
      t3 = t1[1];
      t4 = t1[2];
      t1 = t1[3];
      return Math.sqrt(H.checkNum(t2 * t2 + t3 * t3 + t4 * t4 + t1 * t1));
    },
    normalize$0: function() {
      var l, t1;
      l = this.get$length(this);
      if (l === 0)
        return this;
      l = 1 / l;
      t1 = this.storage;
      t1[0] = t1[0] * l;
      t1[1] = t1[1] * l;
      t1[2] = t1[2] * l;
      t1[3] = t1[3] * l;
      return this;
    },
    add$1: function(_, arg) {
      var t1 = this.storage;
      t1[0] = C.JSNumber_methods.$add(t1[0], arg.get$storage().$index(0, 0));
      t1[1] = C.JSNumber_methods.$add(t1[1], arg.get$storage().$index(0, 1));
      t1[2] = C.JSNumber_methods.$add(t1[2], arg.get$storage().$index(0, 2));
      t1[3] = C.JSNumber_methods.$add(t1[3], arg.get$storage().$index(0, 3));
      return this;
    },
    set$x: function(_, arg) {
      this.storage[0] = arg;
      return arg;
    },
    set$y: function(_, arg) {
      this.storage[1] = arg;
      return arg;
    },
    get$xyz: function() {
      var t1, t2, t3, t4;
      t1 = this.storage;
      t2 = t1[0];
      t3 = t1[1];
      t1 = t1[2];
      t4 = new T.Vector3(new Float32Array(H._checkLength(3)));
      t4.setValues$3(t2, t3, t1);
      return t4;
    },
    get$x: function(_) {
      return this.storage[0];
    },
    get$y: function(_) {
      return this.storage[1];
    },
    get$z: function(_) {
      return this.storage[2];
    }
  }
}],
];
parseReflectionData(dart);
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return J.getInterceptor$ns(receiver).$add(receiver, a0);
};
J.$div$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver / a0;
  return J.getInterceptor$n(receiver).$div(receiver, a0);
};
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return J.getInterceptor$n(receiver).$ge(receiver, a0);
};
J.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return J.getInterceptor$n(receiver).$gt(receiver, a0);
};
J.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return J.getInterceptor$asx(receiver).$index(receiver, a0);
};
J.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return J.getInterceptor$n(receiver).$le(receiver, a0);
};
J.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return J.getInterceptor$n(receiver).$lt(receiver, a0);
};
J.$mul$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return J.getInterceptor$ns(receiver).$mul(receiver, a0);
};
J.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return J.getInterceptor$n(receiver).$sub(receiver, a0);
};
J._addEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver)._addEventListener$3(receiver, a0, a1, a2);
};
J._removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver)._removeEventListener$3(receiver, a0, a1, a2);
};
J.add$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).add$1(receiver, a0);
};
J.bindBuffer$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).bindBuffer$2(receiver, a0, a1);
};
J.bindFramebuffer$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).bindFramebuffer$2(receiver, a0, a1);
};
J.bindRenderbuffer$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).bindRenderbuffer$2(receiver, a0, a1);
};
J.bindTexture$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).bindTexture$2(receiver, a0, a1);
};
J.blendFunc$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).blendFunc$2(receiver, a0, a1);
};
J.bufferDataTyped$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).bufferDataTyped$3(receiver, a0, a1, a2);
};
J.clear$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).clear$1(receiver, a0);
};
J.clearColor$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).clearColor$4(receiver, a0, a1, a2, a3);
};
J.close$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).close$0(receiver);
};
J.compareTo$1$ns = function(receiver, a0) {
  return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
J.contains$1$asx = function(receiver, a0) {
  return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
};
J.contains$2$asx = function(receiver, a0, a1) {
  return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
};
J.createBuffer$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createBuffer$0(receiver);
};
J.createFramebuffer$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createFramebuffer$0(receiver);
};
J.createRenderbuffer$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createRenderbuffer$0(receiver);
};
J.createShader$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).createShader$1(receiver, a0);
};
J.createTexture$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createTexture$0(receiver);
};
J.depthMask$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).depthMask$1(receiver, a0);
};
J.elementAt$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
J.enable$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).enable$1(receiver, a0);
};
J.endsWith$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).endsWith$1(receiver, a0);
};
J.floor$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).floor$0(receiver);
};
J.floorToDouble$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).floorToDouble$0(receiver);
};
J.forEach$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
J.framebufferRenderbuffer$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).framebufferRenderbuffer$4(receiver, a0, a1, a2, a3);
};
J.framebufferTexture2D$5$x = function(receiver, a0, a1, a2, a3, a4) {
  return J.getInterceptor$x(receiver).framebufferTexture2D$5(receiver, a0, a1, a2, a3, a4);
};
J.get$changedTouches$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$changedTouches(receiver);
};
J.get$classes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$classes(receiver);
};
J.get$error$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$error(receiver);
};
J.get$first$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$first(receiver);
};
J.get$hashCode$ = function(receiver) {
  return J.getInterceptor(receiver).get$hashCode(receiver);
};
J.get$height$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$height(receiver);
};
J.get$identifier$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$identifier(receiver);
};
J.get$iterator$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$iterator(receiver);
};
J.get$length$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$length(receiver);
};
J.get$onClick$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onClick(receiver);
};
J.get$points$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$points(receiver);
};
J.get$responseText$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$responseText(receiver);
};
J.get$type$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$type(receiver);
};
J.get$width$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$width(receiver);
};
J.get$x$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$x(receiver);
};
J.get$y$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$y(receiver);
};
J.getAttribLocation$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).getAttribLocation$2(receiver, a0, a1);
};
J.getContext$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getContext$1(receiver, a0);
};
J.getUniformLocation$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).getUniformLocation$2(receiver, a0, a1);
};
J.map$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).map$1(receiver, a0);
};
J.open$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).open$0(receiver);
};
J.preventDefault$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).preventDefault$0(receiver);
};
J.readPixels$7$x = function(receiver, a0, a1, a2, a3, a4, a5, a6) {
  return J.getInterceptor$x(receiver).readPixels$7(receiver, a0, a1, a2, a3, a4, a5, a6);
};
J.remove$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).remove$1(receiver, a0);
};
J.renderbufferStorage$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).renderbufferStorage$4(receiver, a0, a1, a2, a3);
};
J.round$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).round$0(receiver);
};
J.send$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).send$1(receiver, a0);
};
J.set$display$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$display(receiver, value);
};
J.set$height$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$height(receiver, value);
};
J.set$left$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$left(receiver, value);
};
J.set$marginLeft$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$marginLeft(receiver, value);
};
J.set$marginTop$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$marginTop(receiver, value);
};
J.set$top$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$top(receiver, value);
};
J.set$visibility$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$visibility(receiver, value);
};
J.set$width$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$width(receiver, value);
};
J.split$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).split$1(receiver, a0);
};
J.texImage2DImage$6$x = function(receiver, a0, a1, a2, a3, a4, a5) {
  return J.getInterceptor$x(receiver).texImage2DImage$6(receiver, a0, a1, a2, a3, a4, a5);
};
J.texImage2DTyped$9$x = function(receiver, a0, a1, a2, a3, a4, a5, a6, a7, a8) {
  return J.getInterceptor$x(receiver).texImage2DTyped$9(receiver, a0, a1, a2, a3, a4, a5, a6, a7, a8);
};
J.texParameteri$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).texParameteri$3(receiver, a0, a1, a2);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
J.trim$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).trim$0(receiver);
};
J.uniform2f$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).uniform2f$3(receiver, a0, a1, a2);
};
J.uniform3f$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).uniform3f$4(receiver, a0, a1, a2, a3);
};
J.uniformMatrix3fv$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).uniformMatrix3fv$3(receiver, a0, a1, a2);
};
J.useProgram$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).useProgram$1(receiver, a0);
};
J.viewport$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver).viewport$4(receiver, a0, a1, a2, a3);
};
C.HttpRequest_methods = W.HttpRequest.prototype;
C.JSArray_methods = J.JSArray.prototype;
C.JSDouble_methods = J.JSDouble.prototype;
C.JSInt_methods = J.JSInt.prototype;
C.JSNumber_methods = J.JSNumber.prototype;
C.JSString_methods = J.JSString.prototype;
C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
C.WheelEvent_methods = W.WheelEvent.prototype;
C.Window_methods = W.Window.prototype;
C.C_DynamicRuntimeType = new H.DynamicRuntimeType();
C.C_OutOfMemoryError = new P.OutOfMemoryError();
C.C__DelayedDone = new P._DelayedDone();
C.C__JSRandom = new P._JSRandom();
C.C__RootZone = new P._RootZone();
C.Directions_DOWN = new K.Directions("DOWN");
C.Directions_LEFT = new K.Directions("LEFT");
C.Directions_RIGHT = new K.Directions("RIGHT");
C.Directions_UP = new K.Directions("UP");
C.Duration_0 = new P.Duration(0);
C.EventStreamProvider_click = new W.EventStreamProvider("click");
C.EventStreamProvider_deviceorientation = new W.EventStreamProvider("deviceorientation");
C.EventStreamProvider_error = new W.EventStreamProvider("error");
C.EventStreamProvider_keydown = new W.EventStreamProvider("keydown");
C.EventStreamProvider_keyup = new W.EventStreamProvider("keyup");
C.EventStreamProvider_load = new W.EventStreamProvider("load");
C.EventStreamProvider_load0 = new W.EventStreamProvider("load");
C.EventStreamProvider_mousedown = new W.EventStreamProvider("mousedown");
C.EventStreamProvider_mousemove = new W.EventStreamProvider("mousemove");
C.EventStreamProvider_mouseup = new W.EventStreamProvider("mouseup");
C.EventStreamProvider_mousewheel = new W.EventStreamProvider("mousewheel");
C.EventStreamProvider_pointerlockchange = new W.EventStreamProvider("pointerlockchange");
C.EventStreamProvider_resize = new W.EventStreamProvider("resize");
C.EventStreamProvider_touchcancel = new W.EventStreamProvider("touchcancel");
C.EventStreamProvider_touchend = new W.EventStreamProvider("touchend");
C.EventStreamProvider_touchmove = new W.EventStreamProvider("touchmove");
C.EventStreamProvider_touchstart = new W.EventStreamProvider("touchstart");
C.EventStreamProvider_webkitfullscreenchange = new W.EventStreamProvider("webkitfullscreenchange");
C.EventStreamProvider_webkitfullscreenerror = new W.EventStreamProvider("webkitfullscreenerror");
C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
C.JS_CONST_4hp = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
C.JS_CONST_8ZY = function getTagFallback(o) {
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.name;
    if (typeof name == "string" &&
        name.length > 2 &&
        name !== "Object" &&
        name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
C.JS_CONST_QJm = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
C.JS_CONST_gkc = function() {
  function typeNameInChrome(o) {
    var constructor = o.constructor;
    if (constructor) {
      var name = constructor.name;
      if (name) return name;
    }
    var s = Object.prototype.toString.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
C.JS_CONST_gkc0 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
C.JS_CONST_rr7 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
C.JS_CONST_s8I = function(_, letter) { return letter.toUpperCase(); };
C.JsonCodec_null_null = new P.JsonCodec(null, null);
C.JsonDecoder_null = new P.JsonDecoder(null);
C._CustomEventStreamProvider__determineMouseWheelEventType = new W._CustomEventStreamProvider(W.Element__determineMouseWheelEventType$closure());
{
  init.isHunkLoaded = function(hunkHash) {
    return !!$dart_deferred_initializers[hunkHash];
  };
  init.deferredInitialized = new Object(null);
  init.isHunkInitialized = function(hunkHash) {
    return init.deferredInitialized[hunkHash];
  };
  init.initializeLoadedHunk = function(hunkHash) {
    $dart_deferred_initializers[hunkHash](globalsHolder, $);
    init.deferredInitialized[hunkHash] = true;
  };
}
init.deferredLibraryUris = {};
init.deferredLibraryHashes = {};
$.color_vs_source = "attribute vec3 aVertexPosition;\nattribute vec3 aVertexColor;\n\nuniform mat4 uMVMatrix;\nuniform mat4 uWVMatrix;\nuniform mat4 uPMatrix;\n\nvarying vec4 vColor;\n\nvoid main(void) {\n  gl_Position = uPMatrix * uWVMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n  vColor = vec4(aVertexColor, 1.0);\n}\n";
$.color_fs_source = "precision highp float;\nvarying vec4 vColor;\nvoid main(void) {\n  gl_FragColor = vColor;\n}\n    ";
$.texture_vs_source = "attribute vec3 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat4 uMVMatrix;\nuniform mat4 uWVMatrix;\nuniform mat4 uPMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void) {\n  gl_Position = uPMatrix * uWVMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n  vTextureCoord = aTextureCoord;\n}\n";
$.texture_fs_source = "precision highp float;\nvarying vec2 vTextureCoord;\nuniform sampler2D uSampler;\nvoid main(void) {\n  gl_FragColor = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));\n}\n";
$.texture_part_vs_source = "precision highp float;\n\nattribute vec3 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat4 uMVMatrix;\nuniform mat4 uWVMatrix;\nuniform mat4 uPMatrix;\n\nuniform vec2 t_offset;\nuniform vec2 t_size;\nvarying vec2 vTextureCoord;\n\nvoid main(void) {\n  gl_Position = uPMatrix * uWVMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n  vTextureCoord = aTextureCoord * t_size + t_offset;\n}\n";
$.texture_part_fs_source = "precision highp float;\nvarying vec2 vTextureCoord;\n\nuniform sampler2D uSampler;\nvoid main(void) {\n  gl_FragColor = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));\n}\n";
$.lighting_vs_source = "precision highp float;\n\nconst int MAX_POINT_LIGHTS = 2;\n\nattribute vec3 aVertexPosition;\nattribute vec3 aVertexNormal;\nattribute vec2 aTextureCoord;\n\nuniform mat4 uMVMatrix;\nuniform mat4 uWVMatrix;\nuniform mat4 uPMatrix;\nuniform mat3 uNMatrix;\n\nuniform vec3 uAmbientColor;\n\nuniform vec3 uDirectionalDir;\nuniform vec3 uDirectionalColor;\n\nstruct PointLight\n{\n  vec3 uPos;\n  vec3 uColor;\n  vec3 uAttenuation;\n};\n\nuniform PointLight lights[MAX_POINT_LIGHTS];\n\nvarying vec2 vTextureCoord;\nvarying vec3 vLightWeighting;\nvarying vec3 vVertexPos;\n\nvec3 calcLightInternal(vec3 vertex_normal, vec3 light_dir, vec3 color)\n{\n  vec3 trans_normal = uNMatrix * vertex_normal;\n  float lightWeighting = max(dot(trans_normal, normalize(light_dir)), 0.0);\n  return color * lightWeighting;\n}\n\nvec3 calcDirLight(vec3 vertex_normal)\n{\n  return calcLightInternal(vertex_normal, uDirectionalDir, uDirectionalColor);\n}\n\nvec3 calcPointLight(vec3 vertex_normal, vec3 vertex_pos, int index)\n{\n  vec3 light_dir = lights[index].uPos - vertex_pos;\n  float distance = length(light_dir);\n  return calcLightInternal(vertex_normal, light_dir, lights[index].uColor) / distance * lights[index].uAttenuation.x;  \n}\n\nvoid main(void) {\n  gl_Position = uPMatrix * uWVMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n\n  vTextureCoord = aTextureCoord;\n\n  vec3 vertex_pos = (uMVMatrix * vec4(aVertexPosition, 1.0)).xyz;\n\n  vLightWeighting = uAmbientColor + calcDirLight(aVertexNormal) + calcPointLight(aVertexNormal, vertex_pos, 0);\n}\n";
$.lighting_fs_source = "precision highp float;\nvarying vec2 vTextureCoord;\nvarying vec3 vLightWeighting;\nvarying vec3 vVertexPos;\nuniform sampler2D uSampler;\n\nvoid main(void) {\n  vec4 texture_color = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));\n  gl_FragColor = vec4(texture_color.xyz * vLightWeighting, texture_color.a);\n}\n";
$.BasicShaderProperties_propName = "BasicShaderProperties";
$.AtlasTextureProperty_propName = "AtlasTextureProperty";
$.LightingShaderProperty_propName = "LightingShaderProperty";
$.IsolateNatives_enableSpawnWorker = null;
$.RawReceivePortImpl__nextFreeId = 1;
$.Primitives_mirrorFunctionCacheName = "$cachedFunction";
$.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
$.Closure_functionCounter = 0;
$.BoundClosure_selfFieldNameCache = null;
$.BoundClosure_receiverFieldNameCache = null;
$.RuntimeFunctionType_inAssert = false;
$.getTagFunction = null;
$.alternateTagFunction = null;
$.prototypeForTagFunction = null;
$.dispatchRecordsForInstanceTags = null;
$.interceptorsForUncacheableTags = null;
$.initNativeDispatchFlag = null;
$.printToZone = null;
$._nextCallback = null;
$._lastCallback = null;
$._lastPriorityCallback = null;
$._isInCallbackLoop = false;
$.Zone__current = C.C__RootZone;
$.Expando__keyCount = 0;
$.Device__isOpera = null;
$.Device__isIE = null;
$.Device__isFirefox = null;
$.Device__isWebKit = null;
$.Device__cachedCssPrefix = null;
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return H.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  return new P.Expando(null);
});
Isolate.$lazy($, "noSuchMethodPattern", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({toString: function() {
      return "$receiver$";
    }}));
});
Isolate.$lazy($, "notClosurePattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null, toString: function() {
      return "$receiver$";
    }}));
});
Isolate.$lazy($, "nullCallPattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
});
Isolate.$lazy($, "nullLiteralCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    var $argumentsExpr$ = '$arguments$';
    try {
      null.$method$($argumentsExpr$);
    } catch (e) {
      return e.message;
    }
  }());
});
Isolate.$lazy($, "undefinedCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    var $argumentsExpr$ = '$arguments$';
    try {
      (void 0).$method$($argumentsExpr$);
    } catch (e) {
      return e.message;
    }
  }());
});
Isolate.$lazy($, "nullPropertyPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
});
Isolate.$lazy($, "nullLiteralPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    try {
      null.$method$;
    } catch (e) {
      return e.message;
    }
  }());
});
Isolate.$lazy($, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    try {
      (void 0).$method$;
    } catch (e) {
      return e.message;
    }
  }());
});
Isolate.$lazy($, "scheduleImmediateClosure", "_AsyncRun_scheduleImmediateClosure", "get$_AsyncRun_scheduleImmediateClosure", function() {
  return P._AsyncRun__initializeScheduleImmediate();
});
Isolate.$lazy($, "_toStringVisiting", "IterableBase__toStringVisiting", "get$IterableBase__toStringVisiting", function() {
  return [];
});
Isolate.$lazy($, "_buttonIds", "Keyboard__buttonIds", "get$Keyboard__buttonIds", function() {
  return [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 16, 17, 18, 32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 13, 38, 40, 37, 39, 27, 192, 220, 8, 20, 221, 188, 93, 189, 46, 35, 187, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 61, 59, 166, 36, 45, 183, 3, 224, 91, 12, 46, 111, 39, 104, 101, 100, 45, 109, 106, 105, 38, 33, 36, 97, 110, 107, 103, 102, 40, 34, 35, 99, 98, 37, 96, 144, 219, 33, 34, 19, 190, 44, 63, 145, 186, 222, 191, 9, 192, 229, 224, 0, 91, 92];
});
Isolate.$lazy($, "_buttonIds", "Mouse__buttonIds", "get$Mouse__buttonIds", function() {
  return [0, 1, 2];
});
Isolate.$lazy($, "quad_vertices", "quad_vertices", "get$quad_vertices", function() {
  return [0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 2, 0];
});
Isolate.$lazy($, "quad_coords", "quad_coords", "get$quad_coords", function() {
  return [0, 0, 0, 1, 1, 0, 1, 1];
});
Isolate.$lazy($, "quad_indices", "quad_indices", "get$quad_indices", function() {
  return [0, 3, 1, 0, 2, 3];
});

init.metadata = [{func: "dynamic__bool", args: [P.bool]},
{func: "args1", args: [null]},
{func: "void_", void: true},
{func: "args2", args: [null, null]},
{func: "args0"},
{func: "dynamic__dynamic_String", args: [null, P.String]},
{func: "dynamic__String", args: [P.String]},
{func: "dynamic__Vector2_Tile3dBehaviour", args: [T.Vector2, E.Tile3dBehaviour]},
{func: "dynamic__Node", args: [Y.Node]},
{func: "dynamic__void_", args: [{func: "void_", void: true}]},
{func: "void__Object__StackTrace", void: true, args: [P.Object], opt: [P.StackTrace]},
{func: "void__dynamic__StackTrace", void: true, args: [null], opt: [P.StackTrace]},
{func: "dynamic__dynamic__dynamic", args: [null], opt: [null]},
{func: "bool_", ret: P.bool},
{func: "dynamic__dynamic_StackTrace", args: [null, P.StackTrace]},
{func: "void__dynamic_StackTrace", void: true, args: [null, P.StackTrace]},
{func: "dynamic__Symbol_dynamic", args: [P.Symbol, null]},
{func: "String__int", ret: P.String, args: [P.$int]},
{func: "dynamic__HttpRequest", args: [W.HttpRequest]},
{func: "dynamic__LevelData", args: [K.LevelData]},
{func: "void__num", void: true, args: [P.num]},
{func: "void__Event", void: true, args: [W.Event]},
{func: "void__TouchEvent", void: true, args: [W.TouchEvent]},
{func: "void__KeyboardEvent", void: true, args: [W.KeyboardEvent]},
{func: "void__MouseEvent", void: true, args: [W.MouseEvent]},
{func: "dynamic__Touch", args: [W.Touch]},
{func: "void__GameLoop", void: true, args: [B.GameLoop]},
{func: "void__GameLoop_GameLoopTouch", void: true, args: [B.GameLoop, G.GameLoopTouch]},
{func: "dynamic__List", args: [[P.List, S.BaseGeometry]]},
{func: "void__void_", void: true, args: [{func: "void_", void: true}]},
{func: "void__dynamic", void: true, args: [null]},
{func: "bool__dynamic_dynamic", ret: P.bool, args: [null, null]},
{func: "int__dynamic", ret: P.$int, args: [null]},
{func: "int__Comparable_Comparable", ret: P.$int, args: [P.Comparable, P.Comparable]},
{func: "bool__Object_Object", ret: P.bool, args: [P.Object, P.Object]},
{func: "int__Object", ret: P.$int, args: [P.Object]},
{func: "String__EventTarget", ret: P.String, args: [W.EventTarget]},
,
];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function MyClass() {
  }
  MyClass.prototype = properties;
  new MyClass();
  return properties;
}
;
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
function init() {
  Isolate.$isolateProperties = Object.create(null);
  init.allClasses = Object.create(null);
  init.getTypeFromName = function(name) {
    return init.allClasses[name];
  };
  init.interceptorsByTag = Object.create(null);
  init.leafTags = Object.create(null);
  init.finishedClasses = Object.create(null);
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    if (!init.lazies)
      init.lazies = Object.create(null);
    init.lazies[fieldName] = getterName;
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined)
              $[fieldName] = null;
          }
        } else
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName);
        return result;
      } finally {
        $[getterName] = function() {
          return this[fieldName];
        };
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var staticNames = Object.keys(isolateProperties);
      for (var i = 0; i < staticNames.length; i++) {
        var staticName = staticNames[i];
        this[staticName] = isolateProperties[staticName];
      }
      var lazies = init.lazies;
      var lazyInitializers = lazies ? Object.keys(lazies) : [];
      for (var i = 0; i < lazyInitializers.length; i++)
        this[lazies[lazyInitializers[i]]] = null;
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
      for (var i = 0; i < lazyInitializers.length; i++) {
        var lazyInitName = lazies[lazyInitializers[i]];
        this[lazyInitName] = isolateProperties[lazyInitName];
      }
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    return Isolate;
  };
}
!function() {
  function intern(s) {
    var o = {};
    o[s] = 1;
    return Object.keys(convertToFastObject(o))[0];
  }
  init.getIsolateTag = function(name) {
    return intern("___dart_" + name + init.isolateTag);
  };
  var tableProperty = "___dart_isolate_tags_";
  var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
  var rootProperty = "_ZxYxX";
  for (var i = 0;; i++) {
    var property = intern(rootProperty + "_" + i + "_");
    if (!(property in usedProperties)) {
      usedProperties[property] = 1;
      init.isolateTag = property;
      break;
    }
  }
  init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
}();
;// BEGIN invoke [main].
(function(callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }
  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].removeEventListener("load", onLoad, false);
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i)
    scripts[i].addEventListener("load", onLoad, false);
})(function(currentScript) {
  init.currentScript = currentScript;
  if (typeof dartMainRunner === "function")
    dartMainRunner(function(a) {
      H.startRootIsolate(N.main$closure(), a);
    }, []);
  else
    (function(a) {
      H.startRootIsolate(N.main$closure(), a);
    })([]);
});
;
// END invoke [main].
})()

//# sourceMappingURL=1gam1.dart.js.map
